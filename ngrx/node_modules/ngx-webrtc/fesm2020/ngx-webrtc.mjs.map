{"version":3,"file":"ngx-webrtc.mjs","sources":["../../../../libs/ngx-webrtc/src/lib/directives/toggle-audio-user.directive.ts","../../../../libs/ngx-webrtc/src/lib/directives/toggle-video-user.directive.ts","../../../../libs/ngx-webrtc/src/lib/enums/stream-type.ts","../../../../libs/ngx-webrtc/src/lib/enums/peer-connection-client-signal-message-type.ts","../../../../libs/ngx-webrtc/src/lib/sdp-utils.ts","../../../../libs/ngx-webrtc/src/lib/services/utility.service.ts","../../../../libs/ngx-webrtc/src/lib/peer-connection-client.ts","../../../../libs/ngx-webrtc/src/lib/ngx-webrtc-configuration.ts","../../../../libs/ngx-webrtc/src/lib/ngx-webrtc-storage.ts","../../../../libs/ngx-webrtc/src/lib/services/call.service.ts","../../../../libs/ngx-webrtc/src/lib/ngx-webrtc-storage-prefix.ts","../../../../libs/ngx-webrtc/src/lib/services/preferences.service.ts","../../../../libs/ngx-webrtc/src/lib/services/stream.service.ts","../../../../libs/ngx-webrtc/src/lib/directives/toggle-video-self.directive.ts","../../../../libs/ngx-webrtc/src/lib/directives/share-screen.directive.ts","../../../../libs/ngx-webrtc/src/lib/directives/toggle-audio-self.directive.ts","../../../../libs/ngx-webrtc/src/lib/ngx-webrtc.module.ts","../../../../libs/ngx-webrtc/src/lib/enums/device-type.ts","../../../../libs/ngx-webrtc/src/lib/services/device.service.ts","../../../../libs/ngx-webrtc/src/ngx-webrtc.ts"],"sourcesContent":["import { Directive, HostBinding, HostListener, Input } from '@angular/core';\nimport { UserInCall } from \"../interfaces/user-in-call\";\n\n/**\n * Send a toggle audio request to a specific peer connection.\n */\n@Directive({\n  selector: '[ngxWebrtcToggleAudioUser]',\n})\nexport class ToggleAudioUserDirective {\n\n  @Input() ngxWebrtcToggleAudioUser: UserInCall | null = null;\n  @HostBinding('class.disabled') public isDisabled = true;\n  @HostBinding('class.enabled') public isEnabled = false;\n  @HostListener('click', ['$event']) onClick(): void{\n    this.toggleUserAudio();\n  }\n\n  toggleUserAudio(): void {\n    if (!this.ngxWebrtcToggleAudioUser) {\n      console.warn('user not set');\n      return;\n    }\n    if (this.ngxWebrtcToggleAudioUser?.connection) {\n      this.ngxWebrtcToggleAudioUser.connection.requestMuteAudio();\n      this.isEnabled = !this.isEnabled;\n      this.isDisabled = !this.isDisabled;\n    }\n  }\n\n}\n","import { Directive, HostBinding, HostListener, Input } from '@angular/core';\nimport { UserInCall } from \"../interfaces/user-in-call\";\n\n/**\n * Send a toggle video request to a specific peer connection.\n */\n@Directive({\n  selector: '[ngxWebrtcToggleVideoUser]',\n})\nexport class ToggleVideoUserDirective {\n\n  @Input() ngxWebrtcToggleVideoUser: UserInCall | null = null;\n  @HostBinding('class.disabled') public isDisabled = true;\n  @HostBinding('class.enabled') public isEnabled = false;\n  @HostListener('click', ['$event']) onClick(): void{\n    this.toggleUserVideo();\n  }\n\n  toggleUserVideo(): void {\n    if (!this.ngxWebrtcToggleVideoUser) {\n      console.warn('user not set');\n      return;\n    }\n    if (this.ngxWebrtcToggleVideoUser?.connection) {\n      this.ngxWebrtcToggleVideoUser.connection.requestMuteVideo();\n      this.isEnabled = !this.isEnabled;\n      this.isDisabled = !this.isDisabled;\n    }\n  }\n\n}\n","\nexport enum StreamType {\n  Video = 'video',\n  Audio = 'audio'\n}\n","\nexport enum PeerConnectionClientSignalMessageType {\n  Candidate = 'candidate',\n  Answer = 'answer',\n  Offer = 'offer',\n  Bye = 'bye',\n  RequestMuteAudio = 'request-mute-audio',\n  RequestMuteVideo = 'request-mute-video',\n  AudioMuted = 'audio-muted',\n  AudioUnmuted = 'audio-unmuted',\n  VideoMuted = 'video-muted',\n  VideoUnmuted = 'video-unmuted',\n  StartShareScreen = 'start-share-screen',\n  StopShareScreen = 'stop-share-screen'\n}\n","import { SdpSettings } from \"./interfaces/sdp-settings\";\n\nexport interface FormatObject {\n  pt: string;\n  params: FormatParams\n}\n\nexport interface FormatParams {\n  [key: string]: string | number\n}\n\nexport class  SdpUtils {\n\n  public static iceCandidateType(candidateStr: string): string {\n    return candidateStr.split(' ')[7];\n  }\n\n  public static maybeSetOpusOptions(sdp: string, params: SdpSettings): string {\n    // Set Opus in Stereo, if stereo is true, unset it, if stereo is false, and\n    // do nothing if otherwise.\n    if (params.opusStereo) {\n      sdp = SdpUtils.setCodecParam(sdp, 'opus/48000', 'stereo', '1');\n    } else if (!params.opusStereo) {\n      sdp = SdpUtils.removeCodecParam(sdp, 'opus/48000', 'stereo');\n    }\n\n    // Set Opus FEC, if opusfec is true, unset it, if opusfec is false, and\n    // do nothing if otherwise.\n    if (params.opusFec) {\n      sdp = SdpUtils.setCodecParam(sdp, 'opus/48000', 'useinbandfec', '1');\n    } else if (!params.opusFec) {\n      sdp = SdpUtils.removeCodecParam(sdp, 'opus/48000', 'useinbandfec');\n    }\n\n    // Set Opus DTX, if opusdtx is true, unset it, if opusdtx is false, and\n    // do nothing if otherwise.\n    if (params.opusDtx) {\n      sdp = SdpUtils.setCodecParam(sdp, 'opus/48000', 'usedtx', '1');\n    } else if (!params.opusDtx) {\n      sdp = SdpUtils.removeCodecParam(sdp, 'opus/48000', 'usedtx');\n    }\n\n    // Set Opus maxplaybackrate, if requested.\n    if (params.opusMaxPbr) {\n      sdp = SdpUtils.setCodecParam(\n          sdp, 'opus/48000', 'maxplaybackrate', params.opusMaxPbr);\n    }\n    return sdp;\n  }\n\n  public static maybeSetAudioSendBitRate(sdp: string, params: SdpSettings): string {\n    if (!params.audioSendBitrate) {\n      return sdp;\n    }\n    // console.log('Prefer audio send bitrate: ' + params.audioSendBitrate);\n    return SdpUtils.preferBitRate(sdp, params.audioSendBitrate, 'audio');\n  }\n\n  public static maybeSetAudioReceiveBitRate(sdp: string, params: SdpSettings): string {\n    if (!params.audioRecvBitrate) {\n      return sdp;\n    }\n    // console.log('Prefer audio receive bitrate: ' + params.audioRecvBitrate);\n    return SdpUtils.preferBitRate(sdp, params.audioRecvBitrate, 'audio');\n  }\n\n  public static maybeSetVideoSendBitRate(sdp: string, params: SdpSettings): string {\n    if (!params.videoSendBitrate) {\n      return sdp;\n    }\n    // console.log('Prefer video send bitrate: ' + params.videoSendBitrate);\n    return SdpUtils.preferBitRate(sdp, params.videoSendBitrate, 'video');\n  }\n\n  public static maybeSetVideoReceiveBitRate(sdp: string, params: SdpSettings): string {\n    if (!params.videoRecvBitrate) {\n      return sdp;\n    }\n    // console.log('Prefer video receive bitrate: ' + params.videoRecvBitrate);\n    return SdpUtils.preferBitRate(sdp, params.videoRecvBitrate, 'video');\n  }\n\n  // Add a b=AS:bitrate line to the m=mediaType section.\n  public static preferBitRate(sdp: string, bitrate: string | number, mediaType: string): string {\n    const sdpLines = sdp.split('\\r\\n');\n\n    // Find m line for the given mediaType.\n    const mLineIndex = SdpUtils.findLine(sdpLines, 'm=', mediaType);\n    if (mLineIndex === null) {\n      // console.log('Failed to add bandwidth line to sdp, as no m-line found');\n      return sdp;\n    }\n\n    // Find next m-line if any.\n    let nextMLineIndex = SdpUtils.findLineInRange(sdpLines, mLineIndex + 1, -1, 'm=');\n    if (nextMLineIndex === null) {\n      nextMLineIndex = sdpLines.length;\n    }\n\n    // Find c-line corresponding to the m-line.\n    const cLineIndex = SdpUtils.findLineInRange(sdpLines, mLineIndex + 1,\n        nextMLineIndex, 'c=');\n    if (cLineIndex === null) {\n      // console.log('Failed to add bandwidth line to sdp, as no c-line found');\n      return sdp;\n    }\n\n    // Check if bandwidth line already exists between c-line and next m-line.\n    const bLineIndex = SdpUtils.findLineInRange(sdpLines, cLineIndex + 1,\n        nextMLineIndex, 'b=AS');\n    if (bLineIndex) {\n      sdpLines.splice(bLineIndex, 1);\n    }\n\n    // Create the b (bandwidth) sdp line.\n    const bwLine = 'b=AS:' + bitrate;\n    // As per RFC 4566, the b line should follow after c-line.\n    sdpLines.splice(cLineIndex + 1, 0, bwLine);\n    sdp = sdpLines.join('\\r\\n');\n    return sdp;\n  }\n\n  // Add an a=fmtp: x-google-min-bitrate=kbps line, if videoSendInitialBitrate\n  // is specified. We'll also add a x-google-min-bitrate value, since the max\n  // must be >= the min.\n  public static maybeSetVideoSendInitialBitRate(sdp: string, params: SdpSettings): string {\n    if (!params.videoSendInitialBitrate) {\n      return sdp;\n    }\n    let initialBitrate = typeof params.videoSendInitialBitrate === 'string' ?\n      parseInt(params.videoSendInitialBitrate, 10) : params.videoSendInitialBitrate;\n    if (!initialBitrate) {\n      return sdp;\n    }\n\n    // Validate the initial bitrate value.\n    let maxBitrate = (typeof initialBitrate === 'string') ? parseInt(initialBitrate, 10) : initialBitrate;\n    if (params.videoSendBitrate) {\n      const bitrate = typeof params.videoSendBitrate === 'string' ?\n        parseInt(params.videoSendBitrate, 10) : params.videoSendBitrate;\n      if (bitrate) {\n        if (initialBitrate > bitrate) {\n          // console.log('Clamping initial bitrate to max bitrate of ' + bitrate + ' kbps.');\n          initialBitrate = bitrate;\n          params.videoSendInitialBitrate = initialBitrate;\n        }\n        maxBitrate = bitrate;\n      }\n    }\n\n    const sdpLines = sdp.split('\\r\\n');\n\n    // Search for m line.\n    const mLineIndex = SdpUtils.findLine(sdpLines, 'm=', 'video');\n    if (mLineIndex === null) {\n      // console.log('Failed to find video m-line');\n      return sdp;\n    }\n    // Figure out the first codec payload type on the m=video SDP line.\n    const videoMLine = sdpLines[mLineIndex];\n    const pattern = new RegExp('m=video\\\\s\\\\d+\\\\s[A-Z/]+\\\\s');\n    const sendPayloadType = videoMLine.split(pattern)[1].split(' ')[0];\n    const line = SdpUtils.findLine(sdpLines, 'a=rtpmap', sendPayloadType);\n    if (!line) {\n      return sdp;\n    }\n    const fmtpLine = sdpLines[line];\n    const codecName = fmtpLine.split('a=rtpmap:' +\n        sendPayloadType)[1].split('/')[0];\n\n    // Use codec from params if specified via URL param, otherwise use from SDP.\n    const codec = params.videoSendCodec || codecName;\n    sdp = SdpUtils.setCodecParam(sdp, codec, 'x-google-min-bitrate', params.videoSendInitialBitrate.toString());\n    sdp = SdpUtils.setCodecParam(sdp, codec, 'x-google-max-bitrate', maxBitrate.toString());\n\n    return sdp;\n  }\n\n  public static removePayloadTypeFromMline(mLine: string, payloadType: string): string {\n    const mLineArray = mLine.split(' ');\n    for (let i = 0; i < mLineArray.length; ++i) {\n      if (mLineArray[i] === payloadType.toString()) {\n        mLineArray.splice(i, 1);\n      }\n    }\n    return mLineArray.join(' ');\n  }\n\n  public static removeCodecByName(sdpLines: string[], codec: string): string[] {\n    const index = SdpUtils.findLine(sdpLines, 'a=rtpmap', codec);\n    if (index === null) {\n      return sdpLines;\n    }\n    const payloadType = SdpUtils.getCodecPayloadTypeFromLine(sdpLines[index]);\n    if (!payloadType) {\n      return sdpLines;\n    }\n    sdpLines.splice(index, 1);\n\n    // Search for the video m= line and remove the codec.\n    const mLineIndex = SdpUtils.findLine(sdpLines, 'm=', 'video');\n    if (mLineIndex === null) {\n      return sdpLines;\n    }\n    sdpLines[mLineIndex] = SdpUtils.removePayloadTypeFromMline(sdpLines[mLineIndex], payloadType);\n    return sdpLines;\n  }\n\n  public static removeCodecByPayloadType(sdpLines: string[], payloadType: string): string[] {\n    const index = SdpUtils.findLine(sdpLines, 'a=rtpmap', payloadType.toString());\n    if (index === null) {\n      return sdpLines;\n    }\n    sdpLines.splice(index, 1);\n\n    // Search for the video m= line and remove the codec.\n    const mLineIndex = SdpUtils.findLine(sdpLines, 'm=', 'video');\n    if (mLineIndex === null) {\n      return sdpLines;\n    }\n    sdpLines[mLineIndex] = SdpUtils.removePayloadTypeFromMline(sdpLines[mLineIndex],\n        payloadType);\n    return sdpLines;\n  }\n\n  public static maybeRemoveVideoFec(sdp: string, params: SdpSettings): string {\n    if (params.videoFec !== false) {\n      return sdp;\n    }\n\n    let sdpLines = sdp.split('\\r\\n');\n\n    let index = SdpUtils.findLine(sdpLines, 'a=rtpmap', 'red');\n    if (index === null) {\n      return sdp;\n    }\n    const redPayloadType = SdpUtils.getCodecPayloadTypeFromLine(sdpLines[index]);\n    if (redPayloadType === null) {\n      return sdp;\n    }\n    sdpLines = SdpUtils.removeCodecByPayloadType(sdpLines, redPayloadType);\n    sdpLines = SdpUtils.removeCodecByName(sdpLines, 'ulpfec');\n\n    // Remove fmtp lines associated with red codec.\n    index = SdpUtils.findLine(sdpLines, 'a=fmtp', redPayloadType.toString());\n    if (index === null) {\n      return sdp;\n    }\n    const fmtpLine = SdpUtils.parseFmtpLine(sdpLines[index]);\n    const rtxPayloadType = fmtpLine?.pt;\n    if (!rtxPayloadType || rtxPayloadType === null) {\n      return sdp;\n    }\n    sdpLines.splice(index, 1);\n\n    sdpLines = SdpUtils.removeCodecByPayloadType(sdpLines, rtxPayloadType);\n    return sdpLines.join('\\r\\n');\n  }\n\n  // Promotes |audioSendCodec| to be the first in the m=audio line, if set.\n  public static maybePreferAudioSendCodec(sdp: string, params: SdpSettings): string {\n    return SdpUtils.maybePreferCodec(sdp, 'audio', 'send', params.audioSendCodec);\n  }\n\n  // Promotes |audioRecvCodec| to be the first in the m=audio line, if set.\n  public static maybePreferAudioReceiveCodec(sdp: string, params: SdpSettings): string {\n    return SdpUtils.maybePreferCodec(sdp, 'audio', 'receive', params.audioRecvCodec);\n  }\n\n  // Promotes |videoSendCodec| to be the first in the m=audio line, if set.\n  public static maybePreferVideoSendCodec(sdp: string, params: SdpSettings): string {\n    return SdpUtils.maybePreferCodec(sdp, 'video', 'send', params.videoSendCodec);\n  }\n\n  // Promotes |videoRecvCodec| to be the first in the m=audio line, if set.\n  public static maybePreferVideoReceiveCodec(sdp: string, params: SdpSettings): string {\n    return SdpUtils.maybePreferCodec(sdp, 'video', 'receive', params.videoRecvCodec);\n  }\n\n  // Sets |codec| as the default |type| codec if it's present.\n  // The format of |codec| is 'NAME/RATE', e.g. 'opus/48000'.\n  public static maybePreferCodec(sdp: string, type: string, dir: string, codec?: string ): string {\n    // let str = type + ' ' + dir + ' codec';\n    if (!codec) {\n      // console.log('No preference on ' + str + '.');\n      return sdp;\n    }\n\n    // console.log('Prefer ' + str + ': ' + codec);\n\n    const sdpLines = sdp.split('\\r\\n');\n\n    // Search for m line.\n    const mLineIndex = SdpUtils.findLine(sdpLines, 'm=', type);\n    if (mLineIndex === null) {\n      return sdp;\n    }\n\n    // If the codec is available, set it as the default in m line.\n    let payload = null;\n    // Iterate through rtpmap enumerations to find all matching codec entries\n    for (let i = sdpLines.length - 1; i >= 0 ; --i) {\n      // Finds first match in rtpmap\n      const index = SdpUtils.findLineInRange(sdpLines, i, 0, 'a=rtpmap', codec, 'desc');\n      if (index !== null) {\n        // Skip all of the entries between i and index match\n        i = index;\n        payload = SdpUtils.getCodecPayloadTypeFromLine(sdpLines[index]);\n        if (payload) {\n          // Move codec to top\n          sdpLines[mLineIndex] = SdpUtils.setDefaultCodec(sdpLines[mLineIndex], payload);\n        }\n      } else {\n        // No match means we can break the loop\n        break;\n      }\n    }\n\n    sdp = sdpLines.join('\\r\\n');\n    return sdp;\n  }\n\n  // Set fmtp param to specific codec in SDP. If param does not exists, add it.\n  public static setCodecParam(sdp: string, codec: string, param: string, value: string | number): string {\n    const sdpLines = sdp.split('\\r\\n');\n\n    const fmtpLineIndex = SdpUtils.findFmtpLine(sdpLines, codec);\n\n    let fmtpObj: FormatObject | null = {pt: '', params: {}}\n    if (fmtpLineIndex === null) {\n      const index = SdpUtils.findLine(sdpLines, 'a=rtpmap', codec);\n      if (index === null) {\n        return sdp;\n      }\n      const payload = SdpUtils.getCodecPayloadTypeFromLine(sdpLines[index]);\n      if (payload === null) {\n        return sdp;\n      }\n      fmtpObj.pt = payload.toString();\n      fmtpObj.params = {};\n      fmtpObj.params[param] = value;\n      const result = SdpUtils.writeFmtpLine(fmtpObj);\n      if (result) {\n        sdpLines.splice(index + 1, 0, result);\n      }\n    } else {\n      fmtpObj = SdpUtils.parseFmtpLine(sdpLines[fmtpLineIndex]);\n      if (fmtpObj) {\n        fmtpObj.params[param] = value;\n        const result = SdpUtils.writeFmtpLine(fmtpObj);\n        if (result) {\n          sdpLines[fmtpLineIndex] = result;\n        }\n      }\n    }\n\n    sdp = sdpLines.join('\\r\\n');\n    return sdp;\n  }\n\n  // Remove fmtp param if it exists.\n  public static removeCodecParam(sdp: string, codec: string, param: string): string {\n    const sdpLines = sdp.split('\\r\\n');\n\n    const fmtpLineIndex = SdpUtils.findFmtpLine(sdpLines, codec);\n    if (fmtpLineIndex === null) {\n      return sdp;\n    }\n\n    const map = SdpUtils.parseFmtpLine(sdpLines[fmtpLineIndex]);\n    if (map === null) {\n      return sdp;\n    }\n    delete map.params[param];\n\n    const newLine = SdpUtils.writeFmtpLine(map);\n    if (newLine === null) {\n      sdpLines.splice(fmtpLineIndex, 1);\n    } else {\n      sdpLines[fmtpLineIndex] = newLine;\n    }\n\n    sdp = sdpLines.join('\\r\\n');\n    return sdp;\n  }\n\n  // Split an fmtp line into an object including 'pt' and 'params'.\n  public static parseFmtpLine(fmtpLine: string): null | FormatObject {\n    const fmtpObj: FormatObject = {pt: '', params: {}};\n    const spacePos = fmtpLine.indexOf(' ');\n    const keyValues = fmtpLine.substring(spacePos + 1).split(';');\n\n    const pattern = new RegExp('a=fmtp:(\\\\d+)');\n    const result = fmtpLine.match(pattern);\n    if (result && result.length === 2) {\n      fmtpObj.pt = result[1];\n    } else {\n      return null;\n    }\n\n    const params: FormatParams = {};\n    for (const pairString of keyValues) {\n      const pair = pairString.split('=');\n      if (pair.length === 2) {\n        params[pair[0]] = pair[1];\n      }\n    }\n    fmtpObj.params = params;\n\n    return fmtpObj;\n  }\n\n  // Generate an fmtp line from an object including 'pt' and 'params'.\n  public static writeFmtpLine(fmtpObj: FormatObject): string | null {\n    if (!Object.prototype.hasOwnProperty.call(fmtpObj, 'pt') || !Object.prototype.hasOwnProperty.call(fmtpObj, 'params')) {\n      return null;\n    }\n    const pt = fmtpObj.pt;\n    const params = fmtpObj.params;\n    const keyValues = [];\n    let i = 0;\n    for (const key in params) {\n      if (params[key]) {\n        keyValues[i] = key + '=' + params[key];\n        ++i;\n      }\n    }\n    if (i === 0) {\n      return null;\n    }\n    return 'a=fmtp:' + pt?.toString() + ' ' + keyValues.join(';');\n  }\n\n  // Find fmtp attribute for |codec| in |sdpLines|.\n  public static findFmtpLine(sdpLines: string[], codec: string): number | null {\n    // Find payload of codec.\n    const payload = SdpUtils.getCodecPayloadType(sdpLines, codec);\n    // Find the payload in fmtp line.\n    return payload ? SdpUtils.findLine(sdpLines, 'a=fmtp:' + payload.toString()) : null;\n  }\n\n  // Find the line in sdpLines that starts with |prefix|, and, if specified,\n  // contains |substr| (case-insensitive search).\n  public static findLine(sdpLines: string[], prefix: string, substr?: string): number | null {\n    return SdpUtils.findLineInRange(sdpLines, 0, -1, prefix, substr);\n  }\n\n  // Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|\n  // and, if specified, contains |substr| (case-insensitive search).\n  public static findLineInRange(\n    sdpLines: string[],\n    startLine: number,\n    endLine: number,\n    prefix?: string,\n    substr?: string,\n    direction?: 'asc' | 'desc'\n  ): number | null {\n    if (direction === undefined) {\n      direction = 'asc';\n    }\n\n    direction = direction || 'asc';\n\n    if (direction === 'asc') {\n      // Search beginning to end\n      const realEndLine = endLine !== -1 ? endLine : sdpLines.length;\n      for (let i = startLine; i < realEndLine; ++i) {\n        if (prefix && sdpLines[i].indexOf(prefix) === 0) {\n          if (!substr ||\n              sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\n            return i;\n          }\n        }\n      }\n    } else {\n      // Search end to beginning\n      const realStartLine = startLine !== -1 ? startLine : sdpLines.length - 1;\n      for (let j = realStartLine; j >= 0; --j) {\n        if (prefix && sdpLines[j].indexOf(prefix) === 0) {\n          if (!substr ||\n              sdpLines[j].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\n            return j;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  // Gets the codec payload type from sdp lines.\n  public static getCodecPayloadType(sdpLines: string[], codec: string): string | null {\n    const index = SdpUtils.findLine(sdpLines, 'a=rtpmap', codec);\n    return index ? SdpUtils.getCodecPayloadTypeFromLine(sdpLines[index]) : null;\n  }\n\n  // Gets the codec payload type from an a=rtpmap:X line.\n  public static getCodecPayloadTypeFromLine(sdpLine: string): string | null {\n    const pattern = new RegExp('a=rtpmap:(\\\\d+) [a-zA-Z0-9-]+\\\\/\\\\d+');\n    const result = sdpLine.match(pattern);\n    return (result && result.length === 2) ? result[1] : null;\n  }\n\n  // Returns a new m= line with the specified codec as the first one.\n  public static setDefaultCodec(mLine: string, payload: string): string {\n    const elements = mLine.split(' ');\n\n    // Just copy the first three parameters; codec order starts on fourth.\n    const newLine = elements.slice(0, 3);\n\n    // Put target payload first and copy in the rest.\n    newLine.push(payload);\n    for (let i = 3; i < elements.length; i++) {\n      if (elements[i] !== payload) {\n        newLine.push(elements[i]);\n      }\n    }\n    return newLine.join(' ');\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilityService {\n\n  public static getRandom(size: number): string {\n    return `${Math.round(Math.random() * parseInt(`1${(1e15 + 0 + '').slice(-size)}`, 10))}`;\n  }\n\n}","import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { PeerConnectionClientSettings } from './interfaces/peer-connection-client-settings';\nimport { PeerConnectionClientSignalMessage } from './interfaces/peer-connection-client-signal-message';\nimport { PeerConnectionClientSignalMessageType } from './enums/peer-connection-client-signal-message-type';\nimport { SdpUtils } from './sdp-utils';\nimport { StreamTrack } from './interfaces/stream-track';\nimport { StreamType } from './enums/stream-type';\nimport { UtilityService } from './services/utility.service';\n\nexport class PeerConnectionClient {\n\n  private startTime: number;\n  private started = false;\n  private isInitiator = false;\n  private hasRemoteSdp = false;\n  private messageQueue: PeerConnectionClientSignalMessage[] = [];\n  private connection: RTCPeerConnection | null;\n  private settings: PeerConnectionClientSettings;\n  private isNegotiating = false;\n  private id = UtilityService.getRandom(6);\n  private readonly DEFAULT_SDP_OFFER_OPTIONS: RTCOfferOptions = {\n    offerToReceiveAudio: true,\n    offerToReceiveVideo: true,\n  };\n  /**\n   * messages send by the peer connection\n   */\n  public signalingMessage = new EventEmitter<PeerConnectionClientSignalMessage>();\n  /**\n   * triggered when new candidate is available initial value is `null`\n   */\n  public seeNewCandidate$ = new BehaviorSubject<{location: string, candidate: string} | null>(null);\n  /**\n   * triggered when a remote stream is added @deprecated use remoteTrackAdded\n   */\n  public remoteStreamAdded = new EventEmitter<StreamTrack>();\n  /**\n   * triggered when a remote track is added\n   */\n  public remoteTrackAdded = new EventEmitter<StreamTrack>();\n  /**\n   * triggered when the `RTCSignalingState` is changed inital value is `null`\n   */\n  public signalState$ = new BehaviorSubject<RTCSignalingState | null>(null);\n  /**\n   * triggered if an error occure inital value is `null`\n   */\n  public error$ = new BehaviorSubject<{source: string, error?: Error} | null>(null);\n  /**\n   * triggered when the connected user toggle share screen, inital value is `false`\n   */\n  public useShareScreen$ = new BehaviorSubject<boolean>(false);\n  /**\n   * triggered when remote description is set, inital value is `null`\n   */\n  public remotesDescriptionSet = new BehaviorSubject<MediaStreamTrack | null>(null);\n  /**\n   * triggered when connected user close connection\n   */\n  public remoteHangUp = new EventEmitter<void>();\n  /**\n   * triggered when the connected user asks for mute user audio\n   */\n  public muteMyAudio = new EventEmitter<void>();\n  /**\n   * triggered when the connected user asks for mute user video\n   */\n  public muteMyVideo = new EventEmitter<void>();\n  /**\n   * triggered when the connected user mutes his video\n   */\n  public userMuteVideo = new EventEmitter<void>();\n  /**\n   * triggered when the connected user unmutes his video\n   */\n  public userUnmuteVideo = new EventEmitter<void>();\n  /**\n   * triggered when the connected user mutes his audio\n   */\n  public userMuteAudio = new EventEmitter<void>();\n  /**\n   * triggered when the connected user unmutes his audio\n   */\n  public userUnmuteAudio = new EventEmitter<void>();\n  /**\n   * triggerd on need negotiation\n   */\n  public negotiationNeededTriggered = new Subject<boolean>();\n  /**\n   * triggered on I see connection state changed, inital value is `null`\n   */\n  public iceConnectionState$ = new BehaviorSubject<RTCIceConnectionState| null>(null);\n\n  constructor(settings: PeerConnectionClientSettings) {\n    this.startTime = performance.now();\n    this.settings = settings;\n    this.log(this.settings.peerConnectionConfig);\n    this.connection = new RTCPeerConnection(this.settings.peerConnectionConfig);\n    if (this.settings.debug) {\n      (window as any).rtcpc = this.connection;\n    }\n    this.connection.onicecandidate = this.onIceCandidate.bind(this);\n    this.connection.ontrack = this.onRemoteTrackAdded.bind(this);\n    this.connection.onsignalingstatechange = this.onSignalingStateChange.bind(this);\n    this.connection.oniceconnectionstatechange = this.onIceConnectionStateChange.bind(this);\n    this.connection.onnegotiationneeded = this.onnegotiationneeded.bind(this);\n  }\n\n  /**\n   * Start Peer connection as caller\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n   * @param offerOptions options for the connection \n   * \n   * @returns `true` when offer is made `false` if no connection available or the connection is already open\n   */\n  public startAsCaller(offerOptions: RTCOfferOptions = {}): boolean {\n    this.log('startAsCaller', offerOptions);\n\n    if (!this.connection) {\n      return false;\n    }\n\n    if (this.started) {\n      return false;\n    }\n\n    this.isInitiator = true;\n    this.started = true;\n\n    \n    return this.createOffer(offerOptions);\n  }\n  \n  public createOffer(offerOptions: RTCOfferOptions = {}): boolean {\n    if (!this.connection) {\n      return false;\n    }\n    const constraints: RTCOfferOptions = {...this.DEFAULT_SDP_OFFER_OPTIONS, ...offerOptions};\n    this.log('Sending offer to peer, with constraints: \\n\\'' + JSON.stringify(constraints) + '\\'.');\n    this.connection.createOffer(constraints)\n        .then(this.setLocalSdpAndNotify.bind(this))\n        .catch(this.onError.bind(this, 'createOffer'));\n    return true;\n  }\n\n  /**\n   * Start Peer connection as callee\n   * @param initialMessages messages that are collected before the `PeerConnectionClient` instance is created\n   * @returns `true` when messages are queed or processed `false` if no connection available or the connection is already open\n   */\n  public startAsCallee(initialMessages?: string[] | PeerConnectionClientSignalMessage[]): boolean {\n    this.log('startAsCallee', initialMessages);\n    if (!this.connection) {\n      this.error('startAsCallee()', 'no connection');\n      return false;\n    }\n\n    if (this.started) {\n      this.error('startAsCallee()', 'not started');\n      return false;\n    }\n\n    this.started = true;\n\n    if (initialMessages && initialMessages.length > 0) {\n      // Convert received messages to JSON objects and add them to the message\n      // queue.\n      for (const message of initialMessages) {\n        this.receiveSignalingMessage(message);\n      }\n      return true;\n    }\n\n    // We may have queued messages received from the signaling channel before\n    // started.\n    if (this.messageQueue.length > 0) {\n      this.drainMessageQueue();\n    }\n    return true;\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.Bye` message to connected user and close the open connection \n   */\n  public close(): void {\n    this.log('close');\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.Bye\n    });\n    this.connection.close();\n    this.connection = null;\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.AudioMuted` message to connected user\n   */\n  public audioMuted(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.AudioMuted\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.AudioUnmuted` message to connected user\n   */\n  public audioUnmuted(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.AudioUnmuted\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.VideoMuted` message to connected user\n   */\n  public videoMuted(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.VideoMuted\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.VideoUnmuted` message to connected user\n   */\n  public videoUnmuted(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.VideoUnmuted\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.RequestMuteAudio` message to connected user\n   */\n  public requestMuteAudio(): void {\n    this.log('requestMuteAudio');\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.RequestMuteAudio\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.RequestMuteVideo` message to connected user\n   */\n  public requestMuteVideo(): void {\n    this.log('requestMuteVideo');\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.RequestMuteVideo\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.StartShareScreen` message to connected user\n   */\n  public startShareScreen(): void {\n    this.log('startShareScreen');\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.StartShareScreen\n    });\n  }\n\n  /**\n   * send `PeerConnectionClientSignalMessageType.StopShareScreen` message to connected user\n   */\n  public stopShareScreen(): void {\n    this.log('startShareScreen');\n    if (!this.connection) {\n      return;\n    }\n    this.signalingMessage.emit({\n      type: PeerConnectionClientSignalMessageType.StopShareScreen\n    });\n  }\n\n  /**\n   * get peer connection state\n   * @returns `null` if not connected otherwiese an object of `RTCSignalingState`, `RTCIceGatheringState` and `RTCIceConnectionState`\n   */\n  public getPeerConnectionStates(): {\n    signalingState: RTCSignalingState,\n    iceGatheringState: RTCIceGatheringState,\n    iceConnectionState: RTCIceConnectionState\n  } | null {\n    if (!this.connection) {\n      return null;\n    }\n    return {\n      signalingState: this.connection.signalingState,\n      iceGatheringState: this.connection.iceGatheringState,\n      iceConnectionState: this.connection.iceConnectionState\n    };\n  }\n\n  /**\n   * get the connection stats of a track in the connection \n   * @param track `MediaStreamTrack` to check state for\n   * @returns Promise that resolves to `RTCStatsReport`\n   */\n  public getPeerConnectionStats(track?: MediaStreamTrack): Promise<RTCStatsReport> {\n    if (!this.connection) {\n      return Promise.reject();\n    }\n    return this.connection.getStats(track);\n  }\n\n  /**\n   * add a `MediaStreamTrack` to the connection\n   * @param track `MediaStreamTrack` to be added to the connection.\n   */\n  public addTrack(track: MediaStreamTrack): void {\n    this.log('addTrack', track);\n    if (this.connection) {\n      const sender = this.connection.getSenders().find((s) => {\n        return s?.track?.kind === track.kind;\n      });\n      if (sender?.track) {\n        this.log('existing track found using replaceTrack instead');\n        this.replaceTrack(track);\n      } else {\n        this.connection.addTrack(track);\n      }\n    }\n  }\n\n  /**\n   * replace current `MediaStreamTrack` with new from parameter\n   * @param track new `MediaStreamTrack`\n   */\n  public replaceTrack(track: MediaStreamTrack): void {\n    this.log(track);\n    if (this.connection) {\n      const sender = this.connection.getSenders().find((s) => {\n        return s?.track?.kind === track.kind;\n      });\n      if (!sender?.track) {\n        this.log('no track found using addTrack instead');\n        this.addTrack(track);\n      } else {\n        sender.replaceTrack(track);\n      }\n    }\n  }\n\n  /**\n   * Add all `MediaStreamTrack`s of a `MediaStream` to the connection\n   * @param mediaSteam `MediaStream` with tracks\n   */\n  public addStream(mediaSteam: MediaStream): void {\n    this.log('addStream', mediaSteam);\n    mediaSteam.getTracks().forEach(track => {\n      this.addTrack(track);\n    });\n  }\n\n  private setLocalSdpAndNotify(sessionDescription: RTCSessionDescriptionInit): void {\n    if (!this.connection) {\n      return;\n    }\n    // this.log('setLocalSdpAndNotify', sessionDescription);\n    if (sessionDescription.sdp) {\n      sessionDescription.sdp = SdpUtils.maybeSetOpusOptions(sessionDescription.sdp, this.settings);\n      sessionDescription.sdp = SdpUtils.maybePreferAudioReceiveCodec(sessionDescription.sdp, this.settings);\n      sessionDescription.sdp = SdpUtils.maybePreferVideoReceiveCodec(sessionDescription.sdp, this.settings);\n      sessionDescription.sdp = SdpUtils.maybeSetAudioReceiveBitRate(sessionDescription.sdp, this.settings);\n      sessionDescription.sdp = SdpUtils.maybeSetVideoReceiveBitRate(sessionDescription.sdp, this.settings);\n      sessionDescription.sdp = SdpUtils.maybeRemoveVideoFec(sessionDescription.sdp, this.settings);\n    }\n    this.connection.setLocalDescription(sessionDescription)\n        .then(() => this.log('Set session description success.'))\n        .catch(this.onError.bind(this, 'setLocalDescription'));\n\n    // Chrome version of RTCSessionDescription can't be serialized directly\n    // because it JSON.stringify won't include attributes which are on the\n    // object's prototype chain. By creating the message to serialize\n    // explicitly we can avoid the issue.\n    this.signalingMessage.emit({\n      sdp: sessionDescription.sdp,\n      type: sessionDescription.type\n    });\n  }\n\n  private filterIceCandidate(candidateObj: RTCIceCandidate): boolean {\n    // this.log('filterIceCandidate', candidateObj);\n    const candidateStr = candidateObj.candidate;\n\n    // Always remove TCP candidates. Not needed in this context.\n    if (candidateStr.indexOf('tcp') !== -1) {\n      return false;\n    }\n\n    // If we're trying to remove non-relay candidates, do that.\n    if (this.settings.peerConnectionConfig.iceTransports === 'relay' && SdpUtils.iceCandidateType(candidateStr) !== 'relay') {\n      return false;\n    }\n\n    return true;\n  }\n\n  private onIceCandidate(event: RTCPeerConnectionIceEvent): void {\n    // this.log('onIceCandidate', event);\n    if (event.candidate) {\n      // Eat undesired candidates.\n      if (this.filterIceCandidate(event.candidate)) {\n        const message = {\n          type: PeerConnectionClientSignalMessageType.Candidate,\n          label: event.candidate.sdpMLineIndex,\n          id: event.candidate.sdpMid,\n          candidate: event.candidate.candidate\n        };\n        this.signalingMessage.emit(message);\n        this.onRecordIceCandidate('Local', event.candidate);\n      }\n    } else {\n      this.log('End of candidates.');\n    }\n  }\n\n\n  private handleMessageEvents(messageObj: PeerConnectionClientSignalMessage): void {\n    if (messageObj.type === PeerConnectionClientSignalMessageType.Bye) {\n      this.remoteHangUp.emit();\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.RequestMuteAudio) {\n      this.muteMyAudio.emit();\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.RequestMuteVideo) {\n      this.muteMyVideo.emit();\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.AudioMuted) {\n      this.userMuteAudio.emit();\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.AudioUnmuted) {\n      this.userUnmuteAudio.emit();\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.VideoMuted) {\n      this.userMuteVideo.emit();\n    }  else if (messageObj.type === PeerConnectionClientSignalMessageType.VideoUnmuted) {\n      this.userUnmuteVideo.emit();\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.StartShareScreen) {\n      this.useShareScreen$.next(true);\n    } else if (messageObj.type === PeerConnectionClientSignalMessageType.StopShareScreen) {\n      this.useShareScreen$.next(false);\n    }\n  }\n\n  /**\n   * execute this methode to set messages in the peer connection. You need a connection lay to receive messages.\n   * @param message message to process\n   */\n  public receiveSignalingMessage(message: string | PeerConnectionClientSignalMessage): void {\n    this.log('receiveSignalingMessage', message);\n    let messageObj: PeerConnectionClientSignalMessage;\n    if (typeof message === 'string') {\n      try {\n        messageObj = JSON.parse(message);\n      } catch (error) {\n        this.log('invalid json for message', message);\n        return;\n      }\n    } else {\n      messageObj = message;\n    }\n\n    if (this.connection?.iceGatheringState === 'complete' ||\n      ((this.isInitiator && messageObj.type === PeerConnectionClientSignalMessageType.Answer) ||\n        (!this.isInitiator && messageObj.type === PeerConnectionClientSignalMessageType.Offer))) {\n      this.hasRemoteSdp = true;\n      // Always process offer before candidates.\n      this.messageQueue.unshift(messageObj);\n    }\n\n    if (messageObj.type === PeerConnectionClientSignalMessageType.Candidate) {\n      this.messageQueue.push(messageObj);\n    }\n    this.handleMessageEvents(messageObj);\n    this.drainMessageQueue();\n  }\n\n\n  private processSignalingMessage(message: PeerConnectionClientSignalMessage): void {\n    this.log('processSignalingMessage', message);\n    if (!this.connection) {\n      return;\n    }\n    this.handleMessageEvents(message);\n    if (message.type === PeerConnectionClientSignalMessageType.Offer && (!this.isInitiator || this.connection.iceGatheringState === 'complete')) {\n      if (this.connection.signalingState !== 'stable') {\n        this.log('ERROR: remote offer received in unexpected state: ' + this.connection.signalingState);\n        return;\n      }\n      this.setRemoteSdp(message);\n      this.doAnswer();\n    } else if (message.type === PeerConnectionClientSignalMessageType.Answer && (this.isInitiator || this.connection.iceGatheringState === 'complete')) {\n      if (this.connection.signalingState !== 'have-local-offer') {\n        this.log('ERROR: remote answer received in unexpected state: ' +\n              this.connection.signalingState);\n        return;\n      }\n      this.setRemoteSdp(message);\n    } else if (message.type === PeerConnectionClientSignalMessageType.Candidate) {\n      const candidate = new RTCIceCandidate({\n        sdpMLineIndex: message.label,\n        candidate: message.candidate\n      });\n      this.onRecordIceCandidate('Remote', candidate);\n      this.connection.addIceCandidate(candidate)\n          .then(this.log.bind(this, 'Remote candidate added successfully.'))\n          .catch(this.onError.bind(this, 'addIceCandidate'));\n    } else {\n      this.log(`WARNING: unexpected message: ${message.type}`);\n    }\n  }\n\n  private doAnswer(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.log('Sending answer to peer.');\n    this.connection.createAnswer()\n        .then(this.setLocalSdpAndNotify.bind(this))\n        .catch(this.onError.bind(this, 'createAnswer'));\n  }\n\n\n  private setRemoteSdp(message: PeerConnectionClientSignalMessage): void {\n    if (!this.connection) {\n      return;\n    }\n    // this.log('setRemoteSdp', message);\n    if (message.sdp) {\n      message.sdp = SdpUtils.maybeSetOpusOptions(message.sdp, this.settings);\n      message.sdp = SdpUtils.maybePreferAudioSendCodec(message.sdp, this.settings);\n      message.sdp = SdpUtils.maybePreferVideoSendCodec(message.sdp, this.settings);\n      message.sdp = SdpUtils.maybeSetAudioSendBitRate(message.sdp, this.settings);\n      message.sdp = SdpUtils.maybeSetVideoSendBitRate(message.sdp, this.settings);\n      message.sdp = SdpUtils.maybeSetVideoSendInitialBitRate(message.sdp, this.settings);\n      message.sdp = SdpUtils.maybeRemoveVideoFec(message.sdp, this.settings);\n    }\n    this.connection.setRemoteDescription(new RTCSessionDescription(message as RTCSessionDescriptionInit))\n        .then(this.onSetRemoteDescriptionSuccess.bind(this))\n        .catch(this.onError.bind(this, 'setRemoteDescription'));\n  }\n\n  // When we receive messages from GAE registration and from the WSS connection,\n  // we add them to a queue and drain it if conditions are right.\n  private drainMessageQueue(): void {\n    // It's possible that we finish registering and receiving messages from WSS\n    // before our peer connection is created or started. We need to wait for the\n    // peer connection to be created and started before processing messages.\n    //\n    // Also, the order of messages is in general not the same as the POST order\n    // from the other client because the POSTs are async and the server may handle\n    // some requests faster than others. We need to process offer before\n    // candidates so we wait for the offer to arrive first if we're answering.\n    // Offers are added to the front of the queue.\n    if (!this.connection || !this.started || !this.hasRemoteSdp) {\n      return;\n    }\n    for (const message of this.messageQueue) {\n      this.processSignalingMessage(message);\n    }\n    this.messageQueue = [];\n  }\n\n\n  // Hooks\n\n  private onIceConnectionStateChange(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.log('ICE connection state changed to: ' + this.connection.iceConnectionState);\n\n    if (this.connection.iceConnectionState === 'completed') {\n      this.log('ICE complete time: ' +\n          (window.performance.now() - this.startTime).toFixed(0) + 'ms.');\n    }\n\n    this.iceConnectionState$.next(this.connection.iceConnectionState);\n  }\n\n  private onnegotiationneeded(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.log('onnegotiationneeded');\n    this.negotiationNeededTriggered.next(true);\n\n  }\n\n  private onSignalingStateChange(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.isNegotiating = (this.connection.signalingState !== 'stable');\n    this.log('Signaling state changed to: ' + this.connection.signalingState);\n    this.signalState$.next(this.connection.signalingState);\n  }\n\n  private onError(source: string, error?: Error): void {\n    this.log(`${source}:`, error);\n    this.error$.next({source, error});\n  }\n\n  private onRecordIceCandidate(location: string, candidateObj: RTCPeerConnectionIceEvent['candidate']): void {\n    if (candidateObj?.candidate) {\n      this.seeNewCandidate$.next({location, candidate: candidateObj.candidate});\n    } else {\n      this.log('see new candidate but candidate is null', {location, candidate: candidateObj});\n    }\n  }\n\n  private onRemoteTrackAdded(event: RTCTrackEvent): void {\n    this.remoteStreamAdded.emit({\n      track: event.track,\n      kind: event.track.kind as StreamType\n    });\n    this.remoteTrackAdded.emit({\n      track: event.track,\n      kind: event.track.kind as StreamType\n    });\n  }\n\n  private onSetRemoteDescriptionSuccess(): void {\n    if (!this.connection) {\n      return;\n    }\n    this.log('Set remote session description success.');\n    // By now all onaddstream events for the setRemoteDescription have fired,\n    // so we can know if the peer has any remote video streams that we need\n    // to wait for. Otherwise, transition immediately to the active state.\n    const remoteStreams = this.connection.getReceivers();\n    if (remoteStreams.length) {\n      for (const stream of remoteStreams) {\n        this.remotesDescriptionSet.next(stream.track);\n      }\n    }\n  }\n\n  private log(...args: any[]): void {\n    if (this.settings.debug) {\n      console.log(this.id, ...args);\n    }\n  }\n\n  private error(...args: any[]): void {\n    if (this.settings.debug) {\n      console.error(this.id, ...args);\n    }\n  }\n\n}\n","import { NgxWebrtcConfiguration } from './interfaces';\n\nexport class Configuration implements NgxWebrtcConfiguration {\n  userIdentifier = '';\n  debug = false;\n  savePreferredDeviceInStorage = true;\n}","import { InjectionToken } from '@angular/core';\n\nexport const NGX_WEBRTC_STORAGE = new InjectionToken<'localStorage' | 'sessionStorage'>('NGX_WEBRTC_STORAGE');","import { ComponentRef, EventEmitter, Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../interfaces/user';\nimport { RemotePeerComponentInterface } from '../interfaces/remote-peer-component-interface';\nimport { PeerConnectionClient } from '../peer-connection-client';\nimport { PeerConnectionClientSettings } from \"../interfaces/peer-connection-client-settings\";\nimport { UserInCall } from '../interfaces/user-in-call';\nimport { Configuration } from '../ngx-webrtc-configuration';\nimport { IceServer } from '../interfaces/ice-server';\nimport { NGX_WEBRTC_STORAGE } from '../ngx-webrtc-storage';\n\n/**\n * The CallService holds the state of the peer connection. It provides methods to update the state\n * and methods to create a `PeerConnectionClient`.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CallService {\n\n  constructor(\n    private readonly config: Configuration,\n    @Inject(NGX_WEBRTC_STORAGE) private readonly storage: 'localStorage' | 'sessionStorage',\n  ){}\n\n\n  private readonly storage_key_since = 'ngx-webrtc-since';\n  private since = 0;\n\n  // TODO: add option to configure this\n  private identifier: (keyof User) = this.config.userIdentifier as (keyof User);\n  \n  /**\n   * users in call state, add user via `CallService.addUser(User,...)` and remove user via `CallService.removeUser(User)`.\n   * get all User via `CallService.getUsers()`, get one user via `CallService.getUser()`.\n   */\n  public users$ = new BehaviorSubject<UserInCall[]>([]);\n\n\n\n  /**\n   * Emitted by `ShareScreenDirective` when current User starts sharing his screen. \n   */\n  public startShareScreen = new EventEmitter<void>();\n  \n  \n  /**\n   * Emitted by `ShareScreenDirective` when current User stops sharing his screen. \n   */\n  public stopShareScreen = new EventEmitter<void>();\n  \n  /**\n   * default public and free IceServers list\n   * ```json\n   * [\n   *  { urls: 'stun:stun.l.google.com:19302' },\n   *  { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },\n   *  { urls: 'stun:stun.services.mozilla.com' },\n   * ]\n   *\n   * ```\n   */\n  public defaultServers: IceServer[] = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },\n    { urls: 'stun:stun.services.mozilla.com' },\n  ];\n\n  /**\n   * chat status state\n   */\n  public started$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * update since timestamp with current time\n   */\n  public updateSince(): void {\n    this.since = Date.now();\n    // TODO: make storage customizable via provider\n    window[this.storage].setItem(this.storage_key_since, `${this.since}`);\n  }\n\n  /**\n   * get current since timestamp set by `CallService.updateSince()`\n   * @returns Timestamp\n   */\n  public getSince(): number {\n    const storageSince: string | null = window[this.storage].getItem(this.storage_key_since);\n    if (!this.since && storageSince && storageSince !== null) {\n      this.since = parseInt(storageSince, 10);\n    }\n    return this.since;\n  }\n\n  /**\n   * The `CallService` hold the users state with all users, with this methode you can add a user to the state.\n   * @param user User object that contains userIdentifier\n   * @param connection created connection for the user \n   * @param node component that is used to display the users webcam, etc.\n   */\n  public addUser(user: User, connection: PeerConnectionClient, node?: ComponentRef<RemotePeerComponentInterface>): void {\n    const users = this.getUsers();\n    users.push({\n      user,\n      hasCam: false,\n      hasMic: false,\n      volume: 1,\n      audioMuted: false,\n      videoMuted: false,\n      shareScreen: false,\n      connection,\n      node\n    });\n    this.users$.next(users);\n  }\n\n  /**\n   * remove a user object from state\n   * @param user User object to remove\n   */\n  public removeUser(user: User): void {\n    let users = this.getUsers();\n    users = users.filter(e => e.user[this.identifier] !== user[this.identifier]);\n    this.users$.next(users);\n  }\n\n  /**\n   * Use this method if the passed user has a camera to update the state.\n   * @param user User to update\n   */\n  public userHasCam(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.hasCam = true;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method if the passed user has a microphone to update the state.\n   * @param user \n   */\n  public userHasMic(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.hasMic = true;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method when the passed user deactivates his microphone to update the state.\n   * @param user \n   */\n  public userAudioMuted(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.audioMuted = true;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method when the passed user activates his microphone to update the state.\n   * @param user \n   */\n  public userAudioUnmuted(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.audioMuted = false;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method when the passed user deactivates his camera to update the state.\n   * @param user \n   */\n  public userVideoMuted(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.videoMuted = true;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method when the passed user activates his camera to update the state.\n   * @param user \n   */\n  public userVideoUnmuted(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.videoMuted = false;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method when the passed user starts to share his screen to update the state.\n   * @param user \n   */\n  public userStartShareScreen(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.shareScreen = true;\n      this.users$.next(users);\n    }\n  }\n\n  /**\n   * Use this method when the passed user stops sharing his screen to update the state.\n   * @param user \n   */\n  public userStopShareScreen(user: User): void {\n    const users = this.getUsers();\n    const currentUser = this.findUser(users, user);\n    if (currentUser) {\n      currentUser.shareScreen = false;\n      this.users$.next(users);\n    }\n    this.users$.next(users);\n  }\n\n  /**\n   * Give all users who are currently in the state.\n   * @returns All users currently in state\n   */\n  public getUsers(): UserInCall[] {\n    return this.users$.getValue();\n  }\n\n  /**\n   *\n   * @param user User with `userIdentifier`\n   * @returns User in state\n   */\n  public getUser(user: User): UserInCall | null {\n    return this.getUsers().find(e => e.user[this.identifier] === user[this.identifier]) || null;\n  }\n\n  /**\n   * Create a new `PeerConnectionClient` with the given settings\n   * @param settings Settings for creating the `PeerConnectionClient`\n   * @returns `PeerConnectionClient` object\n   */\n  public async createPeerClient(settings: PeerConnectionClientSettings): Promise<PeerConnectionClient> {\n    return new PeerConnectionClient(settings);\n  }\n\n  /**\n   * With this methode you can create a RTCCertificate to secure a connection. \n   * @link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/generateCertificate\n   * @param algorithm Certificate options used by `RTCPeerConnection.generateCertificate()` Default algorithm `ECDSA` with curve `P-256`\n   * @returns Promise resolve to `RTCCertificate`\n   */\n  public async createCertifcate(algorithm: unknown = {\n    name: 'ECDSA',\n    namedCurve: 'P-256'\n  }): Promise<RTCCertificate> {\n    return RTCPeerConnection.generateCertificate(algorithm as AlgorithmIdentifier);\n  }\n\n  /**\n   * set call state started to `true`, you can subscribe to `CallService.started$` for updates.\n   */\n  public start(): void {\n    this.started$.next(true);\n  }\n\n  /**\n   * set call state started to `false`, you can subscribe to `CallService.started$` for updates.\n   */\n  public stop(): void {\n    this.started$.next(false);\n  }\n\n  /**\n   * Configured user identifier.\n   * @returns identifier to select a User\n   */\n  public getUserIdentifier(): (keyof User) {\n    return this.identifier;\n  }\n\n  private findUser(users: UserInCall[], user: User): UserInCall | null {\n    return users.find(e => e.user[this.identifier] === user[this.identifier]) || null;\n  }\n\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NGX_WEBRTC_STORAGE_PREFIX = new InjectionToken<string>('NGX_WEBRTC_STORAGE_PREFIX');","import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { Configuration } from '../ngx-webrtc-configuration';\nimport { NGX_WEBRTC_STORAGE } from '../ngx-webrtc-storage';\nimport { NGX_WEBRTC_STORAGE_PREFIX } from '../ngx-webrtc-storage-prefix';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PreferencesService implements OnDestroy {\n\n  public preferredAudioInputDevice$ = new BehaviorSubject<string | null>(null);\n  public preferredAudioOutputDevice$ = new BehaviorSubject<string | null>(null);\n  public preferredVideoInputDevice$ = new BehaviorSubject<string | null>(null);\n  public preferredAudioInputDeviceVolume$ = new BehaviorSubject<number | null>(null);\n  private readonly VIDEO_INPUT_KEY: string = this.storageKey('preferred-video-input-device');\n  private readonly AUDIO_INPUT_KEY: string = this.storageKey('preferred-audio-input-device');\n  private readonly AUDIO_INPUT_VOLUME_KEY: string = this.storageKey('preferred-audio-input-device');\n  private readonly AUDIO_OUTPUT_KEY: string = this.storageKey('preferred-audio-input-device');\n\n  private subs: Subscription[] = [];\n\n  constructor(\n    private readonly config: Configuration,\n    @Inject(NGX_WEBRTC_STORAGE_PREFIX) private readonly prefix: string,\n    @Inject(NGX_WEBRTC_STORAGE) private readonly storage: 'localStorage' | 'sessionStorage',\n  ) {\n    this.initPreferredDevicesFromStorag();\n  }\n\n  ngOnDestroy(): void {\n    this.subs.forEach(sub => {\n      sub.unsubscribe();\n    })\n  }\n\n  private storageKey(key: string): string {\n    return [this.prefix, key].join('-');\n  }\n\n  private initSubscription<T>(subject: BehaviorSubject<T | null>, key: string): void {\n    this.subs.push(subject.subscribe(newValue => {\n      if (typeof newValue === 'string' || typeof newValue === 'number') {\n        window[this.storage].setItem(key, `${newValue}`);\n      } else {\n        window[this.storage].removeItem(key);\n      }\n    }))\n  }\n\n  private setInitalValuesFromStorage() {\n    this.preferredVideoInputDevice$.next(window[this.storage].getItem(this.VIDEO_INPUT_KEY));\n    this.preferredAudioInputDevice$.next(window[this.storage].getItem(this.AUDIO_INPUT_KEY));\n    const inputDeviceVolumeStorage = window[this.storage].getItem(this.AUDIO_INPUT_VOLUME_KEY);\n    if (inputDeviceVolumeStorage) {\n      const inputDeviceVolume = parseInt(inputDeviceVolumeStorage, 10);\n      this.preferredAudioInputDeviceVolume$.next(inputDeviceVolume);\n    }\n    this.preferredAudioOutputDevice$.next(window[this.storage].getItem(this.AUDIO_OUTPUT_KEY));\n  }\n\n  private initPreferredDevicesFromStorag(): void {\n    if(this.config.savePreferredDeviceInStorage) {\n      this.setInitalValuesFromStorage();\n      this.initSubscription<string>(this.preferredVideoInputDevice$, this.VIDEO_INPUT_KEY);\n      this.initSubscription<string>(this.preferredAudioInputDevice$, this.AUDIO_INPUT_KEY);\n      this.initSubscription<string>(this.preferredAudioOutputDevice$, this.AUDIO_OUTPUT_KEY);\n      this.initSubscription<number>(this.preferredAudioInputDeviceVolume$, this.AUDIO_INPUT_VOLUME_KEY);\n    }\n  }\n\n  getAudioConstraintWithPreferences(): boolean | { deviceId?: string, volume?: number } {\n    const preferredAudioInputDevice = this.preferredAudioInputDevice$.getValue();\n    const preferredAudioInputDeviceVolume = this.preferredAudioInputDeviceVolume$.getValue();\n    let audioConstraint: boolean | { deviceId?: string, volume?: number }  = true;\n    if (preferredAudioInputDevice || preferredAudioInputDeviceVolume !== null) {\n      if (preferredAudioInputDevice && preferredAudioInputDeviceVolume !== null) {\n        audioConstraint = {\n          deviceId: preferredAudioInputDevice,\n          volume: preferredAudioInputDeviceVolume\n        }\n      } else if (preferredAudioInputDevice) {\n        audioConstraint = {\n          deviceId: preferredAudioInputDevice\n        }\n      } else if (preferredAudioInputDeviceVolume) {\n        audioConstraint = {\n          volume: preferredAudioInputDeviceVolume\n        }\n      }\n    }\n    return audioConstraint;\n  }\n\n  getVideoConstraintWithPreferences(): boolean | { deviceId?: string }  {\n    const preferredVideoInputDevice = this.preferredVideoInputDevice$.getValue();\n    return preferredVideoInputDevice ? { deviceId: preferredVideoInputDevice } : true\n  }\n\n  setPreferredAudioInputDevice(deviceId: string): void {\n    this.preferredAudioInputDevice$.next(deviceId);\n  }\n  setPreferredAudioOutputDevice(deviceId: string): void {\n    this.preferredAudioOutputDevice$.next(deviceId);\n  }\n  setPreferredVideoInputDevice(deviceId: string): void {\n    this.preferredVideoInputDevice$.next(deviceId);\n  }\n  setPreferredAudioInputDeviceVolume(volume: number): void {\n    this.preferredAudioInputDeviceVolume$.next(volume);\n  }\n\n  resetPreferences(): void {\n    this.preferredAudioInputDevice$.next(null);\n    this.preferredAudioOutputDevice$.next(null);\n    this.preferredVideoInputDevice$.next(null);\n    this.preferredAudioInputDeviceVolume$.next(null);\n  }\n  \n}","import { ElementRef, EventEmitter, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { StreamType } from \"../enums/stream-type\";\nimport { Configuration } from '../ngx-webrtc-configuration';\nimport { PreferencesService } from './preferences.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StreamService {\n\n  /**\n   * You can subscribe to localSteam changes\n   */\n  public localStream$ = new BehaviorSubject<MediaStream | null>(null);\n  /**\n   * You can subscribe to screen share changes\n   */\n  public localShareScreenStream$ = new BehaviorSubject<MediaStream | null>(null);\n\n  /**\n   * Emitted with new Track when `StreamService.replaceTrack` is called \n   */\n  public replaceTrack$ = new BehaviorSubject<MediaStreamTrack | null>(null);\n\n  /**\n   * Emitted when `StreamService.setAudioOutput` is called with new device (Call it when the switch the audio device).\n   */\n  public audioOutput$ = new BehaviorSubject<string | null>(null);\n\n  /**\n   * Emitted when the status of the local stream changed e.g. audio or video disabled or enabled.\n   */\n  public localStreamStatusChanged = new EventEmitter<MediaStream | MediaStreamTrack>();\n\n  /**\n   * Emitted when the status of the local audio stream changed e.g. audio disabled or enabled.\n   */\n  public localAudioStreamStatusChanged = new EventEmitter<boolean>();\n\n  /**\n   * Emitted when the status of the local video stream changed e.g. video disabled or enabled.\n   */\n  public localVideoStreamStatusChanged = new EventEmitter<boolean>();\n\n  /**\n   * Set to `true` when the StreamService.tryGetUserMedia is succefull for video (camera).\n   * @deprecated\n   */\n  public hasVideo = false;\n\n  /**\n   * Set to `true` when the StreamService.tryGetUserMedia is succefull for audio (microphone).\n   * @deprecated\n   */\n  public hasAudio = false;\n\n  constructor(\n    private readonly config: Configuration,\n    private preferencesService: PreferencesService,\n  ){}\n\n\n  /**\n   * Get aspect ratio for given width and height.\n   * @param width width in pixel\n   * @param height height in pixel\n   * @returns aspect ratio for the given width and height\n   */\n  public static getAspectRatio(width: number, height: number): string {\n\n    function gcd(a: number, b: number): number {\n      return b ? gcd(b, a % b) : a;\n    }\n\n    const divisor: number = gcd(width, height);\n    return `${width / divisor}x${height / divisor}`;\n  }\n\n  /**\n   * \n   * @param node `HTMLVideoElement` or `HTMLAudioElement` that should play the stream.\n   * @param stream stream to set in node \n   * @param muted mute audio\n   * @param local if set to `true` `localStreamStatusChanged` is emitted on play\n   */\n  public setStreamInNode(node: HTMLVideoElement | HTMLAudioElement, stream: MediaStream | MediaStreamTrack, muted = true, local = false): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    if (node) {\n\n      // play when ready\n      node.addEventListener('canplay', function onCanPlay(event) {\n        // it doesn't matter if we use audio or video element here\n        const eventTargetNode: HTMLVideoElement = event.target as HTMLVideoElement;\n        if (eventTargetNode) {\n          eventTargetNode.removeEventListener('canplay', onCanPlay);\n          eventTargetNode.play();\n        }\n        if (local) {\n          self.localStreamStatusChanged.emit(stream);\n        }\n      });\n\n      let tmpStream;\n      if (stream instanceof MediaStreamTrack) {\n        tmpStream = new MediaStream();\n        tmpStream.addTrack(stream);\n      } else {\n        tmpStream = stream;\n      }\n      node.srcObject = tmpStream;\n      node.muted = muted;\n    }\n  }\n\n  /**\n   * stop stream playing in node\n   * @param node node with nativeElement type `HTMLVideoElement` or  `HTMLAudioElement`\n   */\n  public stopStreamInNode(node: ElementRef): void {\n    node?.nativeElement?.pause();\n    node?.nativeElement?.srcObject?.getTracks().forEach((t: MediaStreamTrack) => t.stop());\n    if (node?.nativeElement?.srcObject) {\n      node.nativeElement.srcObject = new MediaStream();\n    }\n  }\n\n  public toggleLocalTrack(type: StreamType): Promise<MediaStream> {\n    if (this.config.debug) {\n      console.log('toggleLocalTrack()', type);\n    }\n    const stream = this.getLocalStream();\n    if (stream) {\n      const tracks = type === StreamType.Audio ? stream.getAudioTracks() : stream.getVideoTracks();\n      if (tracks.length) {\n        return this.disableLocalTrack(type);\n      } else {\n        return this.enableLocalTrack(type);\n      }\n    } else {\n      return Promise.reject(new Error('no stream'))\n    }\n\n  }\n\n  public enableLocalTrack(type: StreamType): Promise<MediaStream> {\n    if (this.config.debug) {\n      console.log('enableLocalTrack()', type);\n    }\n    return new Promise<MediaStream>((resolve, rejects) => {\n      const stream = this.getLocalStream();\n      if (stream) {\n        if (type === StreamType.Video) {\n          navigator.mediaDevices.getUserMedia({\n            video: this.preferencesService.getVideoConstraintWithPreferences(),\n          }).then(stream => {\n            const localStream = this.localStream$.getValue() || new MediaStream();\n            stream.getVideoTracks().forEach(track => {\n              localStream.addTrack(track);\n              this.localVideoStreamStatusChanged.emit(true);\n              this.replaceTrack(track);\n            });\n            this.localStream$.next(localStream);\n            this.localStreamStatusChanged.emit(localStream);\n            resolve(localStream);\n          }, (error) => {\n            rejects(error);\n          });\n        }\n        if (type === StreamType.Audio) {\n          navigator.mediaDevices.getUserMedia({\n            audio: this.preferencesService.getAudioConstraintWithPreferences(),\n          }).then(stream => {\n            const localStream = this.localStream$.getValue() || new MediaStream();\n            stream.getAudioTracks().forEach(track => {\n              localStream.addTrack(track);\n              this.localAudioStreamStatusChanged.emit(true);\n              this.replaceTrack(track);\n            });\n            this.localStream$.next(localStream);\n            this.localStreamStatusChanged.emit(localStream);\n            resolve(localStream);\n          }, (error) => {\n            rejects(error);\n          });\n        }\n      } else {\n        rejects(new Error('no stream'));\n      }\n    });\n  }\n\n  public disableLocalTrack(type: StreamType): Promise<MediaStream> {\n    if (this.config.debug) {\n      console.log('disableLocalTrack()', type);\n    }\n    return new Promise((resolve, rejects) => {\n      const stream = this.getLocalStream();\n      if (stream) {\n        const tracks = type === StreamType.Audio ? stream.getAudioTracks() : stream.getVideoTracks();\n        tracks.forEach(track => {\n          track.enabled = false;\n          track.stop();\n          stream.removeTrack(track)\n        });\n        if (type === StreamType.Video) {\n          this.localVideoStreamStatusChanged.emit(false);\n        } else {\n          this.localAudioStreamStatusChanged.emit(false);\n        }\n        this.localStreamStatusChanged.emit(stream);\n        this.localStream$.next(stream);\n        return resolve(stream);\n      } else {\n        rejects(new Error('no stream'));\n      }\n    });\n  }\n\n  /**\n   * set stream or track mute state or toggle mute\n   * @param stream stream or track\n   * @param type stream or track type\n   * @param value enforce `true` or `false`\n   */\n  public toggleMuteStream(stream: MediaStream | MediaStreamTrack, type: StreamType, value?: boolean): void {\n    if (this.config.debug) {\n      console.log('toggleMuteStream()', stream, type, value);\n    }\n    if (stream) {\n      if (stream instanceof MediaStreamTrack) {\n        const targetValue = typeof value !== 'undefined' ? value : !stream.enabled;\n        stream.enabled = targetValue;\n      } else {\n        if (type === StreamType.Audio) {\n          stream.getAudioTracks().forEach(track => {\n            const targetValue = typeof value !== 'undefined' ? value : !track.enabled;\n            track.enabled = targetValue;\n            this.localAudioStreamStatusChanged.emit(targetValue);\n          });\n        }\n        if (type === StreamType.Video) {\n          stream.getVideoTracks().forEach(track => {\n            const targetValue = typeof value !== 'undefined' ? value : !track.enabled;\n            track.enabled = targetValue;\n            this.localVideoStreamStatusChanged.emit(targetValue);\n          });\n        }\n      }\n    }\n    this.localStreamStatusChanged.emit(stream);\n  }\n\n  /**\n   * Mute stream in node.\n   * @param stream stram or track\n   * @param type stream or track type\n   */\n  public muteStream(stream: MediaStream | MediaStreamTrack, type: StreamType): void {\n    this.toggleMuteStream(stream, type, false);\n  }\n\n  /**\n   * Unmute stream in node.\n   * @param stream stram or track\n   * @param type stream or track type\n   */\n  public unmuteStream(stream: MediaStream | MediaStreamTrack, type: StreamType): void {\n    this.toggleMuteStream(stream, type, true);\n  }\n\n  /**\n   * replace a track in stream\n   * @param stream stream with thre track to replace\n   * @param track new track\n   */\n  public replaceTrackInStream(stream: MediaStream, track: MediaStreamTrack): void {\n    if (track.kind === StreamType.Video) {\n      stream?.getVideoTracks().forEach(e => {\n        e.stop();\n        stream.removeTrack(e)\n      });\n    }\n    if (track.kind === StreamType.Audio) {\n      stream?.getAudioTracks().forEach((e) => {\n        e.stop();\n        stream.removeTrack(e)\n      });\n    }\n    stream?.addTrack(track);\n  }\n\n  /**\n   * set local stream in service state\n   * @param stream stream to set\n   */\n  public setLocalStream(stream: MediaStream | null): void {\n    this.localStream$.next(stream);\n  }\n\n  /**\n   * get current state value of local stream\n   * @returns current local stream\n   */\n  public getLocalStream(): MediaStream | null {\n    return this.localStream$.getValue();\n  }\n\n  /**\n   * set replace track service state. You can subscribe to `StreamService.replaceTrack$` to update the track somewhere.\n   * @param track new track\n   */\n  public replaceTrack(track: MediaStreamTrack): void {\n    this.replaceTrack$.next(track);\n  }\n\n  /**\n   * toggle mute audio of local stream\n   */\n  public toggleMuteLocalAudioStream(): void {\n    const stream = this.localStream$.getValue();\n    if (stream) {\n      this.toggleMuteStream(stream, StreamType.Audio);\n    }\n  }\n\n  /**\n   * mute local audio stream\n   */\n  public muteLocalAudioStream(): void {\n    const stream = this.localStream$.getValue();\n    if (stream) {\n      this.toggleMuteStream(stream, StreamType.Audio, false);\n    }\n  }\n\n  /**\n   * unmute local audio stream\n   */\n  public unmuteLocalAudioStream(): void {\n    const stream = this.localStream$.getValue();\n    if (stream) {\n      this.toggleMuteStream(stream, StreamType.Audio, true);\n    }\n  }\n\n  /**\n   * toggle mute local video stream\n   */\n  public toggleMuteLocalVideoStream(): void {\n    const stream = this.localStream$.getValue();\n    if (stream) {\n      this.toggleMuteStream(stream, StreamType.Video);\n    }\n  }\n\n  /**\n   * mute local video stream\n   */\n  public muteLocalVideoStream(): void {\n    const stream = this.localStream$.getValue();\n    if (stream) {\n      this.toggleMuteStream(stream, StreamType.Video, false);\n    }\n  }\n\n  /**\n   * unmute local video stream\n   */\n  public unmuteLocalVideoStream(): void {\n    const value = this.localStream$.getValue();\n    if (value) {\n      this.toggleMuteStream(value, StreamType.Video, true);\n    }\n  }\n\n  /**\n   * get screen or window as stream\n   * @returns MediaStram of desktop or display\n   */\n  public async getScreenCapture(): Promise<MediaStream | null> {\n    let stream: MediaStream | null = null;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const n: any = navigator;\n      if (n.getDisplayMedia) {\n        stream = await n.getDisplayMedia({ video: true });\n      } else if (n.mediaDevices.getDisplayMedia) {\n        stream = await n.mediaDevices.getDisplayMedia({ video: true });\n      } else {\n        stream = await n.mediaDevices.getUserMedia({ video: { mediaSource: 'screen' } });\n      }\n    } catch (e) {\n      if (this.config.debug) {\n        console.log(`MdoVideoCallComponent.getScreenCapture() -> no permissions`);\n      }\n    }\n    return stream;\n  }\n\n  /**\n   * get first/single video track of the given stream\n   * @param stream stream with video treack\n   * @returns first video track of stream\n   */\n  public getVideoTrackForStream(stream?: MediaStream): MediaStreamTrack | null {\n    if (!stream && this.getLocalStream()) {\n      stream = this.getLocalStream() as MediaStream;\n    }\n    return stream?.getVideoTracks()[0] || null;\n  }\n\n  /**\n   * get first/single audio track of the given stream\n   * @param stream stream with audio treack\n   * @returns first audio track of stream\n   */\n  public getAudioTrackForStream(stream?: MediaStream): MediaStreamTrack | null {\n    if (!stream && this.getLocalStream()) {\n      stream = this.getLocalStream() as MediaStream;\n    }\n    return stream?.getAudioTracks()[0] || null;\n  }\n\n  /**\n   * get media devices, Attention you need getMedia permissions for this call\n   * @returns Promise that resolves to media Devices as array\n   * @deprecated use DeviceService.getMediaDevices() instead\n   */\n  public getMediaDevices(): Promise<MediaDeviceInfo[]> {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  /**\n   * set current audio device in service state. You can subscribe to `StreamService.audioOutput$` to get changes.\n   * @param deviceId \n   */\n  public setAudioOutput(deviceId: string): void {\n    this.audioOutput$.next(deviceId);\n  }\n\n  // TODO: refactor\n  /**\n   * An simple wrapper for `navigator.mediaDevices.getUserMedia`, with basis error handling.\n   * @todo refactor\n   * @param mediaConstraints a MediaStreamConstraints e.g. with specific deviceId, resolution or just audio. Default is:\n   *                          ```json\n   *                         {\n   *                             audio: true,\n   *                             video: true\n   *                         }\n   *                         ```\n   * @returns Promise that resilve to a stream matching the constraint\n   * @deprecated use DeviceService.tryGetUserMedia() instead\n   */\n  public tryGetUserMedia(mediaConstraints?: MediaStreamConstraints): Promise<MediaStream> {\n    // reset state\n    this.hasAudio = false;\n    this.hasVideo = false;\n\n    if (!mediaConstraints) {\n      mediaConstraints = {\n        audio: true,\n        video: true\n      }\n    };\n\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(a => {\n        this.hasAudio = true;\n        this.hasVideo = true;\n        resolve(a);\n      }, b => {\n        let cam = true, mic = true;\n        if (b.message.indexOf('Starting videoinput failed') > -1) {\n          if(this.config.debug) {\n            console.log('videoinput used by another software');\n          }\n          cam = false;\n        }\n        navigator.mediaDevices.enumerateDevices().then((devices) => {\n          cam = cam && devices.find((device) => {\n            return device.kind === 'videoinput';\n          }) !== null;\n          mic = devices.find((device) => {\n            return device.kind === 'audioinput';\n          }) !== null;\n          const constraints = {\n            video: cam && mediaConstraints?.video,\n            audio: mic && mediaConstraints?.audio\n          };\n          navigator.mediaDevices.getUserMedia(constraints).then(a => {\n            this.hasAudio = true;\n            resolve(a);\n          }, reject);\n        }, (f) => {\n          reject(f);\n        });\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n}\n","import { ChangeDetectorRef, Directive, EventEmitter, HostBinding, HostListener, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { StreamType } from \"../enums/stream-type\";\nimport { CallService } from '../services/call.service';\nimport { StreamService } from '../services/stream.service';\n\n/**\n * Toggle disabled/enable video track to mute/unmute local video.\n */\n@Directive({\n  selector: '[ngxWebrtcToggleVideoSelf]',\n})\nexport class ToggleVideoSelfDirective implements OnDestroy {\n\n  private callStartedSubscription$: Subscription | null = null;\n  private localStreamStatusChangedSubscription$: Subscription | null = null;\n  @Output() toggleMuteFailed: EventEmitter<Error> = new EventEmitter();\n  @HostBinding('class.disabled') public isDisabled = true;\n  @HostBinding('class.enabled') public isEnabled = false;\n  @HostListener('click', ['$event']) onClick(): void{\n    this.toggleMute();\n  }\n\n  constructor(\n    private streamService: StreamService,\n    private callService: CallService,\n    private cdr: ChangeDetectorRef\n  ) {\n    this.init();\n  }\n\n  ngOnDestroy(): void {\n    this.callStartedSubscription$?.unsubscribe();\n    this.localStreamStatusChangedSubscription$?.unsubscribe();\n  }\n\n  init(): void {\n    this.callStartedSubscription$ = this.callService.started$.subscribe(this.onStart.bind(this));\n  }\n\n  onStart(isStarted: boolean): void {\n    if (isStarted) {\n      this.localStreamStatusChangedSubscription$ = this.streamService.localStreamStatusChanged.subscribe(\n        this.onLocalStreamStatusChanged.bind(this));\n    }\n  }\n\n  onLocalStreamStatusChanged(stream: MediaStream | MediaStreamTrack): void {\n    if (stream){\n      if (stream instanceof MediaStreamTrack && stream.kind === StreamType.Video) {\n        this.updateStatusWithTrack(stream);\n      }\n      if (stream instanceof MediaStream) {\n        const track = this.streamService.getVideoTrackForStream(stream);\n        this.updateStatusWithTrack(track);\n      }\n    }\n  }\n\n  toggleMute(): void {\n    this.streamService.toggleLocalTrack(StreamType.Video).catch(error => {\n      this.toggleMuteFailed.emit(error);\n    });\n  }\n\n  private updateStatusWithTrack(track: MediaStreamTrack | null): void {\n    this.isEnabled = track && track.enabled ? true : false;\n    this.isDisabled = !track || !track.enabled;\n    this.cdr.detectChanges();\n  }\n}\n","import { ChangeDetectorRef, Directive, HostBinding, HostListener } from '@angular/core';\nimport { fromEvent, merge } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { CallService } from '../services/call.service';\nimport { StreamService } from '../services/stream.service';\n\n/**\n * Trigger get capture screen permissions and send screen to CallService. \n * You can listen to the change and call replaceTrack of peer connection to send the screen capture to that connection\n */\n@Directive({\n  selector: '[ngxWebrtcShareScreen]',\n})\nexport class ShareScreenDirective {\n\n  private desktopStream: MediaStream | null = null;\n  @HostBinding('class.disabled') public isDisabled = true;\n  @HostBinding('class.enabled') public isEnabled = false;\n  @HostListener('click', ['$event']) async onClick(): Promise<void>{\n    if (!this.isEnabled) {\n      await this.startShareScreen();\n    } else {\n      this.stopShareScreen();\n    }\n  }\n\n  constructor(\n    private streamService: StreamService,\n    private callService: CallService,\n    private cdr: ChangeDetectorRef\n  ) { }\n\n  private async startShareScreen(): Promise<void> {\n    this.desktopStream = await this.streamService.getScreenCapture();\n\n    if (this.desktopStream) {\n      this.streamService.localShareScreenStream$.next(this.desktopStream);\n      const desktopVideoTrack = this.streamService.getVideoTrackForStream(this.desktopStream);\n      if (desktopVideoTrack) {\n        this.streamService.replaceTrack(desktopVideoTrack);\n      } else {\n        console.warn('no videotrack in desktop stream');\n      }\n      const streamInactive$ = fromEvent(this.desktopStream, 'inactive').pipe(take(1));\n      const sharingStopped$ = fromEvent(this.desktopStream.getVideoTracks()[0], 'ended').pipe(take(1));\n\n      merge(streamInactive$, sharingStopped$)\n        .pipe(\n          take(1)\n        )\n        .subscribe(() => {\n          if (this.isEnabled) {\n            this.stopShareScreen();\n          }\n        });\n\n      this.isEnabled = !this.isEnabled;\n      this.isDisabled = !this.isDisabled;\n      this.callService.startShareScreen.emit();\n      this.cdr.detectChanges();\n    }\n  }\n\n  private stopShareScreen(): void {\n    this.streamService.localShareScreenStream$.next(null);\n    const videoTrack = this.streamService.getVideoTrackForStream();\n    if (videoTrack) {\n      this.streamService.replaceTrack(videoTrack);\n    } else {\n      console.warn('video track not found');\n    }\n    if (this.desktopStream) {\n      this.desktopStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n    this.callService.stopShareScreen.emit();\n    this.isEnabled = !this.isEnabled;\n    this.isDisabled = !this.isDisabled;\n    this.cdr.detectChanges();\n  }\n\n}\n","import { ChangeDetectorRef, Directive, EventEmitter, HostBinding, HostListener, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { StreamType } from \"../enums/stream-type\";\nimport { CallService } from '../services/call.service';\nimport { StreamService } from '../services/stream.service';\n\n/**\n * Toggle disabled/enable audio track to mute/unmute local audio.\n */\n@Directive({\n  selector: '[ngxWebrtcToggleAudioSelf]',\n})\nexport class ToggleAudioSelfDirective implements OnDestroy {\n\n  private callStartedSubscription$: Subscription | null = null;\n  private localStreamStatusChangedSubscription$: Subscription | null = null;\n  @Output() toggleMuteFailed: EventEmitter<Error> = new EventEmitter();\n  @HostBinding('class.disabled') public isDisabled = true;\n  @HostBinding('class.enabled') public isEnabled = false;\n  @HostListener('click', ['$event']) onClick(): void{\n    this.toggleMute();\n  }\n\n  constructor(\n    private streamService: StreamService,\n    private callService: CallService,\n    private cdr: ChangeDetectorRef\n  ) {\n    this.init();\n  }\n\n  ngOnDestroy(): void {\n    this.callStartedSubscription$?.unsubscribe();\n    this.localStreamStatusChangedSubscription$?.unsubscribe();\n  }\n\n  init(): void {\n    this.callStartedSubscription$ = this.callService.started$.subscribe(this.onStart.bind(this));\n  }\n\n  onStart(isStarted: boolean): void {\n    if (isStarted) {\n      this.localStreamStatusChangedSubscription$ = this.streamService.localStreamStatusChanged.subscribe(\n        this.onLocalStreamStatusChanged.bind(this));\n    }\n  }\n\n  onLocalStreamStatusChanged(stream: MediaStream | MediaStreamTrack): void {\n    if (stream){\n      if (stream instanceof MediaStreamTrack && stream.kind === StreamType.Audio) {\n        this.updateStatusWithTrack(stream);\n      }\n      if (stream instanceof MediaStream) {\n        const track = this.streamService.getAudioTrackForStream(stream);\n        this.updateStatusWithTrack(track);\n      }\n    }\n  }\n\n  toggleMute(): void {\n    this.streamService.toggleLocalTrack(StreamType.Audio).catch(error => {\n      this.toggleMuteFailed.emit(error);\n    });\n  }\n\n  private updateStatusWithTrack(track: MediaStreamTrack | null): void {\n    this.isEnabled = track && track.enabled ? true : false;\n    this.isDisabled = !track || !track.enabled;\n    this.cdr.detectChanges();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ShareScreenDirective, ToggleAudioSelfDirective, ToggleAudioUserDirective, ToggleVideoSelfDirective, ToggleVideoUserDirective } from './directives';\nimport { NgxWebrtcConfiguration } from './interfaces';\nimport { Configuration } from './ngx-webrtc-configuration';\nimport { NGX_WEBRTC_STORAGE } from './ngx-webrtc-storage';\nimport { NGX_WEBRTC_STORAGE_PREFIX } from './ngx-webrtc-storage-prefix';\n\n@NgModule({\n  declarations: [\n    ToggleAudioSelfDirective,\n    ToggleVideoSelfDirective,\n    ToggleAudioUserDirective,\n    ToggleVideoUserDirective,\n    ShareScreenDirective,\n  ],\n  exports: [\n    ToggleAudioSelfDirective,\n    ToggleVideoSelfDirective,\n    ToggleAudioUserDirective,\n    ToggleVideoUserDirective,\n    ShareScreenDirective,\n  ],\n  imports: [CommonModule],\n  providers: [\n    { provide: NGX_WEBRTC_STORAGE_PREFIX, useValue: 'ngx-webrtc' },\n    { provide: NGX_WEBRTC_STORAGE, useValue: 'sessionStorage' },\n  ]\n})\nexport class NgxWebrtcModule {\n  static forRoot(\n    libConfiguration: NgxWebrtcConfiguration\n  ): ModuleWithProviders<NgxWebrtcModule> {\n    return {\n      ngModule: NgxWebrtcModule,\n      providers: [\n        {\n          provide: Configuration,\n          useValue: libConfiguration,\n        },\n      ],\n    };\n  }\n}\n","// like MediaDeviceKind\nexport enum DeviceType {\n  AudioInput = 'audioinput',\n  AudioOutput = 'audiooutput',\n  VideoInput = 'videoinput'\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { DeviceType } from '../enums';\nimport { DevicesGroup } from '../interfaces';\nimport { Configuration } from '../ngx-webrtc-configuration';\nimport { PreferencesService } from './preferences.service';\nimport { StreamService } from './stream.service';\n\n/**\n * The DeviceService help you with device interaction (audio and video devices) and can hold a state for devices if you want to implement\n * a lobby with device testing.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService implements OnDestroy {\n\n  private storage: 'localStorage' | 'sessionStorage' = 'sessionStorage';\n  public selectedAudioInput$ = new BehaviorSubject<MediaDeviceInfo | null>(null);\n  public selectedVideoInput$ = new BehaviorSubject<MediaDeviceInfo | null>(null);\n  public devices$ = new BehaviorSubject<MediaDeviceInfo[]>([]);\n  public devicesGoups$ = new BehaviorSubject<DevicesGroup[]>([]);\n\n  constructor(\n    private readonly config: Configuration,\n    private streamService: StreamService,\n    private preferencesService: PreferencesService\n  ){\n      // not possible with HostListener\n      navigator.mediaDevices.addEventListener('devicechange', this.onDeviceChangeListener);\n  }\n\n  ngOnDestroy(): void {\n    navigator.mediaDevices.removeEventListener('devicechange', this.onDeviceChangeListener);\n  }\n\n  private onDeviceChangeListener: EventListener = () => {\n    this.detectSelectedDevices().then(devices => {\n      if (this.config.debug) {\n        console.log('devices after devicechange event');\n        console.log(devices);\n      }\n    }) \n  }\n\n  detectSelectedDevices(): Promise<MediaDeviceInfo[]> {\n    return new Promise((resolve, reject) => {\n      this.getMediaDevices().then(devices => {\n        this.devices$.next(devices);\n        this.devicesGoups$.next(this.groupDeviceByKind(devices, []));\n        resolve(devices);\n      }, reject);\n    });\n  }\n\n\n  getMediaDevicesGrouped(omit: DeviceType[] = []) {\n    const devicesGoups = this.devicesGoups$.getValue();\n    if (omit.length) {\n      return devicesGoups.filter(e => !omit.includes(e.kind));\n    }\n    return devicesGoups;\n  }\n\n  /**\n   * get media devices, Attention you need getMedia permissions for this call\n   * @returns Promise that resolves to media Devices as array \n   */\n  public getMediaDevices(): Promise<MediaDeviceInfo[]> {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n  \n\n  /**\n   * Change selected device wit a deviceId and a device type.\n   * @param deviceId id of selected device\n   * @param kind type of selected device `VideDevice` or `AudioDevice`\n   */\n  changeSelectedDevice(deviceId: string, kind: DeviceType): Promise<void> {\n    return new Promise<void>((resolve, rejects) => {\n      const devices = this.devices$.getValue();\n      if (kind === DeviceType.VideoInput) {\n        if (this.selectedVideoInput$.getValue()?.deviceId === deviceId) {\n          resolve();\n        }\n        navigator.mediaDevices.getUserMedia({ video: {\n          deviceId\n        }}).then((newStream) => {\n          this.preferencesService.setPreferredVideoInputDevice(deviceId);\n          if (devices && devices.length) {\n            const device = devices.find(d => d.deviceId === deviceId);\n            if (device) {\n              this.selectedVideoInput$.next(device)\n            }\n          }   \n          const track = this.streamService.getVideoTrackForStream(newStream);\n          const currentStream = this.streamService.getLocalStream();\n          if (currentStream && track) {\n            this.streamService.replaceTrack(track);\n            const oldTrack = this.streamService.getVideoTrackForStream(currentStream);\n            oldTrack?.stop();\n            this.streamService.replaceTrackInStream(currentStream, track);\n          } else {\n            this.streamService.setLocalStream(newStream);\n          }\n          resolve();\n        }, (error) => {\n          console.error(error);\n          rejects(error);\n        });\n      }\n      if (kind === DeviceType.AudioInput) {\n        if (this.selectedAudioInput$.getValue()?.deviceId === deviceId) {\n          resolve();\n        }\n        navigator.mediaDevices.getUserMedia({ audio: {\n          deviceId\n        }}).then((newStream) => {\n          this.preferencesService.setPreferredAudioInputDevice(deviceId);\n          if (devices && devices.length) {\n            const device = devices.find(d => d.deviceId === deviceId);\n            if (device) {\n              this.selectedAudioInput$.next(device)\n            }\n          }\n          const track = this.streamService.getAudioTrackForStream(newStream);\n          if(track) {\n            this.streamService.replaceTrack(track);\n          }\n          const currentStream = this.streamService.getLocalStream();\n          if (currentStream && track) {\n            const oldTrack = this.streamService.getAudioTrackForStream(currentStream);\n            oldTrack?.stop();\n            this.streamService.replaceTrackInStream(currentStream, track);\n          } else {\n            this.streamService.setLocalStream(newStream);\n          }\n          resolve();\n        }, (error) => {\n          console.error(error);\n          rejects(error);\n        });\n      }\n      if (kind === DeviceType.AudioOutput) {\n        this.streamService.setAudioOutput(deviceId);\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Check the given device, if it's selected.\n   * @param device device to check if it's selected\n   * @param kind the kind of the device to check\n   * @returns `true` if the devie is selected, outerwise `false`\n   */\n  isDeviceSelected(device: MediaDeviceInfo, kind: DeviceType): boolean {\n    const stream = this.streamService.getLocalStream();\n    if (stream) {\n      if (kind === DeviceType.VideoInput && this.streamService.hasVideo) {\n        const track = this.streamService.getVideoTrackForStream(stream);\n        if (track) {\n          return track.getSettings().deviceId === device.deviceId;\n        }\n      }\n      if (kind === DeviceType.AudioInput && this.streamService.hasAudio) {\n        const track = this.streamService.getAudioTrackForStream(stream);\n        if (track) {\n          return track.getSettings().deviceId === device.deviceId;\n        } \n      }\n    }\n    return false;\n  }\n\n  /**\n   * group a list of devices you get by calling `StreamService.getMediaDevices()` by type.\n   * @param devices list of devices you get by calling `StreamService.getMediaDevices()`\n   * @returns a list of devices grouped by `DeviceType`\n   */\n  groupDeviceByKind(devices: MediaDeviceInfo[], omit: DeviceType[] = []): DevicesGroup[] {\n    const devicesGoups: DevicesGroup[] = [];\n    const audioInput = devices.filter(d => d.kind === DeviceType.AudioInput);\n    const audioOutput = devices.filter(d => d.kind === DeviceType.AudioOutput);\n    const videoinput = devices.filter(d => d.kind === DeviceType.VideoInput);\n    if (audioInput.length && !omit.includes(DeviceType.AudioInput)) {\n      devicesGoups.push({\n        kind: DeviceType.AudioInput,\n        devices: audioInput\n      });\n    }\n    if (audioOutput.length && !omit.includes(DeviceType.AudioOutput)) {\n      devicesGoups.push({\n        kind: DeviceType.AudioOutput,\n        devices: audioOutput\n      });\n    }\n    if (videoinput.length && !omit.includes(DeviceType.VideoInput)) {\n      devicesGoups.push({\n        kind: DeviceType.VideoInput,\n        devices: videoinput\n      });\n    }\n    return devicesGoups;\n  }\n\n  /**\n   * An simple wrapper for `navigator.mediaDevices.getUserMedia`, with basis error handling.\n   * @todo refactor\n   * @param mediaConstraints a MediaStreamConstraints e.g. with specific deviceId, resolution or just audio. Default is:\n   *                          ```json\n   *                         {\n   *                             audio: true,\n   *                             video: true\n   *                         }\n   *                         ```\n   * @returns Promise that resilve to a stream matching the constraint\n   */\n  public tryGetUserMedia(mediaConstraints?: MediaStreamConstraints): Promise<MediaStream> {\n    if (!mediaConstraints) {\n      mediaConstraints = {\n        audio: true,\n        video: true\n      }\n    };\n    return new Promise((resolve, reject) => {\n      this.detectSelectedDevices().then(() => {\n        navigator.mediaDevices.getUserMedia(mediaConstraints).then(steam => {\n          this.setDeviceAndResolve(steam, resolve);\n        },reject);\n      }, reject);\n    });\n  }\n\n  private findFirstSuccessful<T>(promises:(() => Promise<T>)[], onSuccess: (arg0: T) => void, onNotFound: () => void) {\n    const currentPromise = promises.shift();\n    if (currentPromise) {\n      currentPromise().then(onSuccess, () => {\n        this.findFirstSuccessful(promises, onSuccess, onNotFound);\n      });\n    } else {\n      onNotFound();\n    }\n  }\n\n  public tryGetMedia(onSuccess: (arg0: MediaStream) => void, onNotFound: () => void) {\n\n    const tryChain: (() => Promise<MediaStream>)[] = [\n      this.tryGetMediaWithPreferences.bind(this),\n      this.tryGetMediaDefault.bind(this),\n      this.tryGetMediaAudioOnly.bind(this)\n    ];\n\n    this.findFirstSuccessful<MediaStream>(tryChain, onSuccess, onNotFound);\n  }\n  \n  private tryGetMediaWithPreferences() {\n    const preferencesConstrains: MediaStreamConstraints = {\n      video: this.preferencesService.getVideoConstraintWithPreferences(),\n      audio: this.preferencesService.getAudioConstraintWithPreferences(),\n    };\n    return this.tryGetUserMedia(preferencesConstrains);\n  }\n  \n  private tryGetMediaDefault() {\n    this.preferencesService.resetPreferences();\n    return this.tryGetUserMedia({\n      video: true,\n      audio: true\n    });\n  }\n\n  private tryGetMediaAudioOnly() { \n    return this.tryGetUserMedia({\n      video: false,\n      audio: true\n    });\n  }\n\n\n  private setDeviceAndResolve(stream: MediaStream, resolve: (value: MediaStream | PromiseLike<MediaStream>) => void) {\n    const devicesGoups = this.devicesGoups$.getValue();\n    const videoDevices = devicesGoups.find(e => e.kind === DeviceType.VideoInput);\n    const videoTrack = this.streamService.getVideoTrackForStream(stream);\n    if (videoTrack && videoDevices) {\n      const selectedVideoDevice = videoDevices.devices.find(e => e.deviceId === videoTrack.getSettings().deviceId);\n      if (selectedVideoDevice) {\n        this.selectedVideoInput$.next(selectedVideoDevice);\n        this.preferencesService.setPreferredVideoInputDevice(selectedVideoDevice.deviceId);\n      }\n    }\n    const audioDevices = devicesGoups.find(e => e.kind === DeviceType.AudioInput);\n    const audioTrack = this.streamService.getAudioTrackForStream(stream);\n    if (audioTrack && audioDevices) {\n      const selectedAudioDevice = audioDevices.devices.find(e => e.deviceId === audioTrack.getSettings().deviceId);\n      if (selectedAudioDevice) {\n        this.selectedAudioInput$.next(selectedAudioDevice);\n        this.preferencesService.setPreferredAudioInputDevice(selectedAudioDevice.deviceId);\n      }\n    }\n    resolve(stream);\n  }\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;AAGA;;;MAMa,wBAAwB;IAHrC;QAKW,6BAAwB,GAAsB,IAAI,CAAC;QACtB,eAAU,GAAG,IAAI,CAAC;QACnB,cAAS,GAAG,KAAK,CAAC;KAiBxD;IAhBoC,OAAO;QACxC,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC7B,OAAO;SACR;QACD,IAAI,IAAI,CAAC,wBAAwB,EAAE,UAAU,EAAE;YAC7C,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;YAC5D,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SACpC;KACF;;qHAnBU,wBAAwB;yGAAxB,wBAAwB;2FAAxB,wBAAwB;kBAHpC,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;iBACvC;8BAGU,wBAAwB;sBAAhC,KAAK;gBACgC,UAAU;sBAA/C,WAAW;uBAAC,gBAAgB;gBACQ,SAAS;sBAA7C,WAAW;uBAAC,eAAe;gBACO,OAAO;sBAAzC,YAAY;uBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;ACXnC;;;MAMa,wBAAwB;IAHrC;QAKW,6BAAwB,GAAsB,IAAI,CAAC;QACtB,eAAU,GAAG,IAAI,CAAC;QACnB,cAAS,GAAG,KAAK,CAAC;KAiBxD;IAhBoC,OAAO;QACxC,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC7B,OAAO;SACR;QACD,IAAI,IAAI,CAAC,wBAAwB,EAAE,UAAU,EAAE;YAC7C,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;YAC5D,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SACpC;KACF;;qHAnBU,wBAAwB;yGAAxB,wBAAwB;2FAAxB,wBAAwB;kBAHpC,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;iBACvC;8BAGU,wBAAwB;sBAAhC,KAAK;gBACgC,UAAU;sBAA/C,WAAW;uBAAC,gBAAgB;gBACQ,SAAS;sBAA7C,WAAW;uBAAC,eAAe;gBACO,OAAO;sBAAzC,YAAY;uBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;ICbvB;AAAZ,WAAY,UAAU;IACpB,6BAAe,CAAA;IACf,6BAAe,CAAA;AACjB,CAAC,EAHW,UAAU,KAAV,UAAU;;ICAV;AAAZ,WAAY,qCAAqC;IAC/C,gEAAuB,CAAA;IACvB,0DAAiB,CAAA;IACjB,wDAAe,CAAA;IACf,oDAAW,CAAA;IACX,gFAAuC,CAAA;IACvC,gFAAuC,CAAA;IACvC,mEAA0B,CAAA;IAC1B,uEAA8B,CAAA;IAC9B,mEAA0B,CAAA;IAC1B,uEAA8B,CAAA;IAC9B,gFAAuC,CAAA;IACvC,8EAAqC,CAAA;AACvC,CAAC,EAbW,qCAAqC,KAArC,qCAAqC;;MCUnC,QAAQ;IAEb,OAAO,gBAAgB,CAAC,YAAoB;QACjD,OAAO,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACnC;IAEM,OAAO,mBAAmB,CAAC,GAAW,EAAE,MAAmB;;;QAGhE,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;SAChE;aAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YAC7B,GAAG,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;SAC9D;;;QAID,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,YAAY,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;SACtE;aAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAC1B,GAAG,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;SACpE;;;QAID,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;SAChE;aAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAC1B,GAAG,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;SAC9D;;QAGD,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,GAAG,GAAG,QAAQ,CAAC,aAAa,CACxB,GAAG,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;SAC9D;QACD,OAAO,GAAG,CAAC;KACZ;IAEM,OAAO,wBAAwB,CAAC,GAAW,EAAE,MAAmB;QACrE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC5B,OAAO,GAAG,CAAC;SACZ;;QAED,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KACtE;IAEM,OAAO,2BAA2B,CAAC,GAAW,EAAE,MAAmB;QACxE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC5B,OAAO,GAAG,CAAC;SACZ;;QAED,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KACtE;IAEM,OAAO,wBAAwB,CAAC,GAAW,EAAE,MAAmB;QACrE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC5B,OAAO,GAAG,CAAC;SACZ;;QAED,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KACtE;IAEM,OAAO,2BAA2B,CAAC,GAAW,EAAE,MAAmB;QACxE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC5B,OAAO,GAAG,CAAC;SACZ;;QAED,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KACtE;;IAGM,OAAO,aAAa,CAAC,GAAW,EAAE,OAAwB,EAAE,SAAiB;QAClF,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;QAGnC,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QAChE,IAAI,UAAU,KAAK,IAAI,EAAE;;YAEvB,OAAO,GAAG,CAAC;SACZ;;QAGD,IAAI,cAAc,GAAG,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAClF,IAAI,cAAc,KAAK,IAAI,EAAE;YAC3B,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC;SAClC;;QAGD,MAAM,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,GAAG,CAAC,EAChE,cAAc,EAAE,IAAI,CAAC,CAAC;QAC1B,IAAI,UAAU,KAAK,IAAI,EAAE;;YAEvB,OAAO,GAAG,CAAC;SACZ;;QAGD,MAAM,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,GAAG,CAAC,EAChE,cAAc,EAAE,MAAM,CAAC,CAAC;QAC5B,IAAI,UAAU,EAAE;YACd,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;SAChC;;QAGD,MAAM,MAAM,GAAG,OAAO,GAAG,OAAO,CAAC;;QAEjC,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;QAC3C,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;KACZ;;;;IAKM,OAAO,+BAA+B,CAAC,GAAW,EAAE,MAAmB;QAC5E,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE;YACnC,OAAO,GAAG,CAAC;SACZ;QACD,IAAI,cAAc,GAAG,OAAO,MAAM,CAAC,uBAAuB,KAAK,QAAQ;YACrE,QAAQ,CAAC,MAAM,CAAC,uBAAuB,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAChF,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,GAAG,CAAC;SACZ;;QAGD,IAAI,UAAU,GAAG,CAAC,OAAO,cAAc,KAAK,QAAQ,IAAI,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC,GAAG,cAAc,CAAC;QACtG,IAAI,MAAM,CAAC,gBAAgB,EAAE;YAC3B,MAAM,OAAO,GAAG,OAAO,MAAM,CAAC,gBAAgB,KAAK,QAAQ;gBACzD,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC;YAClE,IAAI,OAAO,EAAE;gBACX,IAAI,cAAc,GAAG,OAAO,EAAE;;oBAE5B,cAAc,GAAG,OAAO,CAAC;oBACzB,MAAM,CAAC,uBAAuB,GAAG,cAAc,CAAC;iBACjD;gBACD,UAAU,GAAG,OAAO,CAAC;aACtB;SACF;QAED,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;QAGnC,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9D,IAAI,UAAU,KAAK,IAAI,EAAE;;YAEvB,OAAO,GAAG,CAAC;SACZ;;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,6BAA6B,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;QACtE,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,GAAG,CAAC;SACZ;QACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW;YACxC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGtC,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,IAAI,SAAS,CAAC;QACjD,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,sBAAsB,EAAE,MAAM,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5G,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,sBAAsB,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAExF,OAAO,GAAG,CAAC;KACZ;IAEM,OAAO,0BAA0B,CAAC,KAAa,EAAE,WAAmB;QACzE,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC1C,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,QAAQ,EAAE,EAAE;gBAC5C,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACzB;SACF;QACD,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7B;IAEM,OAAO,iBAAiB,CAAC,QAAkB,EAAE,KAAa;QAC/D,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAC7D,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,QAAQ,CAAC;SACjB;QACD,MAAM,WAAW,GAAG,QAAQ,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,QAAQ,CAAC;SACjB;QACD,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;;QAG1B,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9D,IAAI,UAAU,KAAK,IAAI,EAAE;YACvB,OAAO,QAAQ,CAAC;SACjB;QACD,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,0BAA0B,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,CAAC;QAC9F,OAAO,QAAQ,CAAC;KACjB;IAEM,OAAO,wBAAwB,CAAC,QAAkB,EAAE,WAAmB;QAC5E,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9E,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,QAAQ,CAAC;SACjB;QACD,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;;QAG1B,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9D,IAAI,UAAU,KAAK,IAAI,EAAE;YACvB,OAAO,QAAQ,CAAC;SACjB;QACD,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,0BAA0B,CAAC,QAAQ,CAAC,UAAU,CAAC,EAC3E,WAAW,CAAC,CAAC;QACjB,OAAO,QAAQ,CAAC;KACjB;IAEM,OAAO,mBAAmB,CAAC,GAAW,EAAE,MAAmB;QAChE,IAAI,MAAM,CAAC,QAAQ,KAAK,KAAK,EAAE;YAC7B,OAAO,GAAG,CAAC;SACZ;QAED,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEjC,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAC3D,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,GAAG,CAAC;SACZ;QACD,MAAM,cAAc,GAAG,QAAQ,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7E,IAAI,cAAc,KAAK,IAAI,EAAE;YAC3B,OAAO,GAAG,CAAC;SACZ;QACD,QAAQ,GAAG,QAAQ,CAAC,wBAAwB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QACvE,QAAQ,GAAG,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;;QAG1D,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzE,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,GAAG,CAAC;SACZ;QACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACzD,MAAM,cAAc,GAAG,QAAQ,EAAE,EAAE,CAAC;QACpC,IAAI,CAAC,cAAc,IAAI,cAAc,KAAK,IAAI,EAAE;YAC9C,OAAO,GAAG,CAAC;SACZ;QACD,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE1B,QAAQ,GAAG,QAAQ,CAAC,wBAAwB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QACvE,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC9B;;IAGM,OAAO,yBAAyB,CAAC,GAAW,EAAE,MAAmB;QACtE,OAAO,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;KAC/E;;IAGM,OAAO,4BAA4B,CAAC,GAAW,EAAE,MAAmB;QACzE,OAAO,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;KAClF;;IAGM,OAAO,yBAAyB,CAAC,GAAW,EAAE,MAAmB;QACtE,OAAO,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;KAC/E;;IAGM,OAAO,4BAA4B,CAAC,GAAW,EAAE,MAAmB;QACzE,OAAO,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;KAClF;;;IAIM,OAAO,gBAAgB,CAAC,GAAW,EAAE,IAAY,EAAE,GAAW,EAAE,KAAc;;QAEnF,IAAI,CAAC,KAAK,EAAE;;YAEV,OAAO,GAAG,CAAC;SACZ;;QAID,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;QAGnC,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC3D,IAAI,UAAU,KAAK,IAAI,EAAE;YACvB,OAAO,GAAG,CAAC;SACZ;;QAGD,IAAI,OAAO,GAAG,IAAI,CAAC;;QAEnB,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAG,EAAE,CAAC,EAAE;;YAE9C,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAClF,IAAI,KAAK,KAAK,IAAI,EAAE;;gBAElB,CAAC,GAAG,KAAK,CAAC;gBACV,OAAO,GAAG,QAAQ,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChE,IAAI,OAAO,EAAE;;oBAEX,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC;iBAChF;aACF;iBAAM;;gBAEL,MAAM;aACP;SACF;QAED,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;KACZ;;IAGM,OAAO,aAAa,CAAC,GAAW,EAAE,KAAa,EAAE,KAAa,EAAE,KAAsB;QAC3F,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEnC,MAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAE7D,IAAI,OAAO,GAAwB,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAC,CAAA;QACvD,IAAI,aAAa,KAAK,IAAI,EAAE;YAC1B,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAC7D,IAAI,KAAK,KAAK,IAAI,EAAE;gBAClB,OAAO,GAAG,CAAC;aACZ;YACD,MAAM,OAAO,GAAG,QAAQ,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACtE,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,OAAO,GAAG,CAAC;aACZ;YACD,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YAChC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;YACpB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YAC9B,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC/C,IAAI,MAAM,EAAE;gBACV,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;aACvC;SACF;aAAM;YACL,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1D,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;gBAC9B,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC/C,IAAI,MAAM,EAAE;oBACV,QAAQ,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC;iBAClC;aACF;SACF;QAED,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;KACZ;;IAGM,OAAO,gBAAgB,CAAC,GAAW,EAAE,KAAa,EAAE,KAAa;QACtE,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEnC,MAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7D,IAAI,aAAa,KAAK,IAAI,EAAE;YAC1B,OAAO,GAAG,CAAC;SACZ;QAED,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;QAC5D,IAAI,GAAG,KAAK,IAAI,EAAE;YAChB,OAAO,GAAG,CAAC;SACZ;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEzB,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,OAAO,KAAK,IAAI,EAAE;YACpB,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;SACnC;aAAM;YACL,QAAQ,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC;SACnC;QAED,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;KACZ;;IAGM,OAAO,aAAa,CAAC,QAAgB;QAC1C,MAAM,OAAO,GAAiB,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC;QACnD,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE9D,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACjC,OAAO,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACxB;aAAM;YACL,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,KAAK,MAAM,UAAU,IAAI,SAAS,EAAE;YAClC,MAAM,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;aAC3B;SACF;QACD,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QAExB,OAAO,OAAO,CAAC;KAChB;;IAGM,OAAO,aAAa,CAAC,OAAqB;QAC/C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;YACpH,OAAO,IAAI,CAAC;SACb;QACD,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACtB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE;gBACf,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvC,EAAE,CAAC,CAAC;aACL;SACF;QACD,IAAI,CAAC,KAAK,CAAC,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,OAAO,SAAS,GAAG,EAAE,EAAE,QAAQ,EAAE,GAAG,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC/D;;IAGM,OAAO,YAAY,CAAC,QAAkB,EAAE,KAAa;;QAE1D,MAAM,OAAO,GAAG,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;;QAE9D,OAAO,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC;KACrF;;;IAIM,OAAO,QAAQ,CAAC,QAAkB,EAAE,MAAc,EAAE,MAAe;QACxE,OAAO,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KAClE;;;IAIM,OAAO,eAAe,CAC3B,QAAkB,EAClB,SAAiB,EACjB,OAAe,EACf,MAAe,EACf,MAAe,EACf,SAA0B;QAE1B,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,SAAS,GAAG,KAAK,CAAC;SACnB;QAED,SAAS,GAAG,SAAS,IAAI,KAAK,CAAC;QAE/B,IAAI,SAAS,KAAK,KAAK,EAAE;;YAEvB,MAAM,WAAW,GAAG,OAAO,KAAK,CAAC,CAAC,GAAG,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC/D,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;gBAC5C,IAAI,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;oBAC/C,IAAI,CAAC,MAAM;wBACP,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;wBAClE,OAAO,CAAC,CAAC;qBACV;iBACF;aACF;SACF;aAAM;;YAEL,MAAM,aAAa,GAAG,SAAS,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACzE,KAAK,IAAI,CAAC,GAAG,aAAa,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;gBACvC,IAAI,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;oBAC/C,IAAI,CAAC,MAAM;wBACP,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;wBAClE,OAAO,CAAC,CAAC;qBACV;iBACF;aACF;SACF;QACD,OAAO,IAAI,CAAC;KACb;;IAGM,OAAO,mBAAmB,CAAC,QAAkB,EAAE,KAAa;QACjE,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAC7D,OAAO,KAAK,GAAG,QAAQ,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC;KAC7E;;IAGM,OAAO,2BAA2B,CAAC,OAAe;QACvD,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,sCAAsC,CAAC,CAAC;QACnE,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KAC3D;;IAGM,OAAO,eAAe,CAAC,KAAa,EAAE,OAAe;QAC1D,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QAGlC,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;QAGrC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;gBAC3B,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3B;SACF;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;;;MChgBU,cAAc;IAElB,OAAO,SAAS,CAAC,IAAY;QAClC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;KAC1F;;2GAJU,cAAc;+GAAd,cAAc,cAFb,MAAM;2FAEP,cAAc;kBAH1B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCMY,oBAAoB;IAoF/B,YAAY,QAAsC;QAjF1C,YAAO,GAAG,KAAK,CAAC;QAChB,gBAAW,GAAG,KAAK,CAAC;QACpB,iBAAY,GAAG,KAAK,CAAC;QACrB,iBAAY,GAAwC,EAAE,CAAC;QAGvD,kBAAa,GAAG,KAAK,CAAC;QACtB,OAAE,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACxB,8BAAyB,GAAoB;YAC5D,mBAAmB,EAAE,IAAI;YACzB,mBAAmB,EAAE,IAAI;SAC1B,CAAC;;;;QAIK,qBAAgB,GAAG,IAAI,YAAY,EAAqC,CAAC;;;;QAIzE,qBAAgB,GAAG,IAAI,eAAe,CAA+C,IAAI,CAAC,CAAC;;;;QAI3F,sBAAiB,GAAG,IAAI,YAAY,EAAe,CAAC;;;;QAIpD,qBAAgB,GAAG,IAAI,YAAY,EAAe,CAAC;;;;QAInD,iBAAY,GAAG,IAAI,eAAe,CAA2B,IAAI,CAAC,CAAC;;;;QAInE,WAAM,GAAG,IAAI,eAAe,CAAyC,IAAI,CAAC,CAAC;;;;QAI3E,oBAAe,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;;;;QAItD,0BAAqB,GAAG,IAAI,eAAe,CAA0B,IAAI,CAAC,CAAC;;;;QAI3E,iBAAY,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAIxC,gBAAW,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAIvC,gBAAW,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAIvC,kBAAa,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAIzC,oBAAe,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAI3C,kBAAa,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAIzC,oBAAe,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAI3C,+BAA0B,GAAG,IAAI,OAAO,EAAW,CAAC;;;;QAIpD,wBAAmB,GAAG,IAAI,eAAe,CAA8B,IAAI,CAAC,CAAC;QAGlF,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;QAC5E,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACtB,MAAc,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;SACzC;QACD,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,IAAI,CAAC,UAAU,CAAC,0BAA0B,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxF,IAAI,CAAC,UAAU,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3E;;;;;;;;IASM,aAAa,CAAC,eAAgC,EAAE;QACrD,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QAExC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAGpB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;KACvC;IAEM,WAAW,CAAC,eAAgC,EAAE;QACnD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,WAAW,GAAoB,EAAC,GAAG,IAAI,CAAC,yBAAyB,EAAE,GAAG,YAAY,EAAC,CAAC;QAC1F,IAAI,CAAC,GAAG,CAAC,+CAA+C,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,CAAC;QAChG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC;aACnC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC;KACb;;;;;;IAOM,aAAa,CAAC,eAAgE;QACnF,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;YAC/C,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;YAC7C,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;;;YAGjD,KAAK,MAAM,OAAO,IAAI,eAAe,EAAE;gBACrC,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;aACvC;YACD,OAAO,IAAI,CAAC;SACb;;;QAID,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;KACb;;;;IAKM,KAAK;QACV,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,GAAG;SAChD,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;;;;IAKM,UAAU;QACf,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,UAAU;SACvD,CAAC,CAAC;KACJ;;;;IAKM,YAAY;QACjB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,YAAY;SACzD,CAAC,CAAC;KACJ;;;;IAKM,UAAU;QACf,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,UAAU;SACvD,CAAC,CAAC;KACJ;;;;IAKM,YAAY;QACjB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,YAAY;SACzD,CAAC,CAAC;KACJ;;;;IAKM,gBAAgB;QACrB,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,gBAAgB;SAC7D,CAAC,CAAC;KACJ;;;;IAKM,gBAAgB;QACrB,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,gBAAgB;SAC7D,CAAC,CAAC;KACJ;;;;IAKM,gBAAgB;QACrB,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,gBAAgB;SAC7D,CAAC,CAAC;KACJ;;;;IAKM,eAAe;QACpB,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,IAAI,EAAE,qCAAqC,CAAC,eAAe;SAC5D,CAAC,CAAC;KACJ;;;;;IAMM,uBAAuB;QAK5B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QACD,OAAO;YACL,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc;YAC9C,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB;YACpD,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,kBAAkB;SACvD,CAAC;KACH;;;;;;IAOM,sBAAsB,CAAC,KAAwB;QACpD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;SACzB;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxC;;;;;IAMM,QAAQ,CAAC,KAAuB;QACrC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC5B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjD,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;aACtC,CAAC,CAAC;YACH,IAAI,MAAM,EAAE,KAAK,EAAE;gBACjB,IAAI,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;gBAC5D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC1B;iBAAM;gBACL,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACjC;SACF;KACF;;;;;IAMM,YAAY,CAAC,KAAuB;QACzC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjD,OAAO,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;aACtC,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE;gBAClB,IAAI,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;gBAClD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACtB;iBAAM;gBACL,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC5B;SACF;KACF;;;;;IAMM,SAAS,CAAC,UAAuB;QACtC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAClC,UAAU,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,KAAK;YAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ;IAEO,oBAAoB,CAAC,kBAA6C;QACxE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;;QAED,IAAI,kBAAkB,CAAC,GAAG,EAAE;YAC1B,kBAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7F,kBAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtG,kBAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtG,kBAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,2BAA2B,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrG,kBAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,2BAA2B,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrG,kBAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC9F;QACD,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,kBAAkB,CAAC;aAClD,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;aACxD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC,CAAC;;;;;QAM3D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,GAAG,EAAE,kBAAkB,CAAC,GAAG;YAC3B,IAAI,EAAE,kBAAkB,CAAC,IAAI;SAC9B,CAAC,CAAC;KACJ;IAEO,kBAAkB,CAAC,YAA6B;;QAEtD,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC;;QAG5C,IAAI,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SACd;;QAGD,IAAI,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,KAAK,OAAO,IAAI,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,OAAO,EAAE;YACvH,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;IAEO,cAAc,CAAC,KAAgC;;QAErD,IAAI,KAAK,CAAC,SAAS,EAAE;;YAEnB,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;gBAC5C,MAAM,OAAO,GAAG;oBACd,IAAI,EAAE,qCAAqC,CAAC,SAAS;oBACrD,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,aAAa;oBACpC,EAAE,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;oBAC1B,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,SAAS;iBACrC,CAAC;gBACF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpC,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;aACrD;SACF;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;SAChC;KACF;IAGO,mBAAmB,CAAC,UAA6C;QACvE,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,GAAG,EAAE;YACjE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC1B;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,gBAAgB,EAAE;YACrF,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACzB;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,gBAAgB,EAAE;YACrF,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACzB;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,UAAU,EAAE;YAC/E,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;SAC3B;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,YAAY,EAAE;YACjF,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;SAC7B;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,UAAU,EAAE;YAC/E,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;SAC3B;aAAO,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,YAAY,EAAE;YAClF,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;SAC7B;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,gBAAgB,EAAE;YACrF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,eAAe,EAAE;YACpF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClC;KACF;;;;;IAMM,uBAAuB,CAAC,OAAmD;QAChF,IAAI,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAI,UAA6C,CAAC;QAClD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI;gBACF,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAClC;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,GAAG,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;gBAC9C,OAAO;aACR;SACF;aAAM;YACL,UAAU,GAAG,OAAO,CAAC;SACtB;QAED,IAAI,IAAI,CAAC,UAAU,EAAE,iBAAiB,KAAK,UAAU;aAClD,CAAC,IAAI,CAAC,WAAW,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,MAAM;iBACnF,CAAC,IAAI,CAAC,WAAW,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3F,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;;YAEzB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SACvC;QAED,IAAI,UAAU,CAAC,IAAI,KAAK,qCAAqC,CAAC,SAAS,EAAE;YACvE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAGO,uBAAuB,CAAC,OAA0C;QACxE,IAAI,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,OAAO,CAAC,IAAI,KAAK,qCAAqC,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,KAAK,UAAU,CAAC,EAAE;YAC3I,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,QAAQ,EAAE;gBAC/C,IAAI,CAAC,GAAG,CAAC,oDAAoD,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBAChG,OAAO;aACR;YACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;aAAM,IAAI,OAAO,CAAC,IAAI,KAAK,qCAAqC,CAAC,MAAM,KAAK,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,KAAK,UAAU,CAAC,EAAE;YAClJ,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,kBAAkB,EAAE;gBACzD,IAAI,CAAC,GAAG,CAAC,qDAAqD;oBACxD,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBACtC,OAAO;aACR;YACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SAC5B;aAAM,IAAI,OAAO,CAAC,IAAI,KAAK,qCAAqC,CAAC,SAAS,EAAE;YAC3E,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC;gBACpC,aAAa,EAAE,OAAO,CAAC,KAAK;gBAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;aAC7B,CAAC,CAAC;YACH,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAC/C,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC;iBACrC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,sCAAsC,CAAC,CAAC;iBACjE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC;SACxD;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,gCAAgC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;SAC1D;KACF;IAEO,QAAQ;QACd,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;aACzB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;KACrD;IAGO,YAAY,CAAC,OAA0C;QAC7D,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;;QAED,IAAI,OAAO,CAAC,GAAG,EAAE;YACf,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvE,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,yBAAyB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7E,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,yBAAyB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7E,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5E,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5E,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,+BAA+B,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnF,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACxE;QACD,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,qBAAqB,CAAC,OAAoC,CAAC,CAAC;aAChG,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC,CAAC;KAC7D;;;IAIO,iBAAiB;;;;;;;;;;QAUvB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YAC3D,OAAO;SACR;QACD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE;YACvC,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;SACvC;QACD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KACxB;;IAKO,0BAA0B;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,GAAG,CAAC,mCAAmC,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAEnF,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,KAAK,WAAW,EAAE;YACtD,IAAI,CAAC,GAAG,CAAC,qBAAqB;gBAC1B,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;SACrE;QAED,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;KACnE;IAEO,mBAAmB;QACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAChC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAE5C;IAEO,sBAAsB;QAC5B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,GAAG,CAAC,8BAA8B,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAC1E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;KACxD;IAEO,OAAO,CAAC,MAAc,EAAE,KAAa;QAC3C,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;KACnC;IAEO,oBAAoB,CAAC,QAAgB,EAAE,YAAoD;QACjG,IAAI,YAAY,EAAE,SAAS,EAAE;YAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,YAAY,CAAC,SAAS,EAAC,CAAC,CAAC;SAC3E;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,yCAAyC,EAAE,EAAC,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAC,CAAC,CAAC;SAC1F;KACF;IAEO,kBAAkB,CAAC,KAAoB;QAC7C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,IAAkB;SACrC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,IAAkB;SACrC,CAAC,CAAC;KACJ;IAEO,6BAA6B;QACnC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;;;;QAIpD,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;QACrD,IAAI,aAAa,CAAC,MAAM,EAAE;YACxB,KAAK,MAAM,MAAM,IAAI,aAAa,EAAE;gBAClC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC/C;SACF;KACF;IAEO,GAAG,CAAC,GAAG,IAAW;QACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SAC/B;KACF;IAEO,KAAK,CAAC,GAAG,IAAW;QAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACvB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SACjC;KACF;;;MCzpBU,aAAa;IAA1B;QACE,mBAAc,GAAG,EAAE,CAAC;QACpB,UAAK,GAAG,KAAK,CAAC;QACd,iCAA4B,GAAG,IAAI,CAAC;KACrC;;;MCJY,kBAAkB,GAAG,IAAI,cAAc,CAAoC,oBAAoB;;ACS5G;;;;MAOa,WAAW;IAEtB,YACmB,MAAqB,EACO,OAA0C;QADtE,WAAM,GAAN,MAAM,CAAe;QACO,YAAO,GAAP,OAAO,CAAmC;QAIxE,sBAAiB,GAAG,kBAAkB,CAAC;QAChD,UAAK,GAAG,CAAC,CAAC;;QAGV,eAAU,GAAiB,IAAI,CAAC,MAAM,CAAC,cAA8B,CAAC;;;;;QAMvE,WAAM,GAAG,IAAI,eAAe,CAAe,EAAE,CAAC,CAAC;;;;QAO/C,qBAAgB,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAM5C,oBAAe,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;;;;;;;;;QAa3C,mBAAc,GAAgB;YACnC,EAAE,IAAI,EAAE,8BAA8B,EAAE;YACxC,EAAE,IAAI,EAAE,gDAAgD,EAAE;YAC1D,EAAE,IAAI,EAAE,gCAAgC,EAAE;SAC3C,CAAC;;;;QAKK,aAAQ,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;KAhDnD;;;;IAqDI,WAAW;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;;QAExB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KACvE;;;;;IAMM,QAAQ;QACb,MAAM,YAAY,GAAkB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACzF,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,YAAY,IAAI,YAAY,KAAK,IAAI,EAAE;YACxD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;SACzC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;;;;IAQM,OAAO,CAAC,IAAU,EAAE,UAAgC,EAAE,IAAiD;QAC5G,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,KAAK,CAAC,IAAI,CAAC;YACT,IAAI;YACJ,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,CAAC;YACT,UAAU,EAAE,KAAK;YACjB,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,KAAK;YAClB,UAAU;YACV,IAAI;SACL,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;;;;;IAMM,UAAU,CAAC,IAAU;QAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC5B,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;;;;;IAMM,UAAU,CAAC,IAAU;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,UAAU,CAAC,IAAU;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,cAAc,CAAC,IAAU;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,gBAAgB,CAAC,IAAU;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,cAAc,CAAC,IAAU;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,gBAAgB,CAAC,IAAU;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,oBAAoB,CAAC,IAAU;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;KACF;;;;;IAMM,mBAAmB,CAAC,IAAU;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,WAAW,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;;;;;IAMM,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC/B;;;;;;IAOM,OAAO,CAAC,IAAU;QACvB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,CAAC;KAC7F;;;;;;IAOM,MAAM,gBAAgB,CAAC,QAAsC;QAClE,OAAO,IAAI,oBAAoB,CAAC,QAAQ,CAAC,CAAC;KAC3C;;;;;;;IAQM,MAAM,gBAAgB,CAAC,YAAqB;QACjD,IAAI,EAAE,OAAO;QACb,UAAU,EAAE,OAAO;KACpB;QACC,OAAO,iBAAiB,CAAC,mBAAmB,CAAC,SAAgC,CAAC,CAAC;KAChF;;;;IAKM,KAAK;QACV,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B;;;;IAKM,IAAI;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;;;;;IAMM,iBAAiB;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC;KACxB;IAEO,QAAQ,CAAC,KAAmB,EAAE,IAAU;QAC9C,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,CAAC;KACnF;;wGApRU,WAAW,4CAIZ,kBAAkB;4GAJjB,WAAW,cAFV,MAAM;2FAEP,WAAW;kBAHvB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAKI,MAAM;2BAAC,kBAAkB;;;MCpBjB,yBAAyB,GAAG,IAAI,cAAc,CAAS,2BAA2B;;MCOlF,kBAAkB;IAa7B,YACmB,MAAqB,EACc,MAAc,EACrB,OAA0C;QAFtE,WAAM,GAAN,MAAM,CAAe;QACc,WAAM,GAAN,MAAM,CAAQ;QACrB,YAAO,GAAP,OAAO,CAAmC;QAdlF,+BAA0B,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,CAAC;QACtE,gCAA2B,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,CAAC;QACvE,+BAA0B,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,CAAC;QACtE,qCAAgC,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,CAAC;QAClE,oBAAe,GAAW,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;QAC1E,oBAAe,GAAW,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;QAC1E,2BAAsB,GAAW,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;QACjF,qBAAgB,GAAW,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;QAEpF,SAAI,GAAmB,EAAE,CAAC;QAOhC,IAAI,CAAC,8BAA8B,EAAE,CAAC;KACvC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG;YACnB,GAAG,CAAC,WAAW,EAAE,CAAC;SACnB,CAAC,CAAA;KACH;IAEO,UAAU,CAAC,GAAW;QAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACrC;IAEO,gBAAgB,CAAI,OAAkC,EAAE,GAAW;QACzE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ;YACvC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAChE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC,CAAC;aAClD;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACtC;SACF,CAAC,CAAC,CAAA;KACJ;IAEO,0BAA0B;QAChC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;QACzF,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;QACzF,MAAM,wBAAwB,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC3F,IAAI,wBAAwB,EAAE;YAC5B,MAAM,iBAAiB,GAAG,QAAQ,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;YACjE,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;KAC5F;IAEO,8BAA8B;QACpC,IAAG,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE;YAC3C,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,IAAI,CAAC,gBAAgB,CAAS,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACrF,IAAI,CAAC,gBAAgB,CAAS,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACrF,IAAI,CAAC,gBAAgB,CAAS,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACvF,IAAI,CAAC,gBAAgB,CAAS,IAAI,CAAC,gCAAgC,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;SACnG;KACF;IAED,iCAAiC;QAC/B,MAAM,yBAAyB,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,CAAC;QAC7E,MAAM,+BAA+B,GAAG,IAAI,CAAC,gCAAgC,CAAC,QAAQ,EAAE,CAAC;QACzF,IAAI,eAAe,GAAsD,IAAI,CAAC;QAC9E,IAAI,yBAAyB,IAAI,+BAA+B,KAAK,IAAI,EAAE;YACzE,IAAI,yBAAyB,IAAI,+BAA+B,KAAK,IAAI,EAAE;gBACzE,eAAe,GAAG;oBAChB,QAAQ,EAAE,yBAAyB;oBACnC,MAAM,EAAE,+BAA+B;iBACxC,CAAA;aACF;iBAAM,IAAI,yBAAyB,EAAE;gBACpC,eAAe,GAAG;oBAChB,QAAQ,EAAE,yBAAyB;iBACpC,CAAA;aACF;iBAAM,IAAI,+BAA+B,EAAE;gBAC1C,eAAe,GAAG;oBAChB,MAAM,EAAE,+BAA+B;iBACxC,CAAA;aACF;SACF;QACD,OAAO,eAAe,CAAC;KACxB;IAED,iCAAiC;QAC/B,MAAM,yBAAyB,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,CAAC;QAC7E,OAAO,yBAAyB,GAAG,EAAE,QAAQ,EAAE,yBAAyB,EAAE,GAAG,IAAI,CAAA;KAClF;IAED,4BAA4B,CAAC,QAAgB;QAC3C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChD;IACD,6BAA6B,CAAC,QAAgB;QAC5C,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACjD;IACD,4BAA4B,CAAC,QAAgB;QAC3C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChD;IACD,kCAAkC,CAAC,MAAc;QAC/C,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACpD;IAED,gBAAgB;QACd,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClD;;+GA5GU,kBAAkB,4CAenB,yBAAyB,aACzB,kBAAkB;mHAhBjB,kBAAkB,cAFjB,MAAM;2FAEP,kBAAkB;kBAH9B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAgBI,MAAM;2BAAC,yBAAyB;;0BAChC,MAAM;2BAAC,kBAAkB;;;MChBjB,aAAa;IAgDxB,YACmB,MAAqB,EAC9B,kBAAsC;QAD7B,WAAM,GAAN,MAAM,CAAe;QAC9B,uBAAkB,GAAlB,kBAAkB,CAAoB;;;;QA7CzC,iBAAY,GAAG,IAAI,eAAe,CAAqB,IAAI,CAAC,CAAC;;;;QAI7D,4BAAuB,GAAG,IAAI,eAAe,CAAqB,IAAI,CAAC,CAAC;;;;QAKxE,kBAAa,GAAG,IAAI,eAAe,CAA0B,IAAI,CAAC,CAAC;;;;QAKnE,iBAAY,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,CAAC;;;;QAKxD,6BAAwB,GAAG,IAAI,YAAY,EAAkC,CAAC;;;;QAK9E,kCAA6B,GAAG,IAAI,YAAY,EAAW,CAAC;;;;QAK5D,kCAA6B,GAAG,IAAI,YAAY,EAAW,CAAC;;;;;QAM5D,aAAQ,GAAG,KAAK,CAAC;;;;;QAMjB,aAAQ,GAAG,KAAK,CAAC;KAKrB;;;;;;;IASI,OAAO,cAAc,CAAC,KAAa,EAAE,MAAc;QAExD,SAAS,GAAG,CAAC,CAAS,EAAE,CAAS;YAC/B,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;SAC9B;QAED,MAAM,OAAO,GAAW,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC3C,OAAO,GAAG,KAAK,GAAG,OAAO,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;KACjD;;;;;;;;IASM,eAAe,CAAC,IAAyC,EAAE,MAAsC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,KAAK;;QAEnI,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,IAAI,EAAE;;YAGR,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,SAAS,CAAC,KAAK;;gBAEvD,MAAM,eAAe,GAAqB,KAAK,CAAC,MAA0B,CAAC;gBAC3E,IAAI,eAAe,EAAE;oBACnB,eAAe,CAAC,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;oBAC1D,eAAe,CAAC,IAAI,EAAE,CAAC;iBACxB;gBACD,IAAI,KAAK,EAAE;oBACT,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC5C;aACF,CAAC,CAAC;YAEH,IAAI,SAAS,CAAC;YACd,IAAI,MAAM,YAAY,gBAAgB,EAAE;gBACtC,SAAS,GAAG,IAAI,WAAW,EAAE,CAAC;gBAC9B,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAC5B;iBAAM;gBACL,SAAS,GAAG,MAAM,CAAC;aACpB;YACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;KACF;;;;;IAMM,gBAAgB,CAAC,IAAgB;QACtC,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QAC7B,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAmB,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACvF,IAAI,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,WAAW,EAAE,CAAC;SAClD;KACF;IAEM,gBAAgB,CAAC,IAAgB;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;SACzC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACrC,IAAI,MAAM,EAAE;YACV,MAAM,MAAM,GAAG,IAAI,KAAK,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC,cAAc,EAAE,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;YAC7F,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjB,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aACrC;iBAAM;gBACL,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aACpC;SACF;aAAM;YACL,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAA;SAC9C;KAEF;IAEM,gBAAgB,CAAC,IAAgB;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;SACzC;QACD,OAAO,IAAI,OAAO,CAAc,CAAC,OAAO,EAAE,OAAO;YAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YACrC,IAAI,MAAM,EAAE;gBACV,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;oBAC7B,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;wBAClC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,EAAE;qBACnE,CAAC,CAAC,IAAI,CAAC,MAAM;wBACZ,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,IAAI,WAAW,EAAE,CAAC;wBACtE,MAAM,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,KAAK;4BACnC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BAC5B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC9C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;yBAC1B,CAAC,CAAC;wBACH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACpC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAChD,OAAO,CAAC,WAAW,CAAC,CAAC;qBACtB,EAAE,CAAC,KAAK;wBACP,OAAO,CAAC,KAAK,CAAC,CAAC;qBAChB,CAAC,CAAC;iBACJ;gBACD,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;oBAC7B,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;wBAClC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,EAAE;qBACnE,CAAC,CAAC,IAAI,CAAC,MAAM;wBACZ,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,IAAI,WAAW,EAAE,CAAC;wBACtE,MAAM,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,KAAK;4BACnC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BAC5B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC9C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;yBAC1B,CAAC,CAAC;wBACH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACpC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAChD,OAAO,CAAC,WAAW,CAAC,CAAC;qBACtB,EAAE,CAAC,KAAK;wBACP,OAAO,CAAC,KAAK,CAAC,CAAC;qBAChB,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,OAAO,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;aACjC;SACF,CAAC,CAAC;KACJ;IAEM,iBAAiB,CAAC,IAAgB;QACvC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO;YAClC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YACrC,IAAI,MAAM,EAAE;gBACV,MAAM,MAAM,GAAG,IAAI,KAAK,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC,cAAc,EAAE,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;gBAC7F,MAAM,CAAC,OAAO,CAAC,KAAK;oBAClB,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;oBACtB,KAAK,CAAC,IAAI,EAAE,CAAC;oBACb,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;iBAC1B,CAAC,CAAC;gBACH,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;oBAC7B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAChD;qBAAM;oBACL,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAChD;gBACD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/B,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;aACxB;iBAAM;gBACL,OAAO,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;aACjC;SACF,CAAC,CAAC;KACJ;;;;;;;IAQM,gBAAgB,CAAC,MAAsC,EAAE,IAAgB,EAAE,KAAe;QAC/F,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SACxD;QACD,IAAI,MAAM,EAAE;YACV,IAAI,MAAM,YAAY,gBAAgB,EAAE;gBACtC,MAAM,WAAW,GAAG,OAAO,KAAK,KAAK,WAAW,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;gBAC3E,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC;aAC9B;iBAAM;gBACL,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;oBAC7B,MAAM,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,KAAK;wBACnC,MAAM,WAAW,GAAG,OAAO,KAAK,KAAK,WAAW,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;wBAC1E,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC;wBAC5B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;qBACtD,CAAC,CAAC;iBACJ;gBACD,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;oBAC7B,MAAM,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,KAAK;wBACnC,MAAM,WAAW,GAAG,OAAO,KAAK,KAAK,WAAW,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;wBAC1E,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC;wBAC5B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;qBACtD,CAAC,CAAC;iBACJ;aACF;SACF;QACD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC5C;;;;;;IAOM,UAAU,CAAC,MAAsC,EAAE,IAAgB;QACxE,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;KAC5C;;;;;;IAOM,YAAY,CAAC,MAAsC,EAAE,IAAgB;QAC1E,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC3C;;;;;;IAOM,oBAAoB,CAAC,MAAmB,EAAE,KAAuB;QACtE,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;YACnC,MAAM,EAAE,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC;gBAChC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACT,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;aACtB,CAAC,CAAC;SACJ;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;YACnC,MAAM,EAAE,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACT,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;aACtB,CAAC,CAAC;SACJ;QACD,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;KACzB;;;;;IAMM,cAAc,CAAC,MAA0B;QAC9C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAChC;;;;;IAMM,cAAc;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;KACrC;;;;;IAMM,YAAY,CAAC,KAAuB;QACzC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAChC;;;;IAKM,0BAA0B;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;SACjD;KACF;;;;IAKM,oBAAoB;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACxD;KACF;;;;IAKM,sBAAsB;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACvD;KACF;;;;IAKM,0BAA0B;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;SACjD;KACF;;;;IAKM,oBAAoB;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACxD;KACF;;;;IAKM,sBAAsB;QAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC3C,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACtD;KACF;;;;;IAMM,MAAM,gBAAgB;QAC3B,IAAI,MAAM,GAAuB,IAAI,CAAC;QACtC,IAAI;;YAEF,MAAM,CAAC,GAAQ,SAAS,CAAC;YACzB,IAAI,CAAC,CAAC,eAAe,EAAE;gBACrB,MAAM,GAAG,MAAM,CAAC,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aACnD;iBAAM,IAAI,CAAC,CAAC,YAAY,CAAC,eAAe,EAAE;gBACzC,MAAM,GAAG,MAAM,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aAChE;iBAAM;gBACL,MAAM,GAAG,MAAM,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;aAClF;SACF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;aAC3E;SACF;QACD,OAAO,MAAM,CAAC;KACf;;;;;;IAOM,sBAAsB,CAAC,MAAoB;QAChD,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE;YACpC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAiB,CAAC;SAC/C;QACD,OAAO,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;KAC5C;;;;;;IAOM,sBAAsB,CAAC,MAAoB;QAChD,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE;YACpC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAiB,CAAC;SAC/C;QACD,OAAO,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;KAC5C;;;;;;IAOM,eAAe;QACpB,OAAO,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;KAClD;;;;;IAMM,cAAc,CAAC,QAAgB;QACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAClC;;;;;;;;;;;;;;;IAgBM,eAAe,CAAC,gBAAyC;;QAE9D,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB,IAAI,CAAC,gBAAgB,EAAE;YACrB,gBAAgB,GAAG;gBACjB,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAI;aACZ,CAAA;SACF;QAAA,CAAC;QAEF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,OAAO,CAAC,CAAC,CAAC,CAAC;aACZ,EAAE,CAAC;gBACF,IAAI,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC;gBAC3B,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,EAAE;oBACxD,IAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;wBACpB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;qBACpD;oBACD,GAAG,GAAG,KAAK,CAAC;iBACb;gBACD,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO;oBACrD,GAAG,GAAG,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM;wBAC/B,OAAO,MAAM,CAAC,IAAI,KAAK,YAAY,CAAC;qBACrC,CAAC,KAAK,IAAI,CAAC;oBACZ,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM;wBACxB,OAAO,MAAM,CAAC,IAAI,KAAK,YAAY,CAAC;qBACrC,CAAC,KAAK,IAAI,CAAC;oBACZ,MAAM,WAAW,GAAG;wBAClB,KAAK,EAAE,GAAG,IAAI,gBAAgB,EAAE,KAAK;wBACrC,KAAK,EAAE,GAAG,IAAI,gBAAgB,EAAE,KAAK;qBACtC,CAAC;oBACF,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;wBACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBACrB,OAAO,CAAC,CAAC,CAAC,CAAC;qBACZ,EAAE,MAAM,CAAC,CAAC;iBACZ,EAAE,CAAC,CAAC;oBACH,MAAM,CAAC,CAAC,CAAC,CAAC;iBACX,CAAC,CAAC;aACJ,CAAC,CAAC,KAAK,CAAC,CAAC;gBACR,MAAM,CAAC,CAAC,CAAC,CAAC;aACX,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;;0GA9eU,aAAa;8GAAb,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;ACFD;;;MAMa,wBAAwB;IAWnC,YACU,aAA4B,EAC5B,WAAwB,EACxB,GAAsB;QAFtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;QACxB,QAAG,GAAH,GAAG,CAAmB;QAZxB,6BAAwB,GAAwB,IAAI,CAAC;QACrD,0CAAqC,GAAwB,IAAI,CAAC;QAChE,qBAAgB,GAAwB,IAAI,YAAY,EAAE,CAAC;QAC/B,eAAU,GAAG,IAAI,CAAC;QACnB,cAAS,GAAG,KAAK,CAAC;QAUrD,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;IAVkC,OAAO;QACxC,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAUD,WAAW;QACT,IAAI,CAAC,wBAAwB,EAAE,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC,qCAAqC,EAAE,WAAW,EAAE,CAAC;KAC3D;IAED,IAAI;QACF,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC9F;IAED,OAAO,CAAC,SAAkB;QACxB,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,qCAAqC,GAAG,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,SAAS,CAChG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/C;KACF;IAED,0BAA0B,CAAC,MAAsC;QAC/D,IAAI,MAAM,EAAC;YACT,IAAI,MAAM,YAAY,gBAAgB,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;gBAC1E,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;aACpC;YACD,IAAI,MAAM,YAAY,WAAW,EAAE;gBACjC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;gBAChE,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;aACnC;SACF;KACF;IAED,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK;YAC/D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnC,CAAC,CAAC;KACJ;IAEO,qBAAqB,CAAC,KAA8B;QAC1D,IAAI,CAAC,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;QACvD,IAAI,CAAC,UAAU,GAAG,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;KAC1B;;qHAzDU,wBAAwB;yGAAxB,wBAAwB;2FAAxB,wBAAwB;kBAHpC,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;iBACvC;wJAKW,gBAAgB;sBAAzB,MAAM;gBAC+B,UAAU;sBAA/C,WAAW;uBAAC,gBAAgB;gBACQ,SAAS;sBAA7C,WAAW;uBAAC,eAAe;gBACO,OAAO;sBAAzC,YAAY;uBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;ACbnC;;;;MAOa,oBAAoB;IAa/B,YACU,aAA4B,EAC5B,WAAwB,EACxB,GAAsB;QAFtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;QACxB,QAAG,GAAH,GAAG,CAAmB;QAdxB,kBAAa,GAAuB,IAAI,CAAC;QACX,eAAU,GAAG,IAAI,CAAC;QACnB,cAAS,GAAG,KAAK,CAAC;KAalD;IAZ8B,MAAM,OAAO;QAC9C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC/B;aAAM;YACL,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;KACF;IAQO,MAAM,gBAAgB;QAC5B,IAAI,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAEjE,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACpE,MAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACxF,IAAI,iBAAiB,EAAE;gBACrB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;aACpD;iBAAM;gBACL,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;aACjD;YACD,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAChF,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAEjG,KAAK,CAAC,eAAe,EAAE,eAAe,CAAC;iBACpC,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,CACR;iBACA,SAAS,CAAC;gBACT,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,IAAI,CAAC,eAAe,EAAE,CAAC;iBACxB;aACF,CAAC,CAAC;YAEL,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;YACzC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;SAC1B;KACF;IAEO,eAAe;QACrB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;QAC/D,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;SAC7C;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;SACvC;QACD,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,KAAK;gBAC1C,KAAK,CAAC,IAAI,EAAE,CAAC;aACd,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;KAC1B;;iHAnEU,oBAAoB;qGAApB,oBAAoB;2FAApB,oBAAoB;kBAHhC,SAAS;mBAAC;oBACT,QAAQ,EAAE,wBAAwB;iBACnC;wJAIuC,UAAU;sBAA/C,WAAW;uBAAC,gBAAgB;gBACQ,SAAS;sBAA7C,WAAW;uBAAC,eAAe;gBACa,OAAO;sBAA/C,YAAY;uBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;ACZnC;;;MAMa,wBAAwB;IAWnC,YACU,aAA4B,EAC5B,WAAwB,EACxB,GAAsB;QAFtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;QACxB,QAAG,GAAH,GAAG,CAAmB;QAZxB,6BAAwB,GAAwB,IAAI,CAAC;QACrD,0CAAqC,GAAwB,IAAI,CAAC;QAChE,qBAAgB,GAAwB,IAAI,YAAY,EAAE,CAAC;QAC/B,eAAU,GAAG,IAAI,CAAC;QACnB,cAAS,GAAG,KAAK,CAAC;QAUrD,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;IAVkC,OAAO;QACxC,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAUD,WAAW;QACT,IAAI,CAAC,wBAAwB,EAAE,WAAW,EAAE,CAAC;QAC7C,IAAI,CAAC,qCAAqC,EAAE,WAAW,EAAE,CAAC;KAC3D;IAED,IAAI;QACF,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC9F;IAED,OAAO,CAAC,SAAkB;QACxB,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,qCAAqC,GAAG,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,SAAS,CAChG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/C;KACF;IAED,0BAA0B,CAAC,MAAsC;QAC/D,IAAI,MAAM,EAAC;YACT,IAAI,MAAM,YAAY,gBAAgB,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,KAAK,EAAE;gBAC1E,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;aACpC;YACD,IAAI,MAAM,YAAY,WAAW,EAAE;gBACjC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;gBAChE,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;aACnC;SACF;KACF;IAED,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK;YAC/D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnC,CAAC,CAAC;KACJ;IAEO,qBAAqB,CAAC,KAA8B;QAC1D,IAAI,CAAC,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;QACvD,IAAI,CAAC,UAAU,GAAG,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;KAC1B;;qHAzDU,wBAAwB;yGAAxB,wBAAwB;2FAAxB,wBAAwB;kBAHpC,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;iBACvC;wJAKW,gBAAgB;sBAAzB,MAAM;gBAC+B,UAAU;sBAA/C,WAAW;uBAAC,gBAAgB;gBACQ,SAAS;sBAA7C,WAAW;uBAAC,eAAe;gBACO,OAAO;sBAAzC,YAAY;uBAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;MCUtB,eAAe;IAC1B,OAAO,OAAO,CACZ,gBAAwC;QAExC,OAAO;YACL,QAAQ,EAAE,eAAe;YACzB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,aAAa;oBACtB,QAAQ,EAAE,gBAAgB;iBAC3B;aACF;SACF,CAAC;KACH;;4GAbU,eAAe;6GAAf,eAAe,iBAnBxB,wBAAwB;QACxB,wBAAwB;QACxB,wBAAwB;QACxB,wBAAwB;QACxB,oBAAoB,aASZ,YAAY,aANpB,wBAAwB;QACxB,wBAAwB;QACxB,wBAAwB;QACxB,wBAAwB;QACxB,oBAAoB;6GAQX,eAAe,aALf;QACT,EAAE,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,YAAY,EAAE;QAC9D,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,gBAAgB,EAAE;KAC5D,YAJQ,CAAC,YAAY,CAAC;2FAMZ,eAAe;kBArB3B,QAAQ;mBAAC;oBACR,YAAY,EAAE;wBACZ,wBAAwB;wBACxB,wBAAwB;wBACxB,wBAAwB;wBACxB,wBAAwB;wBACxB,oBAAoB;qBACrB;oBACD,OAAO,EAAE;wBACP,wBAAwB;wBACxB,wBAAwB;wBACxB,wBAAwB;wBACxB,wBAAwB;wBACxB,oBAAoB;qBACrB;oBACD,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,SAAS,EAAE;wBACT,EAAE,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,YAAY,EAAE;wBAC9D,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,gBAAgB,EAAE;qBAC5D;iBACF;;;AC5BD;IACY;AAAZ,WAAY,UAAU;IACpB,uCAAyB,CAAA;IACzB,yCAA2B,CAAA;IAC3B,uCAAyB,CAAA;AAC3B,CAAC,EAJW,UAAU,KAAV,UAAU;;ACOtB;;;;MAOa,aAAa;IAQxB,YACmB,MAAqB,EAC9B,aAA4B,EAC5B,kBAAsC;QAF7B,WAAM,GAAN,MAAM,CAAe;QAC9B,kBAAa,GAAb,aAAa,CAAe;QAC5B,uBAAkB,GAAlB,kBAAkB,CAAoB;QATxC,YAAO,GAAsC,gBAAgB,CAAC;QAC/D,wBAAmB,GAAG,IAAI,eAAe,CAAyB,IAAI,CAAC,CAAC;QACxE,wBAAmB,GAAG,IAAI,eAAe,CAAyB,IAAI,CAAC,CAAC;QACxE,aAAQ,GAAG,IAAI,eAAe,CAAoB,EAAE,CAAC,CAAC;QACtD,kBAAa,GAAG,IAAI,eAAe,CAAiB,EAAE,CAAC,CAAC;QAevD,2BAAsB,GAAkB;YAC9C,IAAI,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,OAAO;gBACvC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;oBACrB,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;oBAChD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBACtB;aACF,CAAC,CAAA;SACH,CAAA;;QAdG,SAAS,CAAC,YAAY,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;KACxF;IAED,WAAW;QACT,SAAS,CAAC,YAAY,CAAC,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;KACzF;IAWD,qBAAqB;QACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,OAAO;gBACjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC7D,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB,EAAE,MAAM,CAAC,CAAC;SACZ,CAAC,CAAC;KACJ;IAGD,sBAAsB,CAAC,OAAqB,EAAE;QAC5C,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QACnD,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACzD;QACD,OAAO,YAAY,CAAC;KACrB;;;;;IAMM,eAAe;QACpB,OAAO,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;KAClD;;;;;;IAQD,oBAAoB,CAAC,QAAgB,EAAE,IAAgB;QACrD,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,OAAO;YACxC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,IAAI,KAAK,UAAU,CAAC,UAAU,EAAE;gBAClC,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,EAAE,QAAQ,KAAK,QAAQ,EAAE;oBAC9D,OAAO,EAAE,CAAC;iBACX;gBACD,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE;wBAC3C,QAAQ;qBACT,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS;oBACjB,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;oBAC/D,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;wBAC7B,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;wBAC1D,IAAI,MAAM,EAAE;4BACV,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;yBACtC;qBACF;oBACD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;oBACnE,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;oBAC1D,IAAI,aAAa,IAAI,KAAK,EAAE;wBAC1B,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;wBACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;wBAC1E,QAAQ,EAAE,IAAI,EAAE,CAAC;wBACjB,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;qBAC/D;yBAAM;wBACL,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;qBAC9C;oBACD,OAAO,EAAE,CAAC;iBACX,EAAE,CAAC,KAAK;oBACP,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,OAAO,CAAC,KAAK,CAAC,CAAC;iBAChB,CAAC,CAAC;aACJ;YACD,IAAI,IAAI,KAAK,UAAU,CAAC,UAAU,EAAE;gBAClC,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,EAAE,QAAQ,KAAK,QAAQ,EAAE;oBAC9D,OAAO,EAAE,CAAC;iBACX;gBACD,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE;wBAC3C,QAAQ;qBACT,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS;oBACjB,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;oBAC/D,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;wBAC7B,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;wBAC1D,IAAI,MAAM,EAAE;4BACV,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;yBACtC;qBACF;oBACD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;oBACnE,IAAG,KAAK,EAAE;wBACR,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;qBACxC;oBACD,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;oBAC1D,IAAI,aAAa,IAAI,KAAK,EAAE;wBAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;wBAC1E,QAAQ,EAAE,IAAI,EAAE,CAAC;wBACjB,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;qBAC/D;yBAAM;wBACL,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;qBAC9C;oBACD,OAAO,EAAE,CAAC;iBACX,EAAE,CAAC,KAAK;oBACP,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,OAAO,CAAC,KAAK,CAAC,CAAC;iBAChB,CAAC,CAAC;aACJ;YACD,IAAI,IAAI,KAAK,UAAU,CAAC,WAAW,EAAE;gBACnC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC5C,OAAO,EAAE,CAAC;aACX;SACF,CAAC,CAAC;KACJ;;;;;;;IAQD,gBAAgB,CAAC,MAAuB,EAAE,IAAgB;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QACnD,IAAI,MAAM,EAAE;YACV,IAAI,IAAI,KAAK,UAAU,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;gBACjE,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;gBAChE,IAAI,KAAK,EAAE;oBACT,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC;iBACzD;aACF;YACD,IAAI,IAAI,KAAK,UAAU,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;gBACjE,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;gBAChE,IAAI,KAAK,EAAE;oBACT,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC;iBACzD;aACF;SACF;QACD,OAAO,KAAK,CAAC;KACd;;;;;;IAOD,iBAAiB,CAAC,OAA0B,EAAE,OAAqB,EAAE;QACnE,MAAM,YAAY,GAAmB,EAAE,CAAC;QACxC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC;QACzE,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,WAAW,CAAC,CAAC;QAC3E,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC;QACzE,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAC9D,YAAY,CAAC,IAAI,CAAC;gBAChB,IAAI,EAAE,UAAU,CAAC,UAAU;gBAC3B,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC;SACJ;QACD,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YAChE,YAAY,CAAC,IAAI,CAAC;gBAChB,IAAI,EAAE,UAAU,CAAC,WAAW;gBAC5B,OAAO,EAAE,WAAW;aACrB,CAAC,CAAC;SACJ;QACD,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAC9D,YAAY,CAAC,IAAI,CAAC;gBAChB,IAAI,EAAE,UAAU,CAAC,UAAU;gBAC3B,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC;SACJ;QACD,OAAO,YAAY,CAAC;KACrB;;;;;;;;;;;;;IAcM,eAAe,CAAC,gBAAyC;QAC9D,IAAI,CAAC,gBAAgB,EAAE;YACrB,gBAAgB,GAAG;gBACjB,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,IAAI;aACZ,CAAA;SACF;QAAA,CAAC;QACF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC;gBAChC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK;oBAC9D,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;iBAC1C,EAAC,MAAM,CAAC,CAAC;aACX,EAAE,MAAM,CAAC,CAAC;SACZ,CAAC,CAAC;KACJ;IAEO,mBAAmB,CAAI,QAA6B,EAAE,SAA4B,EAAE,UAAsB;QAChH,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QACxC,IAAI,cAAc,EAAE;YAClB,cAAc,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE;gBAC/B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;aAC3D,CAAC,CAAC;SACJ;aAAM;YACL,UAAU,EAAE,CAAC;SACd;KACF;IAEM,WAAW,CAAC,SAAsC,EAAE,UAAsB;QAE/E,MAAM,QAAQ,GAAmC;YAC/C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;YAClC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;SACrC,CAAC;QAEF,IAAI,CAAC,mBAAmB,CAAc,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;KACxE;IAEO,0BAA0B;QAChC,MAAM,qBAAqB,GAA2B;YACpD,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,EAAE;YAClE,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,iCAAiC,EAAE;SACnE,CAAC;QACF,OAAO,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;KACpD;IAEO,kBAAkB;QACxB,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC,eAAe,CAAC;YAC1B,KAAK,EAAE,IAAI;YACX,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;KACJ;IAEO,oBAAoB;QAC1B,OAAO,IAAI,CAAC,eAAe,CAAC;YAC1B,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;KACJ;IAGO,mBAAmB,CAAC,MAAmB,EAAE,OAAgE;QAC/G,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QACnD,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC;QAC9E,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,UAAU,IAAI,YAAY,EAAE;YAC9B,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC7G,IAAI,mBAAmB,EAAE;gBACvB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACnD,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;aACpF;SACF;QACD,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,UAAU,CAAC,CAAC;QAC9E,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,UAAU,IAAI,YAAY,EAAE;YAC9B,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC7G,IAAI,mBAAmB,EAAE;gBACvB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACnD,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;aACpF;SACF;QACD,OAAO,CAAC,MAAM,CAAC,CAAC;KACjB;;0GA9RU,aAAa;8GAAb,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;ACdD;;;;;;"}