import { ElementRef, EventEmitter } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { StreamType } from "../enums/stream-type";
import { Configuration } from '../ngx-webrtc-configuration';
import { PreferencesService } from './preferences.service';
import * as i0 from "@angular/core";
export declare class StreamService {
    private readonly config;
    private preferencesService;
    /**
     * You can subscribe to localSteam changes
     */
    localStream$: BehaviorSubject<MediaStream | null>;
    /**
     * You can subscribe to screen share changes
     */
    localShareScreenStream$: BehaviorSubject<MediaStream | null>;
    /**
     * Emitted with new Track when `StreamService.replaceTrack` is called
     */
    replaceTrack$: BehaviorSubject<MediaStreamTrack | null>;
    /**
     * Emitted when `StreamService.setAudioOutput` is called with new device (Call it when the switch the audio device).
     */
    audioOutput$: BehaviorSubject<string | null>;
    /**
     * Emitted when the status of the local stream changed e.g. audio or video disabled or enabled.
     */
    localStreamStatusChanged: EventEmitter<MediaStreamTrack | MediaStream>;
    /**
     * Emitted when the status of the local audio stream changed e.g. audio disabled or enabled.
     */
    localAudioStreamStatusChanged: EventEmitter<boolean>;
    /**
     * Emitted when the status of the local video stream changed e.g. video disabled or enabled.
     */
    localVideoStreamStatusChanged: EventEmitter<boolean>;
    /**
     * Set to `true` when the StreamService.tryGetUserMedia is succefull for video (camera).
     * @deprecated
     */
    hasVideo: boolean;
    /**
     * Set to `true` when the StreamService.tryGetUserMedia is succefull for audio (microphone).
     * @deprecated
     */
    hasAudio: boolean;
    constructor(config: Configuration, preferencesService: PreferencesService);
    /**
     * Get aspect ratio for given width and height.
     * @param width width in pixel
     * @param height height in pixel
     * @returns aspect ratio for the given width and height
     */
    static getAspectRatio(width: number, height: number): string;
    /**
     *
     * @param node `HTMLVideoElement` or `HTMLAudioElement` that should play the stream.
     * @param stream stream to set in node
     * @param muted mute audio
     * @param local if set to `true` `localStreamStatusChanged` is emitted on play
     */
    setStreamInNode(node: HTMLVideoElement | HTMLAudioElement, stream: MediaStream | MediaStreamTrack, muted?: boolean, local?: boolean): void;
    /**
     * stop stream playing in node
     * @param node node with nativeElement type `HTMLVideoElement` or  `HTMLAudioElement`
     */
    stopStreamInNode(node: ElementRef): void;
    toggleLocalTrack(type: StreamType): Promise<MediaStream>;
    enableLocalTrack(type: StreamType): Promise<MediaStream>;
    disableLocalTrack(type: StreamType): Promise<MediaStream>;
    /**
     * set stream or track mute state or toggle mute
     * @param stream stream or track
     * @param type stream or track type
     * @param value enforce `true` or `false`
     */
    toggleMuteStream(stream: MediaStream | MediaStreamTrack, type: StreamType, value?: boolean): void;
    /**
     * Mute stream in node.
     * @param stream stram or track
     * @param type stream or track type
     */
    muteStream(stream: MediaStream | MediaStreamTrack, type: StreamType): void;
    /**
     * Unmute stream in node.
     * @param stream stram or track
     * @param type stream or track type
     */
    unmuteStream(stream: MediaStream | MediaStreamTrack, type: StreamType): void;
    /**
     * replace a track in stream
     * @param stream stream with thre track to replace
     * @param track new track
     */
    replaceTrackInStream(stream: MediaStream, track: MediaStreamTrack): void;
    /**
     * set local stream in service state
     * @param stream stream to set
     */
    setLocalStream(stream: MediaStream | null): void;
    /**
     * get current state value of local stream
     * @returns current local stream
     */
    getLocalStream(): MediaStream | null;
    /**
     * set replace track service state. You can subscribe to `StreamService.replaceTrack$` to update the track somewhere.
     * @param track new track
     */
    replaceTrack(track: MediaStreamTrack): void;
    /**
     * toggle mute audio of local stream
     */
    toggleMuteLocalAudioStream(): void;
    /**
     * mute local audio stream
     */
    muteLocalAudioStream(): void;
    /**
     * unmute local audio stream
     */
    unmuteLocalAudioStream(): void;
    /**
     * toggle mute local video stream
     */
    toggleMuteLocalVideoStream(): void;
    /**
     * mute local video stream
     */
    muteLocalVideoStream(): void;
    /**
     * unmute local video stream
     */
    unmuteLocalVideoStream(): void;
    /**
     * get screen or window as stream
     * @returns MediaStram of desktop or display
     */
    getScreenCapture(): Promise<MediaStream | null>;
    /**
     * get first/single video track of the given stream
     * @param stream stream with video treack
     * @returns first video track of stream
     */
    getVideoTrackForStream(stream?: MediaStream): MediaStreamTrack | null;
    /**
     * get first/single audio track of the given stream
     * @param stream stream with audio treack
     * @returns first audio track of stream
     */
    getAudioTrackForStream(stream?: MediaStream): MediaStreamTrack | null;
    /**
     * get media devices, Attention you need getMedia permissions for this call
     * @returns Promise that resolves to media Devices as array
     * @deprecated use DeviceService.getMediaDevices() instead
     */
    getMediaDevices(): Promise<MediaDeviceInfo[]>;
    /**
     * set current audio device in service state. You can subscribe to `StreamService.audioOutput$` to get changes.
     * @param deviceId
     */
    setAudioOutput(deviceId: string): void;
    /**
     * An simple wrapper for `navigator.mediaDevices.getUserMedia`, with basis error handling.
     * @todo refactor
     * @param mediaConstraints a MediaStreamConstraints e.g. with specific deviceId, resolution or just audio. Default is:
     *                          ```json
     *                         {
     *                             audio: true,
     *                             video: true
     *                         }
     *                         ```
     * @returns Promise that resilve to a stream matching the constraint
     * @deprecated use DeviceService.tryGetUserMedia() instead
     */
    tryGetUserMedia(mediaConstraints?: MediaStreamConstraints): Promise<MediaStream>;
    static ɵfac: i0.ɵɵFactoryDeclaration<StreamService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<StreamService>;
}
