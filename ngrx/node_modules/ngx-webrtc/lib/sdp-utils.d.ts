import { SdpSettings } from "./interfaces/sdp-settings";
export interface FormatObject {
    pt: string;
    params: FormatParams;
}
export interface FormatParams {
    [key: string]: string | number;
}
export declare class SdpUtils {
    static iceCandidateType(candidateStr: string): string;
    static maybeSetOpusOptions(sdp: string, params: SdpSettings): string;
    static maybeSetAudioSendBitRate(sdp: string, params: SdpSettings): string;
    static maybeSetAudioReceiveBitRate(sdp: string, params: SdpSettings): string;
    static maybeSetVideoSendBitRate(sdp: string, params: SdpSettings): string;
    static maybeSetVideoReceiveBitRate(sdp: string, params: SdpSettings): string;
    static preferBitRate(sdp: string, bitrate: string | number, mediaType: string): string;
    static maybeSetVideoSendInitialBitRate(sdp: string, params: SdpSettings): string;
    static removePayloadTypeFromMline(mLine: string, payloadType: string): string;
    static removeCodecByName(sdpLines: string[], codec: string): string[];
    static removeCodecByPayloadType(sdpLines: string[], payloadType: string): string[];
    static maybeRemoveVideoFec(sdp: string, params: SdpSettings): string;
    static maybePreferAudioSendCodec(sdp: string, params: SdpSettings): string;
    static maybePreferAudioReceiveCodec(sdp: string, params: SdpSettings): string;
    static maybePreferVideoSendCodec(sdp: string, params: SdpSettings): string;
    static maybePreferVideoReceiveCodec(sdp: string, params: SdpSettings): string;
    static maybePreferCodec(sdp: string, type: string, dir: string, codec?: string): string;
    static setCodecParam(sdp: string, codec: string, param: string, value: string | number): string;
    static removeCodecParam(sdp: string, codec: string, param: string): string;
    static parseFmtpLine(fmtpLine: string): null | FormatObject;
    static writeFmtpLine(fmtpObj: FormatObject): string | null;
    static findFmtpLine(sdpLines: string[], codec: string): number | null;
    static findLine(sdpLines: string[], prefix: string, substr?: string): number | null;
    static findLineInRange(sdpLines: string[], startLine: number, endLine: number, prefix?: string, substr?: string, direction?: 'asc' | 'desc'): number | null;
    static getCodecPayloadType(sdpLines: string[], codec: string): string | null;
    static getCodecPayloadTypeFromLine(sdpLine: string): string | null;
    static setDefaultCodec(mLine: string, payload: string): string;
}
