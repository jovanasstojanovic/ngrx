import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Configuration } from '../ngx-webrtc-configuration';
import { NGX_WEBRTC_STORAGE } from '../ngx-webrtc-storage';
import { NGX_WEBRTC_STORAGE_PREFIX } from '../ngx-webrtc-storage-prefix';
import * as i0 from "@angular/core";
import * as i1 from "../ngx-webrtc-configuration";
export class PreferencesService {
    constructor(config, prefix, storage) {
        this.config = config;
        this.prefix = prefix;
        this.storage = storage;
        this.preferredAudioInputDevice$ = new BehaviorSubject(null);
        this.preferredAudioOutputDevice$ = new BehaviorSubject(null);
        this.preferredVideoInputDevice$ = new BehaviorSubject(null);
        this.preferredAudioInputDeviceVolume$ = new BehaviorSubject(null);
        this.VIDEO_INPUT_KEY = this.storageKey('preferred-video-input-device');
        this.AUDIO_INPUT_KEY = this.storageKey('preferred-audio-input-device');
        this.AUDIO_INPUT_VOLUME_KEY = this.storageKey('preferred-audio-input-device');
        this.AUDIO_OUTPUT_KEY = this.storageKey('preferred-audio-input-device');
        this.subs = [];
        this.initPreferredDevicesFromStorag();
    }
    ngOnDestroy() {
        this.subs.forEach(sub => {
            sub.unsubscribe();
        });
    }
    storageKey(key) {
        return [this.prefix, key].join('-');
    }
    initSubscription(subject, key) {
        this.subs.push(subject.subscribe(newValue => {
            if (typeof newValue === 'string' || typeof newValue === 'number') {
                window[this.storage].setItem(key, `${newValue}`);
            }
            else {
                window[this.storage].removeItem(key);
            }
        }));
    }
    setInitalValuesFromStorage() {
        this.preferredVideoInputDevice$.next(window[this.storage].getItem(this.VIDEO_INPUT_KEY));
        this.preferredAudioInputDevice$.next(window[this.storage].getItem(this.AUDIO_INPUT_KEY));
        const inputDeviceVolumeStorage = window[this.storage].getItem(this.AUDIO_INPUT_VOLUME_KEY);
        if (inputDeviceVolumeStorage) {
            const inputDeviceVolume = parseInt(inputDeviceVolumeStorage, 10);
            this.preferredAudioInputDeviceVolume$.next(inputDeviceVolume);
        }
        this.preferredAudioOutputDevice$.next(window[this.storage].getItem(this.AUDIO_OUTPUT_KEY));
    }
    initPreferredDevicesFromStorag() {
        if (this.config.savePreferredDeviceInStorage) {
            this.setInitalValuesFromStorage();
            this.initSubscription(this.preferredVideoInputDevice$, this.VIDEO_INPUT_KEY);
            this.initSubscription(this.preferredAudioInputDevice$, this.AUDIO_INPUT_KEY);
            this.initSubscription(this.preferredAudioOutputDevice$, this.AUDIO_OUTPUT_KEY);
            this.initSubscription(this.preferredAudioInputDeviceVolume$, this.AUDIO_INPUT_VOLUME_KEY);
        }
    }
    getAudioConstraintWithPreferences() {
        const preferredAudioInputDevice = this.preferredAudioInputDevice$.getValue();
        const preferredAudioInputDeviceVolume = this.preferredAudioInputDeviceVolume$.getValue();
        let audioConstraint = true;
        if (preferredAudioInputDevice || preferredAudioInputDeviceVolume !== null) {
            if (preferredAudioInputDevice && preferredAudioInputDeviceVolume !== null) {
                audioConstraint = {
                    deviceId: preferredAudioInputDevice,
                    volume: preferredAudioInputDeviceVolume
                };
            }
            else if (preferredAudioInputDevice) {
                audioConstraint = {
                    deviceId: preferredAudioInputDevice
                };
            }
            else if (preferredAudioInputDeviceVolume) {
                audioConstraint = {
                    volume: preferredAudioInputDeviceVolume
                };
            }
        }
        return audioConstraint;
    }
    getVideoConstraintWithPreferences() {
        const preferredVideoInputDevice = this.preferredVideoInputDevice$.getValue();
        return preferredVideoInputDevice ? { deviceId: preferredVideoInputDevice } : true;
    }
    setPreferredAudioInputDevice(deviceId) {
        this.preferredAudioInputDevice$.next(deviceId);
    }
    setPreferredAudioOutputDevice(deviceId) {
        this.preferredAudioOutputDevice$.next(deviceId);
    }
    setPreferredVideoInputDevice(deviceId) {
        this.preferredVideoInputDevice$.next(deviceId);
    }
    setPreferredAudioInputDeviceVolume(volume) {
        this.preferredAudioInputDeviceVolume$.next(volume);
    }
    resetPreferences() {
        this.preferredAudioInputDevice$.next(null);
        this.preferredAudioOutputDevice$.next(null);
        this.preferredVideoInputDevice$.next(null);
        this.preferredAudioInputDeviceVolume$.next(null);
    }
}
PreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: PreferencesService, deps: [{ token: i1.Configuration }, { token: NGX_WEBRTC_STORAGE_PREFIX }, { token: NGX_WEBRTC_STORAGE }], target: i0.ɵɵFactoryTarget.Injectable });
PreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: PreferencesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: PreferencesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Configuration }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_WEBRTC_STORAGE_PREFIX]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_WEBRTC_STORAGE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,