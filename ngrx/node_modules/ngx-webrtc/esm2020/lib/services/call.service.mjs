import { EventEmitter, Inject, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { PeerConnectionClient } from '../peer-connection-client';
import { Configuration } from '../ngx-webrtc-configuration';
import { NGX_WEBRTC_STORAGE } from '../ngx-webrtc-storage';
import * as i0 from "@angular/core";
import * as i1 from "../ngx-webrtc-configuration";
/**
 * The CallService holds the state of the peer connection. It provides methods to update the state
 * and methods to create a `PeerConnectionClient`.
 */
export class CallService {
    constructor(config, storage) {
        this.config = config;
        this.storage = storage;
        this.storage_key_since = 'ngx-webrtc-since';
        this.since = 0;
        // TODO: add option to configure this
        this.identifier = this.config.userIdentifier;
        /**
         * users in call state, add user via `CallService.addUser(User,...)` and remove user via `CallService.removeUser(User)`.
         * get all User via `CallService.getUsers()`, get one user via `CallService.getUser()`.
         */
        this.users$ = new BehaviorSubject([]);
        /**
         * Emitted by `ShareScreenDirective` when current User starts sharing his screen.
         */
        this.startShareScreen = new EventEmitter();
        /**
         * Emitted by `ShareScreenDirective` when current User stops sharing his screen.
         */
        this.stopShareScreen = new EventEmitter();
        /**
         * default public and free IceServers list
         * ```json
         * [
         *  { urls: 'stun:stun.l.google.com:19302' },
         *  { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },
         *  { urls: 'stun:stun.services.mozilla.com' },
         * ]
         *
         * ```
         */
        this.defaultServers = [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:global.stun.twilio.com:3478?transport=udp' },
            { urls: 'stun:stun.services.mozilla.com' },
        ];
        /**
         * chat status state
         */
        this.started$ = new BehaviorSubject(false);
    }
    /**
     * update since timestamp with current time
     */
    updateSince() {
        this.since = Date.now();
        // TODO: make storage customizable via provider
        window[this.storage].setItem(this.storage_key_since, `${this.since}`);
    }
    /**
     * get current since timestamp set by `CallService.updateSince()`
     * @returns Timestamp
     */
    getSince() {
        const storageSince = window[this.storage].getItem(this.storage_key_since);
        if (!this.since && storageSince && storageSince !== null) {
            this.since = parseInt(storageSince, 10);
        }
        return this.since;
    }
    /**
     * The `CallService` hold the users state with all users, with this methode you can add a user to the state.
     * @param user User object that contains userIdentifier
     * @param connection created connection for the user
     * @param node component that is used to display the users webcam, etc.
     */
    addUser(user, connection, node) {
        const users = this.getUsers();
        users.push({
            user,
            hasCam: false,
            hasMic: false,
            volume: 1,
            audioMuted: false,
            videoMuted: false,
            shareScreen: false,
            connection,
            node
        });
        this.users$.next(users);
    }
    /**
     * remove a user object from state
     * @param user User object to remove
     */
    removeUser(user) {
        let users = this.getUsers();
        users = users.filter(e => e.user[this.identifier] !== user[this.identifier]);
        this.users$.next(users);
    }
    /**
     * Use this method if the passed user has a camera to update the state.
     * @param user User to update
     */
    userHasCam(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.hasCam = true;
            this.users$.next(users);
        }
    }
    /**
     * Use this method if the passed user has a microphone to update the state.
     * @param user
     */
    userHasMic(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.hasMic = true;
            this.users$.next(users);
        }
    }
    /**
     * Use this method when the passed user deactivates his microphone to update the state.
     * @param user
     */
    userAudioMuted(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.audioMuted = true;
            this.users$.next(users);
        }
    }
    /**
     * Use this method when the passed user activates his microphone to update the state.
     * @param user
     */
    userAudioUnmuted(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.audioMuted = false;
            this.users$.next(users);
        }
    }
    /**
     * Use this method when the passed user deactivates his camera to update the state.
     * @param user
     */
    userVideoMuted(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.videoMuted = true;
            this.users$.next(users);
        }
    }
    /**
     * Use this method when the passed user activates his camera to update the state.
     * @param user
     */
    userVideoUnmuted(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.videoMuted = false;
            this.users$.next(users);
        }
    }
    /**
     * Use this method when the passed user starts to share his screen to update the state.
     * @param user
     */
    userStartShareScreen(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.shareScreen = true;
            this.users$.next(users);
        }
    }
    /**
     * Use this method when the passed user stops sharing his screen to update the state.
     * @param user
     */
    userStopShareScreen(user) {
        const users = this.getUsers();
        const currentUser = this.findUser(users, user);
        if (currentUser) {
            currentUser.shareScreen = false;
            this.users$.next(users);
        }
        this.users$.next(users);
    }
    /**
     * Give all users who are currently in the state.
     * @returns All users currently in state
     */
    getUsers() {
        return this.users$.getValue();
    }
    /**
     *
     * @param user User with `userIdentifier`
     * @returns User in state
     */
    getUser(user) {
        return this.getUsers().find(e => e.user[this.identifier] === user[this.identifier]) || null;
    }
    /**
     * Create a new `PeerConnectionClient` with the given settings
     * @param settings Settings for creating the `PeerConnectionClient`
     * @returns `PeerConnectionClient` object
     */
    async createPeerClient(settings) {
        return new PeerConnectionClient(settings);
    }
    /**
     * With this methode you can create a RTCCertificate to secure a connection.
     * @link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/generateCertificate
     * @param algorithm Certificate options used by `RTCPeerConnection.generateCertificate()` Default algorithm `ECDSA` with curve `P-256`
     * @returns Promise resolve to `RTCCertificate`
     */
    async createCertifcate(algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-256'
    }) {
        return RTCPeerConnection.generateCertificate(algorithm);
    }
    /**
     * set call state started to `true`, you can subscribe to `CallService.started$` for updates.
     */
    start() {
        this.started$.next(true);
    }
    /**
     * set call state started to `false`, you can subscribe to `CallService.started$` for updates.
     */
    stop() {
        this.started$.next(false);
    }
    /**
     * Configured user identifier.
     * @returns identifier to select a User
     */
    getUserIdentifier() {
        return this.identifier;
    }
    findUser(users, user) {
        return users.find(e => e.user[this.identifier] === user[this.identifier]) || null;
    }
}
CallService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CallService, deps: [{ token: i1.Configuration }, { token: NGX_WEBRTC_STORAGE }], target: i0.ɵɵFactoryTarget.Injectable });
CallService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CallService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: CallService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Configuration }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_WEBRTC_STORAGE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,