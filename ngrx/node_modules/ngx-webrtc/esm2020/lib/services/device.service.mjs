import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DeviceType } from '../enums';
import { Configuration } from '../ngx-webrtc-configuration';
import { PreferencesService } from './preferences.service';
import { StreamService } from './stream.service';
import * as i0 from "@angular/core";
import * as i1 from "../ngx-webrtc-configuration";
import * as i2 from "./stream.service";
import * as i3 from "./preferences.service";
/**
 * The DeviceService help you with device interaction (audio and video devices) and can hold a state for devices if you want to implement
 * a lobby with device testing.
 */
export class DeviceService {
    constructor(config, streamService, preferencesService) {
        this.config = config;
        this.streamService = streamService;
        this.preferencesService = preferencesService;
        this.storage = 'sessionStorage';
        this.selectedAudioInput$ = new BehaviorSubject(null);
        this.selectedVideoInput$ = new BehaviorSubject(null);
        this.devices$ = new BehaviorSubject([]);
        this.devicesGoups$ = new BehaviorSubject([]);
        this.onDeviceChangeListener = () => {
            this.detectSelectedDevices().then(devices => {
                if (this.config.debug) {
                    console.log('devices after devicechange event');
                    console.log(devices);
                }
            });
        };
        // not possible with HostListener
        navigator.mediaDevices.addEventListener('devicechange', this.onDeviceChangeListener);
    }
    ngOnDestroy() {
        navigator.mediaDevices.removeEventListener('devicechange', this.onDeviceChangeListener);
    }
    detectSelectedDevices() {
        return new Promise((resolve, reject) => {
            this.getMediaDevices().then(devices => {
                this.devices$.next(devices);
                this.devicesGoups$.next(this.groupDeviceByKind(devices, []));
                resolve(devices);
            }, reject);
        });
    }
    getMediaDevicesGrouped(omit = []) {
        const devicesGoups = this.devicesGoups$.getValue();
        if (omit.length) {
            return devicesGoups.filter(e => !omit.includes(e.kind));
        }
        return devicesGoups;
    }
    /**
     * get media devices, Attention you need getMedia permissions for this call
     * @returns Promise that resolves to media Devices as array
     */
    getMediaDevices() {
        return navigator.mediaDevices.enumerateDevices();
    }
    /**
     * Change selected device wit a deviceId and a device type.
     * @param deviceId id of selected device
     * @param kind type of selected device `VideDevice` or `AudioDevice`
     */
    changeSelectedDevice(deviceId, kind) {
        return new Promise((resolve, rejects) => {
            const devices = this.devices$.getValue();
            if (kind === DeviceType.VideoInput) {
                if (this.selectedVideoInput$.getValue()?.deviceId === deviceId) {
                    resolve();
                }
                navigator.mediaDevices.getUserMedia({ video: {
                        deviceId
                    } }).then((newStream) => {
                    this.preferencesService.setPreferredVideoInputDevice(deviceId);
                    if (devices && devices.length) {
                        const device = devices.find(d => d.deviceId === deviceId);
                        if (device) {
                            this.selectedVideoInput$.next(device);
                        }
                    }
                    const track = this.streamService.getVideoTrackForStream(newStream);
                    const currentStream = this.streamService.getLocalStream();
                    if (currentStream && track) {
                        this.streamService.replaceTrack(track);
                        const oldTrack = this.streamService.getVideoTrackForStream(currentStream);
                        oldTrack?.stop();
                        this.streamService.replaceTrackInStream(currentStream, track);
                    }
                    else {
                        this.streamService.setLocalStream(newStream);
                    }
                    resolve();
                }, (error) => {
                    console.error(error);
                    rejects(error);
                });
            }
            if (kind === DeviceType.AudioInput) {
                if (this.selectedAudioInput$.getValue()?.deviceId === deviceId) {
                    resolve();
                }
                navigator.mediaDevices.getUserMedia({ audio: {
                        deviceId
                    } }).then((newStream) => {
                    this.preferencesService.setPreferredAudioInputDevice(deviceId);
                    if (devices && devices.length) {
                        const device = devices.find(d => d.deviceId === deviceId);
                        if (device) {
                            this.selectedAudioInput$.next(device);
                        }
                    }
                    const track = this.streamService.getAudioTrackForStream(newStream);
                    if (track) {
                        this.streamService.replaceTrack(track);
                    }
                    const currentStream = this.streamService.getLocalStream();
                    if (currentStream && track) {
                        const oldTrack = this.streamService.getAudioTrackForStream(currentStream);
                        oldTrack?.stop();
                        this.streamService.replaceTrackInStream(currentStream, track);
                    }
                    else {
                        this.streamService.setLocalStream(newStream);
                    }
                    resolve();
                }, (error) => {
                    console.error(error);
                    rejects(error);
                });
            }
            if (kind === DeviceType.AudioOutput) {
                this.streamService.setAudioOutput(deviceId);
                resolve();
            }
        });
    }
    /**
     * Check the given device, if it's selected.
     * @param device device to check if it's selected
     * @param kind the kind of the device to check
     * @returns `true` if the devie is selected, outerwise `false`
     */
    isDeviceSelected(device, kind) {
        const stream = this.streamService.getLocalStream();
        if (stream) {
            if (kind === DeviceType.VideoInput && this.streamService.hasVideo) {
                const track = this.streamService.getVideoTrackForStream(stream);
                if (track) {
                    return track.getSettings().deviceId === device.deviceId;
                }
            }
            if (kind === DeviceType.AudioInput && this.streamService.hasAudio) {
                const track = this.streamService.getAudioTrackForStream(stream);
                if (track) {
                    return track.getSettings().deviceId === device.deviceId;
                }
            }
        }
        return false;
    }
    /**
     * group a list of devices you get by calling `StreamService.getMediaDevices()` by type.
     * @param devices list of devices you get by calling `StreamService.getMediaDevices()`
     * @returns a list of devices grouped by `DeviceType`
     */
    groupDeviceByKind(devices, omit = []) {
        const devicesGoups = [];
        const audioInput = devices.filter(d => d.kind === DeviceType.AudioInput);
        const audioOutput = devices.filter(d => d.kind === DeviceType.AudioOutput);
        const videoinput = devices.filter(d => d.kind === DeviceType.VideoInput);
        if (audioInput.length && !omit.includes(DeviceType.AudioInput)) {
            devicesGoups.push({
                kind: DeviceType.AudioInput,
                devices: audioInput
            });
        }
        if (audioOutput.length && !omit.includes(DeviceType.AudioOutput)) {
            devicesGoups.push({
                kind: DeviceType.AudioOutput,
                devices: audioOutput
            });
        }
        if (videoinput.length && !omit.includes(DeviceType.VideoInput)) {
            devicesGoups.push({
                kind: DeviceType.VideoInput,
                devices: videoinput
            });
        }
        return devicesGoups;
    }
    /**
     * An simple wrapper for `navigator.mediaDevices.getUserMedia`, with basis error handling.
     * @todo refactor
     * @param mediaConstraints a MediaStreamConstraints e.g. with specific deviceId, resolution or just audio. Default is:
     *                          ```json
     *                         {
     *                             audio: true,
     *                             video: true
     *                         }
     *                         ```
     * @returns Promise that resilve to a stream matching the constraint
     */
    tryGetUserMedia(mediaConstraints) {
        if (!mediaConstraints) {
            mediaConstraints = {
                audio: true,
                video: true
            };
        }
        ;
        return new Promise((resolve, reject) => {
            this.detectSelectedDevices().then(() => {
                navigator.mediaDevices.getUserMedia(mediaConstraints).then(steam => {
                    this.setDeviceAndResolve(steam, resolve);
                }, reject);
            }, reject);
        });
    }
    findFirstSuccessful(promises, onSuccess, onNotFound) {
        const currentPromise = promises.shift();
        if (currentPromise) {
            currentPromise().then(onSuccess, () => {
                this.findFirstSuccessful(promises, onSuccess, onNotFound);
            });
        }
        else {
            onNotFound();
        }
    }
    tryGetMedia(onSuccess, onNotFound) {
        const tryChain = [
            this.tryGetMediaWithPreferences.bind(this),
            this.tryGetMediaDefault.bind(this),
            this.tryGetMediaAudioOnly.bind(this)
        ];
        this.findFirstSuccessful(tryChain, onSuccess, onNotFound);
    }
    tryGetMediaWithPreferences() {
        const preferencesConstrains = {
            video: this.preferencesService.getVideoConstraintWithPreferences(),
            audio: this.preferencesService.getAudioConstraintWithPreferences(),
        };
        return this.tryGetUserMedia(preferencesConstrains);
    }
    tryGetMediaDefault() {
        this.preferencesService.resetPreferences();
        return this.tryGetUserMedia({
            video: true,
            audio: true
        });
    }
    tryGetMediaAudioOnly() {
        return this.tryGetUserMedia({
            video: false,
            audio: true
        });
    }
    setDeviceAndResolve(stream, resolve) {
        const devicesGoups = this.devicesGoups$.getValue();
        const videoDevices = devicesGoups.find(e => e.kind === DeviceType.VideoInput);
        const videoTrack = this.streamService.getVideoTrackForStream(stream);
        if (videoTrack && videoDevices) {
            const selectedVideoDevice = videoDevices.devices.find(e => e.deviceId === videoTrack.getSettings().deviceId);
            if (selectedVideoDevice) {
                this.selectedVideoInput$.next(selectedVideoDevice);
                this.preferencesService.setPreferredVideoInputDevice(selectedVideoDevice.deviceId);
            }
        }
        const audioDevices = devicesGoups.find(e => e.kind === DeviceType.AudioInput);
        const audioTrack = this.streamService.getAudioTrackForStream(stream);
        if (audioTrack && audioDevices) {
            const selectedAudioDevice = audioDevices.devices.find(e => e.deviceId === audioTrack.getSettings().deviceId);
            if (selectedAudioDevice) {
                this.selectedAudioInput$.next(selectedAudioDevice);
                this.preferencesService.setPreferredAudioInputDevice(selectedAudioDevice.deviceId);
            }
        }
        resolve(stream);
    }
}
DeviceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: DeviceService, deps: [{ token: i1.Configuration }, { token: i2.StreamService }, { token: i3.PreferencesService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: DeviceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: DeviceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Configuration }, { type: i2.StreamService }, { type: i3.PreferencesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC13ZWJydGMvc3JjL2xpYi9zZXJ2aWNlcy9kZXZpY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7OztBQUVqRDs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sYUFBYTtJQVF4QixZQUNtQixNQUFxQixFQUM5QixhQUE0QixFQUM1QixrQkFBc0M7UUFGN0IsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUM5QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBVHhDLFlBQU8sR0FBc0MsZ0JBQWdCLENBQUM7UUFDL0Qsd0JBQW1CLEdBQUcsSUFBSSxlQUFlLENBQXlCLElBQUksQ0FBQyxDQUFDO1FBQ3hFLHdCQUFtQixHQUFHLElBQUksZUFBZSxDQUF5QixJQUFJLENBQUMsQ0FBQztRQUN4RSxhQUFRLEdBQUcsSUFBSSxlQUFlLENBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELGtCQUFhLEdBQUcsSUFBSSxlQUFlLENBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBZXZELDJCQUFzQixHQUFrQixHQUFHLEVBQUU7WUFDbkQsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMxQyxJQUFJ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LFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdHLElBQUksbUJBQW1CLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDRCQUE0QixDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3BGO1NBQ0Y7UUFDRCxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRSxJQUFJLFVBQVUsSUFBSSxZQUFZLEVBQUU7WUFDOUIsTUFBTSxtQkFBbUIsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdHLElBQUksbUJBQW1CLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLDRCQUE0QixDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3BGO1NBQ0Y7UUFDRCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEIsQ0FBQzs7MEdBOVJVLGFBQWE7OEdBQWIsYUFBYSxjQUZaLE1BQU07MkZBRVAsYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB7IERldmljZXNHcm91cCB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL25neC13ZWJydGMtY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuL3ByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RyZWFtU2VydmljZSB9IGZyb20gJy4vc3RyZWFtLnNlcnZpY2UnO1xuXG4vKipcbiAqIFRoZSBEZXZpY2VTZXJ2aWNlIGhlbHAgeW91IHdpdGggZGV2aWNlIGludGVyYWN0aW9uIChhdWRpbyBhbmQgdmlkZW8gZGV2aWNlcykgYW5kIGNhbiBob2xkIGEgc3RhdGUgZm9yIGRldmljZXMgaWYgeW91IHdhbnQgdG8gaW1wbGVtZW50XG4gKiBhIGxvYmJ5IHdpdGggZGV2aWNlIHRlc3RpbmcuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZVNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgc3RvcmFnZTogJ2xvY2FsU3RvcmFnZScgfCAnc2Vzc2lvblN0b3JhZ2UnID0gJ3Nlc3Npb25TdG9yYWdlJztcbiAgcHVibGljIHNlbGVjdGVkQXVkaW9JbnB1dCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1lZGlhRGV2aWNlSW5mbyB8IG51bGw+KG51bGwpO1xuICBwdWJsaWMgc2VsZWN0ZWRWaWRlb0lucHV0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TWVkaWFEZXZpY2VJbmZvIHwgbnVsbD4obnVsbCk7XG4gIHB1YmxpYyBkZXZpY2VzJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TWVkaWFEZXZpY2VJbmZvW10+KFtdKTtcbiAgcHVibGljIGRldmljZXNHb3VwcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PERldmljZXNHcm91cFtdPihbXSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWc6IENvbmZpZ3VyYXRpb24sXG4gICAgcHJpdmF0ZSBzdHJlYW1TZXJ2aWNlOiBTdHJlYW1TZXJ2aWNlLFxuICAgIHByaXZhdGUgcHJlZmVyZW5jZXNTZXJ2aWNlOiBQcmVmZXJlbmNlc1NlcnZpY2VcbiAgKXtcbiAgICAgIC8vIG5vdCBwb3NzaWJsZSB3aXRoIEhvc3RMaXN0ZW5lclxuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VjaGFuZ2UnLCB0aGlzLm9uRGV2aWNlQ2hhbmdlTGlzdGVuZXIpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyKCdkZXZpY2VjaGFuZ2UnLCB0aGlzLm9uRGV2aWNlQ2hhbmdlTGlzdGVuZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkRldmljZUNoYW5nZUxpc3RlbmVyOiBFdmVudExpc3RlbmVyID0gKCkgPT4ge1xuICAgIHRoaXMuZGV0ZWN0U2VsZWN0ZWREZXZpY2VzKCkudGhlbihkZXZpY2VzID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygnZGV2aWNlcyBhZnRlciBkZXZpY2VjaGFuZ2UgZXZlbnQnKTtcbiAgICAgICAgY29uc29sZS5sb2coZGV2aWNlcyk7XG4gICAgICB9XG4gICAgfSkgXG4gIH1cblxuICBkZXRlY3RTZWxlY3RlZERldmljZXMoKTogUHJvbWlzZTxNZWRpYURldmljZUluZm9bXT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmdldE1lZGlhRGV2aWNlcygpLnRoZW4oZGV2aWNlcyA9PiB7XG4gICAgICAgIHRoaXMuZGV2aWNlcyQubmV4dChkZXZpY2VzKTtcbiAgICAgICAgdGhpcy5kZXZpY2VzR291cHMkLm5leHQodGhpcy5ncm91cERldmljZUJ5S2luZChkZXZpY2VzLCBbXSkpO1xuICAgICAgICByZXNvbHZlKGRldmljZXMpO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgZ2V0TWVkaWFEZXZpY2VzR3JvdXBlZChvbWl0OiBEZXZpY2VUeXBlW10gPSBbXSkge1xuICAgIGNvbnN0IGRldmljZXNHb3VwcyA9IHRoaXMuZGV2aWNlc0dvdXBzJC5nZXRWYWx1ZSgpO1xuICAgIGlmIChvbWl0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGRldmljZXNHb3Vwcy5maWx0ZXIoZSA9PiAhb21pdC5pbmNsdWRlcyhlLmtpbmQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRldmljZXNHb3VwcztcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgbWVkaWEgZGV2aWNlcywgQXR0ZW50aW9uIHlvdSBuZWVkIGdldE1lZGlhIHBlcm1pc3Npb25zIGZvciB0aGlzIGNhbGxcbiAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIG1lZGlhIERldmljZXMgYXMgYXJyYXkgXG4gICAqL1xuICBwdWJsaWMgZ2V0TWVkaWFEZXZpY2VzKCk6IFByb21pc2U8TWVkaWFEZXZpY2VJbmZvW10+IHtcbiAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCk7XG4gIH1cbiAgXG5cbiAgLyoqXG4gICAqIENoYW5nZSBzZWxlY3RlZCBkZXZpY2Ugd2l0IGEgZGV2aWNlSWQgYW5kIGEgZGV2aWNlIHR5cGUuXG4gICAqIEBwYXJhbSBkZXZpY2VJZCBpZCBvZiBzZWxlY3RlZCBkZXZpY2VcbiAgICogQHBhcmFtIGtpbmQgdHlwZSBvZiBzZWxlY3RlZCBkZXZpY2UgYFZpZGVEZXZpY2VgIG9yIGBBdWRpb0RldmljZWBcbiAgICovXG4gIGNoYW5nZVNlbGVjdGVkRGV2aWNlKGRldmljZUlkOiBzdHJpbmcsIGtpbmQ6IERldmljZVR5cGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdHMpID0+IHtcbiAgICAgIGNvbnN0IGRldmljZXMgPSB0aGlzLmRldmljZXMkLmdldFZhbHVlKCk7XG4gICAgICBpZiAoa2luZCA9PT0gRGV2aWNlVHlwZS5WaWRlb0lucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVmlkZW9JbnB1dCQuZ2V0VmFsdWUoKT8uZGV2aWNlSWQgPT09IGRldmljZUlkKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsgdmlkZW86IHtcbiAgICAgICAgICBkZXZpY2VJZFxuICAgICAgICB9fSkudGhlbigobmV3U3RyZWFtKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcmVmZXJlbmNlc1NlcnZpY2Uuc2V0UHJlZmVycmVkVmlkZW9JbnB1dERldmljZShkZXZpY2VJZCk7XG4gICAgICAgICAgaWYgKGRldmljZXMgJiYgZGV2aWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRldmljZSA9IGRldmljZXMuZmluZChkID0+IGQuZGV2aWNlSWQgPT09IGRldmljZUlkKTtcbiAgICAgICAgICAgIGlmIChkZXZpY2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZpZGVvSW5wdXQkLm5leHQoZGV2aWNlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gICBcbiAgICAgICAgICBjb25zdCB0cmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRWaWRlb1RyYWNrRm9yU3RyZWFtKG5ld1N0cmVhbSk7XG4gICAgICAgICAgY29uc3QgY3VycmVudFN0cmVhbSA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRMb2NhbFN0cmVhbSgpO1xuICAgICAgICAgIGlmIChjdXJyZW50U3RyZWFtICYmIHRyYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbVNlcnZpY2UucmVwbGFjZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgICAgIGNvbnN0IG9sZFRyYWNrID0gdGhpcy5zdHJlYW1TZXJ2aWNlLmdldFZpZGVvVHJhY2tGb3JTdHJlYW0oY3VycmVudFN0cmVhbSk7XG4gICAgICAgICAgICBvbGRUcmFjaz8uc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5zdHJlYW1TZXJ2aWNlLnJlcGxhY2VUcmFja0luU3RyZWFtKGN1cnJlbnRTdHJlYW0sIHRyYWNrKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW1TZXJ2aWNlLnNldExvY2FsU3RyZWFtKG5ld1N0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgcmVqZWN0cyhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGtpbmQgPT09IERldmljZVR5cGUuQXVkaW9JbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEF1ZGlvSW5wdXQkLmdldFZhbHVlKCk/LmRldmljZUlkID09PSBkZXZpY2VJZCkge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IGF1ZGlvOiB7XG4gICAgICAgICAgZGV2aWNlSWRcbiAgICAgICAgfX0pLnRoZW4oKG5ld1N0cmVhbSkgPT4ge1xuICAgICAgICAgIHRoaXMucHJlZmVyZW5jZXNTZXJ2aWNlLnNldFByZWZlcnJlZEF1ZGlvSW5wdXREZXZpY2UoZGV2aWNlSWQpO1xuICAgICAgICAgIGlmIChkZXZpY2VzICYmIGRldmljZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBkZXZpY2UgPSBkZXZpY2VzLmZpbmQoZCA9PiBkLmRldmljZUlkID09PSBkZXZpY2VJZCk7XG4gICAgICAgICAgICBpZiAoZGV2aWNlKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBdWRpb0lucHV0JC5uZXh0KGRldmljZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdHJhY2sgPSB0aGlzLnN0cmVhbVNlcnZpY2UuZ2V0QXVkaW9UcmFja0ZvclN0cmVhbShuZXdTdHJlYW0pO1xuICAgICAgICAgIGlmKHRyYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbVNlcnZpY2UucmVwbGFjZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY3VycmVudFN0cmVhbSA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRMb2NhbFN0cmVhbSgpO1xuICAgICAgICAgIGlmIChjdXJyZW50U3RyZWFtICYmIHRyYWNrKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRUcmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRBdWRpb1RyYWNrRm9yU3RyZWFtKGN1cnJlbnRTdHJlYW0pO1xuICAgICAgICAgICAgb2xkVHJhY2s/LnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtU2VydmljZS5yZXBsYWNlVHJhY2tJblN0cmVhbShjdXJyZW50U3RyZWFtLCB0cmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtU2VydmljZS5zZXRMb2NhbFN0cmVhbShuZXdTdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgIHJlamVjdHMoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChraW5kID09PSBEZXZpY2VUeXBlLkF1ZGlvT3V0cHV0KSB7XG4gICAgICAgIHRoaXMuc3RyZWFtU2VydmljZS5zZXRBdWRpb091dHB1dChkZXZpY2VJZCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZ2l2ZW4gZGV2aWNlLCBpZiBpdCdzIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0gZGV2aWNlIGRldmljZSB0byBjaGVjayBpZiBpdCdzIHNlbGVjdGVkXG4gICAqIEBwYXJhbSBraW5kIHRoZSBraW5kIG9mIHRoZSBkZXZpY2UgdG8gY2hlY2tcbiAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBkZXZpZSBpcyBzZWxlY3RlZCwgb3V0ZXJ3aXNlIGBmYWxzZWBcbiAgICovXG4gIGlzRGV2aWNlU2VsZWN0ZWQoZGV2aWNlOiBNZWRpYURldmljZUluZm8sIGtpbmQ6IERldmljZVR5cGUpOiBib29sZWFuIHtcbiAgICBjb25zdCBzdHJlYW0gPSB0aGlzLnN0cmVhbVNlcnZpY2UuZ2V0TG9jYWxTdHJlYW0oKTtcbiAgICBpZiAoc3RyZWFtKSB7XG4gICAgICBpZiAoa2luZCA9PT0gRGV2aWNlVHlwZS5WaWRlb0lucHV0ICYmIHRoaXMuc3RyZWFtU2VydmljZS5oYXNWaWRlbykge1xuICAgICAgICBjb25zdCB0cmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRWaWRlb1RyYWNrRm9yU3RyZWFtKHN0cmVhbSk7XG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgIHJldHVybiB0cmFjay5nZXRTZXR0aW5ncygpLmRldmljZUlkID09PSBkZXZpY2UuZGV2aWNlSWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChraW5kID09PSBEZXZpY2VUeXBlLkF1ZGlvSW5wdXQgJiYgdGhpcy5zdHJlYW1TZXJ2aWNlLmhhc0F1ZGlvKSB7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5zdHJlYW1TZXJ2aWNlLmdldEF1ZGlvVHJhY2tGb3JTdHJlYW0oc3RyZWFtKTtcbiAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWNrLmdldFNldHRpbmdzKCkuZGV2aWNlSWQgPT09IGRldmljZS5kZXZpY2VJZDtcbiAgICAgICAgfSBcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGdyb3VwIGEgbGlzdCBvZiBkZXZpY2VzIHlvdSBnZXQgYnkgY2FsbGluZyBgU3RyZWFtU2VydmljZS5nZXRNZWRpYURldmljZXMoKWAgYnkgdHlwZS5cbiAgICogQHBhcmFtIGRldmljZXMgbGlzdCBvZiBkZXZpY2VzIHlvdSBnZXQgYnkgY2FsbGluZyBgU3RyZWFtU2VydmljZS5nZXRNZWRpYURldmljZXMoKWBcbiAgICogQHJldHVybnMgYSBsaXN0IG9mIGRldmljZXMgZ3JvdXBlZCBieSBgRGV2aWNlVHlwZWBcbiAgICovXG4gIGdyb3VwRGV2aWNlQnlLaW5kKGRldmljZXM6IE1lZGlhRGV2aWNlSW5mb1tdLCBvbWl0OiBEZXZpY2VUeXBlW10gPSBbXSk6IERldmljZXNHcm91cFtdIHtcbiAgICBjb25zdCBkZXZpY2VzR291cHM6IERldmljZXNHcm91cFtdID0gW107XG4gICAgY29uc3QgYXVkaW9JbnB1dCA9IGRldmljZXMuZmlsdGVyKGQgPT4gZC5raW5kID09PSBEZXZpY2VUeXBlLkF1ZGlvSW5wdXQpO1xuICAgIGNvbnN0IGF1ZGlvT3V0cHV0ID0gZGV2aWNlcy5maWx0ZXIoZCA9PiBkLmtpbmQgPT09IERldmljZVR5cGUuQXVkaW9PdXRwdXQpO1xuICAgIGNvbnN0IHZpZGVvaW5wdXQgPSBkZXZpY2VzLmZpbHRlcihkID0+IGQua2luZCA9PT0gRGV2aWNlVHlwZS5WaWRlb0lucHV0KTtcbiAgICBpZiAoYXVkaW9JbnB1dC5sZW5ndGggJiYgIW9taXQuaW5jbHVkZXMoRGV2aWNlVHlwZS5BdWRpb0lucHV0KSkge1xuICAgICAgZGV2aWNlc0dvdXBzLnB1c2goe1xuICAgICAgICBraW5kOiBEZXZpY2VUeXBlLkF1ZGlvSW5wdXQsXG4gICAgICAgIGRldmljZXM6IGF1ZGlvSW5wdXRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYXVkaW9PdXRwdXQubGVuZ3RoICYmICFvbWl0LmluY2x1ZGVzKERldmljZVR5cGUuQXVkaW9PdXRwdXQpKSB7XG4gICAgICBkZXZpY2VzR291cHMucHVzaCh7XG4gICAgICAgIGtpbmQ6IERldmljZVR5cGUuQXVkaW9PdXRwdXQsXG4gICAgICAgIGRldmljZXM6IGF1ZGlvT3V0cHV0XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHZpZGVvaW5wdXQubGVuZ3RoICYmICFvbWl0LmluY2x1ZGVzKERldmljZVR5cGUuVmlkZW9JbnB1dCkpIHtcbiAgICAgIGRldmljZXNHb3Vwcy5wdXNoKHtcbiAgICAgICAga2luZDogRGV2aWNlVHlwZS5WaWRlb0lucHV0LFxuICAgICAgICBkZXZpY2VzOiB2aWRlb2lucHV0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRldmljZXNHb3VwcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBzaW1wbGUgd3JhcHBlciBmb3IgYG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhYCwgd2l0aCBiYXNpcyBlcnJvciBoYW5kbGluZy5cbiAgICogQHRvZG8gcmVmYWN0b3JcbiAgICogQHBhcmFtIG1lZGlhQ29uc3RyYWludHMgYSBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzIGUuZy4gd2l0aCBzcGVjaWZpYyBkZXZpY2VJZCwgcmVzb2x1dGlvbiBvciBqdXN0IGF1ZGlvLiBEZWZhdWx0IGlzOlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgYGBganNvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogdHJ1ZSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiB0cnVlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgYGBgXG4gICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNpbHZlIHRvIGEgc3RyZWFtIG1hdGNoaW5nIHRoZSBjb25zdHJhaW50XG4gICAqL1xuICBwdWJsaWMgdHJ5R2V0VXNlck1lZGlhKG1lZGlhQ29uc3RyYWludHM/OiBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzKTogUHJvbWlzZTxNZWRpYVN0cmVhbT4ge1xuICAgIGlmICghbWVkaWFDb25zdHJhaW50cykge1xuICAgICAgbWVkaWFDb25zdHJhaW50cyA9IHtcbiAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgIHZpZGVvOiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5kZXRlY3RTZWxlY3RlZERldmljZXMoKS50aGVuKCgpID0+IHtcbiAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEobWVkaWFDb25zdHJhaW50cykudGhlbihzdGVhbSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXREZXZpY2VBbmRSZXNvbHZlKHN0ZWFtLCByZXNvbHZlKTtcbiAgICAgICAgfSxyZWplY3QpO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZmluZEZpcnN0U3VjY2Vzc2Z1bDxUPihwcm9taXNlczooKCkgPT4gUHJvbWlzZTxUPilbXSwgb25TdWNjZXNzOiAoYXJnMDogVCkgPT4gdm9pZCwgb25Ob3RGb3VuZDogKCkgPT4gdm9pZCkge1xuICAgIGNvbnN0IGN1cnJlbnRQcm9taXNlID0gcHJvbWlzZXMuc2hpZnQoKTtcbiAgICBpZiAoY3VycmVudFByb21pc2UpIHtcbiAgICAgIGN1cnJlbnRQcm9taXNlKCkudGhlbihvblN1Y2Nlc3MsICgpID0+IHtcbiAgICAgICAgdGhpcy5maW5kRmlyc3RTdWNjZXNzZnVsKHByb21pc2VzLCBvblN1Y2Nlc3MsIG9uTm90Rm91bmQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uTm90Rm91bmQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdHJ5R2V0TWVkaWEob25TdWNjZXNzOiAoYXJnMDogTWVkaWFTdHJlYW0pID0+IHZvaWQsIG9uTm90Rm91bmQ6ICgpID0+IHZvaWQpIHtcblxuICAgIGNvbnN0IHRyeUNoYWluOiAoKCkgPT4gUHJvbWlzZTxNZWRpYVN0cmVhbT4pW10gPSBbXG4gICAgICB0aGlzLnRyeUdldE1lZGlhV2l0aFByZWZlcmVuY2VzLmJpbmQodGhpcyksXG4gICAgICB0aGlzLnRyeUdldE1lZGlhRGVmYXVsdC5iaW5kKHRoaXMpLFxuICAgICAgdGhpcy50cnlHZXRNZWRpYUF1ZGlvT25seS5iaW5kKHRoaXMpXG4gICAgXTtcblxuICAgIHRoaXMuZmluZEZpcnN0U3VjY2Vzc2Z1bDxNZWRpYVN0cmVhbT4odHJ5Q2hhaW4sIG9uU3VjY2Vzcywgb25Ob3RGb3VuZCk7XG4gIH1cbiAgXG4gIHByaXZhdGUgdHJ5R2V0TWVkaWFXaXRoUHJlZmVyZW5jZXMoKSB7XG4gICAgY29uc3QgcHJlZmVyZW5jZXNDb25zdHJhaW5zOiBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzID0ge1xuICAgICAgdmlkZW86IHRoaXMucHJlZmVyZW5jZXNTZXJ2aWNlLmdldFZpZGVvQ29uc3RyYWludFdpdGhQcmVmZXJlbmNlcygpLFxuICAgICAgYXVkaW86IHRoaXMucHJlZmVyZW5jZXNTZXJ2aWNlLmdldEF1ZGlvQ29uc3RyYWludFdpdGhQcmVmZXJlbmNlcygpLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMudHJ5R2V0VXNlck1lZGlhKHByZWZlcmVuY2VzQ29uc3RyYWlucyk7XG4gIH1cbiAgXG4gIHByaXZhdGUgdHJ5R2V0TWVkaWFEZWZhdWx0KCkge1xuICAgIHRoaXMucHJlZmVyZW5jZXNTZXJ2aWNlLnJlc2V0UHJlZmVyZW5jZXMoKTtcbiAgICByZXR1cm4gdGhpcy50cnlHZXRVc2VyTWVkaWEoe1xuICAgICAgdmlkZW86IHRydWUsXG4gICAgICBhdWRpbzogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB0cnlHZXRNZWRpYUF1ZGlvT25seSgpIHsgXG4gICAgcmV0dXJuIHRoaXMudHJ5R2V0VXNlck1lZGlhKHtcbiAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICAgIGF1ZGlvOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuXG4gIHByaXZhdGUgc2V0RGV2aWNlQW5kUmVzb2x2ZShzdHJlYW06IE1lZGlhU3RyZWFtLCByZXNvbHZlOiAodmFsdWU6IE1lZGlhU3RyZWFtIHwgUHJvbWlzZUxpa2U8TWVkaWFTdHJlYW0+KSA9PiB2b2lkKSB7XG4gICAgY29uc3QgZGV2aWNlc0dvdXBzID0gdGhpcy5kZXZpY2VzR291cHMkLmdldFZhbHVlKCk7XG4gICAgY29uc3QgdmlkZW9EZXZpY2VzID0gZGV2aWNlc0dvdXBzLmZpbmQoZSA9PiBlLmtpbmQgPT09IERldmljZVR5cGUuVmlkZW9JbnB1dCk7XG4gICAgY29uc3QgdmlkZW9UcmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRWaWRlb1RyYWNrRm9yU3RyZWFtKHN0cmVhbSk7XG4gICAgaWYgKHZpZGVvVHJhY2sgJiYgdmlkZW9EZXZpY2VzKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZFZpZGVvRGV2aWNlID0gdmlkZW9EZXZpY2VzLmRldmljZXMuZmluZChlID0+IGUuZGV2aWNlSWQgPT09IHZpZGVvVHJhY2suZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZCk7XG4gICAgICBpZiAoc2VsZWN0ZWRWaWRlb0RldmljZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVmlkZW9JbnB1dCQubmV4dChzZWxlY3RlZFZpZGVvRGV2aWNlKTtcbiAgICAgICAgdGhpcy5wcmVmZXJlbmNlc1NlcnZpY2Uuc2V0UHJlZmVycmVkVmlkZW9JbnB1dERldmljZShzZWxlY3RlZFZpZGVvRGV2aWNlLmRldmljZUlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXVkaW9EZXZpY2VzID0gZGV2aWNlc0dvdXBzLmZpbmQoZSA9PiBlLmtpbmQgPT09IERldmljZVR5cGUuQXVkaW9JbnB1dCk7XG4gICAgY29uc3QgYXVkaW9UcmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRBdWRpb1RyYWNrRm9yU3RyZWFtKHN0cmVhbSk7XG4gICAgaWYgKGF1ZGlvVHJhY2sgJiYgYXVkaW9EZXZpY2VzKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZEF1ZGlvRGV2aWNlID0gYXVkaW9EZXZpY2VzLmRldmljZXMuZmluZChlID0+IGUuZGV2aWNlSWQgPT09IGF1ZGlvVHJhY2suZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZCk7XG4gICAgICBpZiAoc2VsZWN0ZWRBdWRpb0RldmljZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQXVkaW9JbnB1dCQubmV4dChzZWxlY3RlZEF1ZGlvRGV2aWNlKTtcbiAgICAgICAgdGhpcy5wcmVmZXJlbmNlc1NlcnZpY2Uuc2V0UHJlZmVycmVkQXVkaW9JbnB1dERldmljZShzZWxlY3RlZEF1ZGlvRGV2aWNlLmRldmljZUlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzb2x2ZShzdHJlYW0pO1xuICB9XG5cbn1cbiJdfQ==