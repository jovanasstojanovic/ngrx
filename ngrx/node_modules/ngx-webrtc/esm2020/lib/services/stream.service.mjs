import { EventEmitter, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { StreamType } from "../enums/stream-type";
import { Configuration } from '../ngx-webrtc-configuration';
import { PreferencesService } from './preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "../ngx-webrtc-configuration";
import * as i2 from "./preferences.service";
export class StreamService {
    constructor(config, preferencesService) {
        this.config = config;
        this.preferencesService = preferencesService;
        /**
         * You can subscribe to localSteam changes
         */
        this.localStream$ = new BehaviorSubject(null);
        /**
         * You can subscribe to screen share changes
         */
        this.localShareScreenStream$ = new BehaviorSubject(null);
        /**
         * Emitted with new Track when `StreamService.replaceTrack` is called
         */
        this.replaceTrack$ = new BehaviorSubject(null);
        /**
         * Emitted when `StreamService.setAudioOutput` is called with new device (Call it when the switch the audio device).
         */
        this.audioOutput$ = new BehaviorSubject(null);
        /**
         * Emitted when the status of the local stream changed e.g. audio or video disabled or enabled.
         */
        this.localStreamStatusChanged = new EventEmitter();
        /**
         * Emitted when the status of the local audio stream changed e.g. audio disabled or enabled.
         */
        this.localAudioStreamStatusChanged = new EventEmitter();
        /**
         * Emitted when the status of the local video stream changed e.g. video disabled or enabled.
         */
        this.localVideoStreamStatusChanged = new EventEmitter();
        /**
         * Set to `true` when the StreamService.tryGetUserMedia is succefull for video (camera).
         * @deprecated
         */
        this.hasVideo = false;
        /**
         * Set to `true` when the StreamService.tryGetUserMedia is succefull for audio (microphone).
         * @deprecated
         */
        this.hasAudio = false;
    }
    /**
     * Get aspect ratio for given width and height.
     * @param width width in pixel
     * @param height height in pixel
     * @returns aspect ratio for the given width and height
     */
    static getAspectRatio(width, height) {
        function gcd(a, b) {
            return b ? gcd(b, a % b) : a;
        }
        const divisor = gcd(width, height);
        return `${width / divisor}x${height / divisor}`;
    }
    /**
     *
     * @param node `HTMLVideoElement` or `HTMLAudioElement` that should play the stream.
     * @param stream stream to set in node
     * @param muted mute audio
     * @param local if set to `true` `localStreamStatusChanged` is emitted on play
     */
    setStreamInNode(node, stream, muted = true, local = false) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        if (node) {
            // play when ready
            node.addEventListener('canplay', function onCanPlay(event) {
                // it doesn't matter if we use audio or video element here
                const eventTargetNode = event.target;
                if (eventTargetNode) {
                    eventTargetNode.removeEventListener('canplay', onCanPlay);
                    eventTargetNode.play();
                }
                if (local) {
                    self.localStreamStatusChanged.emit(stream);
                }
            });
            let tmpStream;
            if (stream instanceof MediaStreamTrack) {
                tmpStream = new MediaStream();
                tmpStream.addTrack(stream);
            }
            else {
                tmpStream = stream;
            }
            node.srcObject = tmpStream;
            node.muted = muted;
        }
    }
    /**
     * stop stream playing in node
     * @param node node with nativeElement type `HTMLVideoElement` or  `HTMLAudioElement`
     */
    stopStreamInNode(node) {
        node?.nativeElement?.pause();
        node?.nativeElement?.srcObject?.getTracks().forEach((t) => t.stop());
        if (node?.nativeElement?.srcObject) {
            node.nativeElement.srcObject = new MediaStream();
        }
    }
    toggleLocalTrack(type) {
        if (this.config.debug) {
            console.log('toggleLocalTrack()', type);
        }
        const stream = this.getLocalStream();
        if (stream) {
            const tracks = type === StreamType.Audio ? stream.getAudioTracks() : stream.getVideoTracks();
            if (tracks.length) {
                return this.disableLocalTrack(type);
            }
            else {
                return this.enableLocalTrack(type);
            }
        }
        else {
            return Promise.reject(new Error('no stream'));
        }
    }
    enableLocalTrack(type) {
        if (this.config.debug) {
            console.log('enableLocalTrack()', type);
        }
        return new Promise((resolve, rejects) => {
            const stream = this.getLocalStream();
            if (stream) {
                if (type === StreamType.Video) {
                    navigator.mediaDevices.getUserMedia({
                        video: this.preferencesService.getVideoConstraintWithPreferences(),
                    }).then(stream => {
                        const localStream = this.localStream$.getValue() || new MediaStream();
                        stream.getVideoTracks().forEach(track => {
                            localStream.addTrack(track);
                            this.localVideoStreamStatusChanged.emit(true);
                            this.replaceTrack(track);
                        });
                        this.localStream$.next(localStream);
                        this.localStreamStatusChanged.emit(localStream);
                        resolve(localStream);
                    }, (error) => {
                        rejects(error);
                    });
                }
                if (type === StreamType.Audio) {
                    navigator.mediaDevices.getUserMedia({
                        audio: this.preferencesService.getAudioConstraintWithPreferences(),
                    }).then(stream => {
                        const localStream = this.localStream$.getValue() || new MediaStream();
                        stream.getAudioTracks().forEach(track => {
                            localStream.addTrack(track);
                            this.localAudioStreamStatusChanged.emit(true);
                            this.replaceTrack(track);
                        });
                        this.localStream$.next(localStream);
                        this.localStreamStatusChanged.emit(localStream);
                        resolve(localStream);
                    }, (error) => {
                        rejects(error);
                    });
                }
            }
            else {
                rejects(new Error('no stream'));
            }
        });
    }
    disableLocalTrack(type) {
        if (this.config.debug) {
            console.log('disableLocalTrack()', type);
        }
        return new Promise((resolve, rejects) => {
            const stream = this.getLocalStream();
            if (stream) {
                const tracks = type === StreamType.Audio ? stream.getAudioTracks() : stream.getVideoTracks();
                tracks.forEach(track => {
                    track.enabled = false;
                    track.stop();
                    stream.removeTrack(track);
                });
                if (type === StreamType.Video) {
                    this.localVideoStreamStatusChanged.emit(false);
                }
                else {
                    this.localAudioStreamStatusChanged.emit(false);
                }
                this.localStreamStatusChanged.emit(stream);
                this.localStream$.next(stream);
                return resolve(stream);
            }
            else {
                rejects(new Error('no stream'));
            }
        });
    }
    /**
     * set stream or track mute state or toggle mute
     * @param stream stream or track
     * @param type stream or track type
     * @param value enforce `true` or `false`
     */
    toggleMuteStream(stream, type, value) {
        if (this.config.debug) {
            console.log('toggleMuteStream()', stream, type, value);
        }
        if (stream) {
            if (stream instanceof MediaStreamTrack) {
                const targetValue = typeof value !== 'undefined' ? value : !stream.enabled;
                stream.enabled = targetValue;
            }
            else {
                if (type === StreamType.Audio) {
                    stream.getAudioTracks().forEach(track => {
                        const targetValue = typeof value !== 'undefined' ? value : !track.enabled;
                        track.enabled = targetValue;
                        this.localAudioStreamStatusChanged.emit(targetValue);
                    });
                }
                if (type === StreamType.Video) {
                    stream.getVideoTracks().forEach(track => {
                        const targetValue = typeof value !== 'undefined' ? value : !track.enabled;
                        track.enabled = targetValue;
                        this.localVideoStreamStatusChanged.emit(targetValue);
                    });
                }
            }
        }
        this.localStreamStatusChanged.emit(stream);
    }
    /**
     * Mute stream in node.
     * @param stream stram or track
     * @param type stream or track type
     */
    muteStream(stream, type) {
        this.toggleMuteStream(stream, type, false);
    }
    /**
     * Unmute stream in node.
     * @param stream stram or track
     * @param type stream or track type
     */
    unmuteStream(stream, type) {
        this.toggleMuteStream(stream, type, true);
    }
    /**
     * replace a track in stream
     * @param stream stream with thre track to replace
     * @param track new track
     */
    replaceTrackInStream(stream, track) {
        if (track.kind === StreamType.Video) {
            stream?.getVideoTracks().forEach(e => {
                e.stop();
                stream.removeTrack(e);
            });
        }
        if (track.kind === StreamType.Audio) {
            stream?.getAudioTracks().forEach((e) => {
                e.stop();
                stream.removeTrack(e);
            });
        }
        stream?.addTrack(track);
    }
    /**
     * set local stream in service state
     * @param stream stream to set
     */
    setLocalStream(stream) {
        this.localStream$.next(stream);
    }
    /**
     * get current state value of local stream
     * @returns current local stream
     */
    getLocalStream() {
        return this.localStream$.getValue();
    }
    /**
     * set replace track service state. You can subscribe to `StreamService.replaceTrack$` to update the track somewhere.
     * @param track new track
     */
    replaceTrack(track) {
        this.replaceTrack$.next(track);
    }
    /**
     * toggle mute audio of local stream
     */
    toggleMuteLocalAudioStream() {
        const stream = this.localStream$.getValue();
        if (stream) {
            this.toggleMuteStream(stream, StreamType.Audio);
        }
    }
    /**
     * mute local audio stream
     */
    muteLocalAudioStream() {
        const stream = this.localStream$.getValue();
        if (stream) {
            this.toggleMuteStream(stream, StreamType.Audio, false);
        }
    }
    /**
     * unmute local audio stream
     */
    unmuteLocalAudioStream() {
        const stream = this.localStream$.getValue();
        if (stream) {
            this.toggleMuteStream(stream, StreamType.Audio, true);
        }
    }
    /**
     * toggle mute local video stream
     */
    toggleMuteLocalVideoStream() {
        const stream = this.localStream$.getValue();
        if (stream) {
            this.toggleMuteStream(stream, StreamType.Video);
        }
    }
    /**
     * mute local video stream
     */
    muteLocalVideoStream() {
        const stream = this.localStream$.getValue();
        if (stream) {
            this.toggleMuteStream(stream, StreamType.Video, false);
        }
    }
    /**
     * unmute local video stream
     */
    unmuteLocalVideoStream() {
        const value = this.localStream$.getValue();
        if (value) {
            this.toggleMuteStream(value, StreamType.Video, true);
        }
    }
    /**
     * get screen or window as stream
     * @returns MediaStram of desktop or display
     */
    async getScreenCapture() {
        let stream = null;
        try {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const n = navigator;
            if (n.getDisplayMedia) {
                stream = await n.getDisplayMedia({ video: true });
            }
            else if (n.mediaDevices.getDisplayMedia) {
                stream = await n.mediaDevices.getDisplayMedia({ video: true });
            }
            else {
                stream = await n.mediaDevices.getUserMedia({ video: { mediaSource: 'screen' } });
            }
        }
        catch (e) {
            if (this.config.debug) {
                console.log(`MdoVideoCallComponent.getScreenCapture() -> no permissions`);
            }
        }
        return stream;
    }
    /**
     * get first/single video track of the given stream
     * @param stream stream with video treack
     * @returns first video track of stream
     */
    getVideoTrackForStream(stream) {
        if (!stream && this.getLocalStream()) {
            stream = this.getLocalStream();
        }
        return stream?.getVideoTracks()[0] || null;
    }
    /**
     * get first/single audio track of the given stream
     * @param stream stream with audio treack
     * @returns first audio track of stream
     */
    getAudioTrackForStream(stream) {
        if (!stream && this.getLocalStream()) {
            stream = this.getLocalStream();
        }
        return stream?.getAudioTracks()[0] || null;
    }
    /**
     * get media devices, Attention you need getMedia permissions for this call
     * @returns Promise that resolves to media Devices as array
     * @deprecated use DeviceService.getMediaDevices() instead
     */
    getMediaDevices() {
        return navigator.mediaDevices.enumerateDevices();
    }
    /**
     * set current audio device in service state. You can subscribe to `StreamService.audioOutput$` to get changes.
     * @param deviceId
     */
    setAudioOutput(deviceId) {
        this.audioOutput$.next(deviceId);
    }
    // TODO: refactor
    /**
     * An simple wrapper for `navigator.mediaDevices.getUserMedia`, with basis error handling.
     * @todo refactor
     * @param mediaConstraints a MediaStreamConstraints e.g. with specific deviceId, resolution or just audio. Default is:
     *                          ```json
     *                         {
     *                             audio: true,
     *                             video: true
     *                         }
     *                         ```
     * @returns Promise that resilve to a stream matching the constraint
     * @deprecated use DeviceService.tryGetUserMedia() instead
     */
    tryGetUserMedia(mediaConstraints) {
        // reset state
        this.hasAudio = false;
        this.hasVideo = false;
        if (!mediaConstraints) {
            mediaConstraints = {
                audio: true,
                video: true
            };
        }
        ;
        return new Promise((resolve, reject) => {
            navigator.mediaDevices.getUserMedia(mediaConstraints).then(a => {
                this.hasAudio = true;
                this.hasVideo = true;
                resolve(a);
            }, b => {
                let cam = true, mic = true;
                if (b.message.indexOf('Starting videoinput failed') > -1) {
                    if (this.config.debug) {
                        console.log('videoinput used by another software');
                    }
                    cam = false;
                }
                navigator.mediaDevices.enumerateDevices().then((devices) => {
                    cam = cam && devices.find((device) => {
                        return device.kind === 'videoinput';
                    }) !== null;
                    mic = devices.find((device) => {
                        return device.kind === 'audioinput';
                    }) !== null;
                    const constraints = {
                        video: cam && mediaConstraints?.video,
                        audio: mic && mediaConstraints?.audio
                    };
                    navigator.mediaDevices.getUserMedia(constraints).then(a => {
                        this.hasAudio = true;
                        resolve(a);
                    }, reject);
                }, (f) => {
                    reject(f);
                });
            }).catch(e => {
                reject(e);
            });
        });
    }
}
StreamService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: StreamService, deps: [{ token: i1.Configuration }, { token: i2.PreferencesService }], target: i0.ɵɵFactoryTarget.Injectable });
StreamService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: StreamService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: StreamService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Configuration }, { type: i2.PreferencesService }]; } });
//# sourceMappingURL=data:application/json;base64,