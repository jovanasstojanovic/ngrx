import { ChangeDetectorRef, Directive, HostBinding, HostListener } from '@angular/core';
import { fromEvent, merge } from 'rxjs';
import { take } from 'rxjs/operators';
import { CallService } from '../services/call.service';
import { StreamService } from '../services/stream.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/stream.service";
import * as i2 from "../services/call.service";
/**
 * Trigger get capture screen permissions and send screen to CallService.
 * You can listen to the change and call replaceTrack of peer connection to send the screen capture to that connection
 */
export class ShareScreenDirective {
    constructor(streamService, callService, cdr) {
        this.streamService = streamService;
        this.callService = callService;
        this.cdr = cdr;
        this.desktopStream = null;
        this.isDisabled = true;
        this.isEnabled = false;
    }
    async onClick() {
        if (!this.isEnabled) {
            await this.startShareScreen();
        }
        else {
            this.stopShareScreen();
        }
    }
    async startShareScreen() {
        this.desktopStream = await this.streamService.getScreenCapture();
        if (this.desktopStream) {
            this.streamService.localShareScreenStream$.next(this.desktopStream);
            const desktopVideoTrack = this.streamService.getVideoTrackForStream(this.desktopStream);
            if (desktopVideoTrack) {
                this.streamService.replaceTrack(desktopVideoTrack);
            }
            else {
                console.warn('no videotrack in desktop stream');
            }
            const streamInactive$ = fromEvent(this.desktopStream, 'inactive').pipe(take(1));
            const sharingStopped$ = fromEvent(this.desktopStream.getVideoTracks()[0], 'ended').pipe(take(1));
            merge(streamInactive$, sharingStopped$)
                .pipe(take(1))
                .subscribe(() => {
                if (this.isEnabled) {
                    this.stopShareScreen();
                }
            });
            this.isEnabled = !this.isEnabled;
            this.isDisabled = !this.isDisabled;
            this.callService.startShareScreen.emit();
            this.cdr.detectChanges();
        }
    }
    stopShareScreen() {
        this.streamService.localShareScreenStream$.next(null);
        const videoTrack = this.streamService.getVideoTrackForStream();
        if (videoTrack) {
            this.streamService.replaceTrack(videoTrack);
        }
        else {
            console.warn('video track not found');
        }
        if (this.desktopStream) {
            this.desktopStream.getTracks().forEach(track => {
                track.stop();
            });
        }
        this.callService.stopShareScreen.emit();
        this.isEnabled = !this.isEnabled;
        this.isDisabled = !this.isDisabled;
        this.cdr.detectChanges();
    }
}
ShareScreenDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: ShareScreenDirective, deps: [{ token: i1.StreamService }, { token: i2.CallService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
ShareScreenDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.1", type: ShareScreenDirective, selector: "[ngxWebrtcShareScreen]", host: { listeners: { "click": "onClick($event)" }, properties: { "class.disabled": "this.isDisabled", "class.enabled": "this.isEnabled" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: ShareScreenDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxWebrtcShareScreen]',
                }]
        }], ctorParameters: function () { return [{ type: i1.StreamService }, { type: i2.CallService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isDisabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }], isEnabled: [{
                type: HostBinding,
                args: ['class.enabled']
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtc2NyZWVuLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LXdlYnJ0Yy9zcmMvbGliL2RpcmVjdGl2ZXMvc2hhcmUtc2NyZWVuLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7QUFFM0Q7OztHQUdHO0FBSUgsTUFBTSxPQUFPLG9CQUFvQjtJQWEvQixZQUNVLGFBQTRCLEVBQzVCLFdBQXdCLEVBQ3hCLEdBQXNCO1FBRnRCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBZHhCLGtCQUFhLEdBQXVCLElBQUksQ0FBQztRQUNYLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbkIsY0FBUyxHQUFHLEtBQUssQ0FBQztJQWFuRCxDQUFDO0lBWjhCLEtBQUssQ0FBQyxPQUFPO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDL0I7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFRTyxLQUFLLENBQUMsZ0JBQWdCO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFB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LE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDYWxsU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NhbGwuc2VydmljZSc7XG5pbXBvcnQgeyBTdHJlYW1TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RyZWFtLnNlcnZpY2UnO1xuXG4vKipcbiAqIFRyaWdnZXIgZ2V0IGNhcHR1cmUgc2NyZWVuIHBlcm1pc3Npb25zIGFuZCBzZW5kIHNjcmVlbiB0byBDYWxsU2VydmljZS4gXG4gKiBZb3UgY2FuIGxpc3RlbiB0byB0aGUgY2hhbmdlIGFuZCBjYWxsIHJlcGxhY2VUcmFjayBvZiBwZWVyIGNvbm5lY3Rpb24gdG8gc2VuZCB0aGUgc2NyZWVuIGNhcHR1cmUgdG8gdGhhdCBjb25uZWN0aW9uXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hXZWJydGNTaGFyZVNjcmVlbl0nLFxufSlcbmV4cG9ydCBjbGFzcyBTaGFyZVNjcmVlbkRpcmVjdGl2ZSB7XG5cbiAgcHJpdmF0ZSBkZXNrdG9wU3RyZWFtOiBNZWRpYVN0cmVhbSB8IG51bGwgPSBudWxsO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRpc2FibGVkJykgcHVibGljIGlzRGlzYWJsZWQgPSB0cnVlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmVuYWJsZWQnKSBwdWJsaWMgaXNFbmFibGVkID0gZmFsc2U7XG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSkgYXN5bmMgb25DbGljaygpOiBQcm9taXNlPHZvaWQ+e1xuICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRTaGFyZVNjcmVlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0b3BTaGFyZVNjcmVlbigpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RyZWFtU2VydmljZTogU3RyZWFtU2VydmljZSxcbiAgICBwcml2YXRlIGNhbGxTZXJ2aWNlOiBDYWxsU2VydmljZSxcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7IH1cblxuICBwcml2YXRlIGFzeW5jIHN0YXJ0U2hhcmVTY3JlZW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5kZXNrdG9wU3RyZWFtID0gYXdhaXQgdGhpcy5zdHJlYW1TZXJ2aWNlLmdldFNjcmVlbkNhcHR1cmUoKTtcblxuICAgIGlmICh0aGlzLmRlc2t0b3BTdHJlYW0pIHtcbiAgICAgIHRoaXMuc3RyZWFtU2VydmljZS5sb2NhbFNoYXJlU2NyZWVuU3RyZWFtJC5uZXh0KHRoaXMuZGVza3RvcFN0cmVhbSk7XG4gICAgICBjb25zdCBkZXNrdG9wVmlkZW9UcmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRWaWRlb1RyYWNrRm9yU3RyZWFtKHRoaXMuZGVza3RvcFN0cmVhbSk7XG4gICAgICBpZiAoZGVza3RvcFZpZGVvVHJhY2spIHtcbiAgICAgICAgdGhpcy5zdHJlYW1TZXJ2aWNlLnJlcGxhY2VUcmFjayhkZXNrdG9wVmlkZW9UcmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ25vIHZpZGVvdHJhY2sgaW4gZGVza3RvcCBzdHJlYW0nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0cmVhbUluYWN0aXZlJCA9IGZyb21FdmVudCh0aGlzLmRlc2t0b3BTdHJlYW0sICdpbmFjdGl2ZScpLnBpcGUodGFrZSgxKSk7XG4gICAgICBjb25zdCBzaGFyaW5nU3RvcHBlZCQgPSBmcm9tRXZlbnQodGhpcy5kZXNrdG9wU3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF0sICdlbmRlZCcpLnBpcGUodGFrZSgxKSk7XG5cbiAgICAgIG1lcmdlKHN0cmVhbUluYWN0aXZlJCwgc2hhcmluZ1N0b3BwZWQkKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICB0YWtlKDEpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BTaGFyZVNjcmVlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIHRoaXMuaXNFbmFibGVkID0gIXRoaXMuaXNFbmFibGVkO1xuICAgICAgdGhpcy5pc0Rpc2FibGVkID0gIXRoaXMuaXNEaXNhYmxlZDtcbiAgICAgIHRoaXMuY2FsbFNlcnZpY2Uuc3RhcnRTaGFyZVNjcmVlbi5lbWl0KCk7XG4gICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdG9wU2hhcmVTY3JlZW4oKTogdm9pZCB7XG4gICAgdGhpcy5zdHJlYW1TZXJ2aWNlLmxvY2FsU2hhcmVTY3JlZW5TdHJlYW0kLm5leHQobnVsbCk7XG4gICAgY29uc3QgdmlkZW9UcmFjayA9IHRoaXMuc3RyZWFtU2VydmljZS5nZXRWaWRlb1RyYWNrRm9yU3RyZWFtKCk7XG4gICAgaWYgKHZpZGVvVHJhY2spIHtcbiAgICAgIHRoaXMuc3RyZWFtU2VydmljZS5yZXBsYWNlVHJhY2sodmlkZW9UcmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybigndmlkZW8gdHJhY2sgbm90IGZvdW5kJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRlc2t0b3BTdHJlYW0pIHtcbiAgICAgIHRoaXMuZGVza3RvcFN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuY2FsbFNlcnZpY2Uuc3RvcFNoYXJlU2NyZWVuLmVtaXQoKTtcbiAgICB0aGlzLmlzRW5hYmxlZCA9ICF0aGlzLmlzRW5hYmxlZDtcbiAgICB0aGlzLmlzRGlzYWJsZWQgPSAhdGhpcy5pc0Rpc2FibGVkO1xuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG59XG4iXX0=