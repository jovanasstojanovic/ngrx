import { ChangeDetectorRef, Directive, EventEmitter, HostBinding, HostListener, Output } from '@angular/core';
import { StreamType } from "../enums/stream-type";
import { CallService } from '../services/call.service';
import { StreamService } from '../services/stream.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/stream.service";
import * as i2 from "../services/call.service";
/**
 * Toggle disabled/enable audio track to mute/unmute local audio.
 */
export class ToggleAudioSelfDirective {
    constructor(streamService, callService, cdr) {
        this.streamService = streamService;
        this.callService = callService;
        this.cdr = cdr;
        this.callStartedSubscription$ = null;
        this.localStreamStatusChangedSubscription$ = null;
        this.toggleMuteFailed = new EventEmitter();
        this.isDisabled = true;
        this.isEnabled = false;
        this.init();
    }
    onClick() {
        this.toggleMute();
    }
    ngOnDestroy() {
        this.callStartedSubscription$?.unsubscribe();
        this.localStreamStatusChangedSubscription$?.unsubscribe();
    }
    init() {
        this.callStartedSubscription$ = this.callService.started$.subscribe(this.onStart.bind(this));
    }
    onStart(isStarted) {
        if (isStarted) {
            this.localStreamStatusChangedSubscription$ = this.streamService.localStreamStatusChanged.subscribe(this.onLocalStreamStatusChanged.bind(this));
        }
    }
    onLocalStreamStatusChanged(stream) {
        if (stream) {
            if (stream instanceof MediaStreamTrack && stream.kind === StreamType.Audio) {
                this.updateStatusWithTrack(stream);
            }
            if (stream instanceof MediaStream) {
                const track = this.streamService.getAudioTrackForStream(stream);
                this.updateStatusWithTrack(track);
            }
        }
    }
    toggleMute() {
        this.streamService.toggleLocalTrack(StreamType.Audio).catch(error => {
            this.toggleMuteFailed.emit(error);
        });
    }
    updateStatusWithTrack(track) {
        this.isEnabled = track && track.enabled ? true : false;
        this.isDisabled = !track || !track.enabled;
        this.cdr.detectChanges();
    }
}
ToggleAudioSelfDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: ToggleAudioSelfDirective, deps: [{ token: i1.StreamService }, { token: i2.CallService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
ToggleAudioSelfDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.1", type: ToggleAudioSelfDirective, selector: "[ngxWebrtcToggleAudioSelf]", outputs: { toggleMuteFailed: "toggleMuteFailed" }, host: { listeners: { "click": "onClick($event)" }, properties: { "class.disabled": "this.isDisabled", "class.enabled": "this.isEnabled" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.1", ngImport: i0, type: ToggleAudioSelfDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxWebrtcToggleAudioSelf]',
                }]
        }], ctorParameters: function () { return [{ type: i1.StreamService }, { type: i2.CallService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { toggleMuteFailed: [{
                type: Output
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }], isEnabled: [{
                type: HostBinding,
                args: ['class.enabled']
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWF1ZGlvLXNlbGYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtd2VicnRjL3NyYy9saWIvZGlyZWN0aXZlcy90b2dnbGUtYXVkaW8tc2VsZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7QUFFM0Q7O0dBRUc7QUFJSCxNQUFNLE9BQU8sd0JBQXdCO0lBV25DLFlBQ1UsYUFBNEIsRUFDNUIsV0FBd0IsRUFDeEIsR0FBc0I7UUFGdEIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFaeEIsNkJBQXdCLEdBQXdCLElBQUksQ0FBQztRQUNyRCwwQ0FBcUMsR0FBd0IsSUFBSSxDQUFDO1FBQ2hFLHFCQUFnQixHQUF3QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9CLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbkIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQVVyRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBVmtDLE9BQU87UUFDeEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFVRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQzdDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQsT0FBTyxDQUFDLFNBQWtCO1FBQ3hCLElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLHFDQUFxQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUNoRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsMEJBQTBCLENBQUMsTUFBc0M7UUFDL0QsSUFBSSxNQUFNLEVBQUM7WUFDVCxJQUFJLE1BQU0sWUFBWSxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxLQUFLLEVBQUU7Z0JBQzFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQztZQUNELElBQUksTUFBTSxZQUFZLFdBQVcsRUFBRTtnQkFDakMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDaEUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25DO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNsRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLHFCQUFxQixDQUFDLEtBQThCO1FBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzNDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7cUhBekRVLHdCQUF3Qjt5R0FBeEIsd0JBQXdCOzJGQUF4Qix3QkFBd0I7a0JBSHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtpQkFDdkM7OEpBS1csZ0JBQWdCO3NCQUF6QixNQUFNO2dCQUMrQixVQUFVO3NCQUEvQyxXQUFXO3VCQUFDLGdCQUFnQjtnQkFDUSxTQUFTO3NCQUE3QyxXQUFXO3VCQUFDLGVBQWU7Z0JBQ08sT0FBTztzQkFBekMsWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIE9uRGVzdHJveSwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0cmVhbVR5cGUgfSBmcm9tIFwiLi4vZW51bXMvc3RyZWFtLXR5cGVcIjtcbmltcG9ydCB7IENhbGxTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY2FsbC5zZXJ2aWNlJztcbmltcG9ydCB7IFN0cmVhbVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdHJlYW0uc2VydmljZSc7XG5cbi8qKlxuICogVG9nZ2xlIGRpc2FibGVkL2VuYWJsZSBhdWRpbyB0cmFjayB0byBtdXRlL3VubXV0ZSBsb2NhbCBhdWRpby5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25neFdlYnJ0Y1RvZ2dsZUF1ZGlvU2VsZl0nLFxufSlcbmV4cG9ydCBjbGFzcyBUb2dnbGVBdWRpb1NlbGZEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgY2FsbFN0YXJ0ZWRTdWJzY3JpcHRpb24kOiBTdWJzY3JpcHRpb24gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBsb2NhbFN0cmVhbVN0YXR1c0NoYW5nZWRTdWJzY3JpcHRpb24kOiBTdWJzY3JpcHRpb24gfCBudWxsID0gbnVsbDtcbiAgQE91dHB1dCgpIHRvZ2dsZU11dGVGYWlsZWQ6IEV2ZW50RW1pdHRlcjxFcnJvcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuZGlzYWJsZWQnKSBwdWJsaWMgaXNEaXNhYmxlZCA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuZW5hYmxlZCcpIHB1YmxpYyBpc0VuYWJsZWQgPSBmYWxzZTtcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBvbkNsaWNrKCk6IHZvaWR7XG4gICAgdGhpcy50b2dnbGVNdXRlKCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHN0cmVhbVNlcnZpY2U6IFN0cmVhbVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjYWxsU2VydmljZTogQ2FsbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5jYWxsU3RhcnRlZFN1YnNjcmlwdGlvbiQ/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5sb2NhbFN0cmVhbVN0YXR1c0NoYW5nZWRTdWJzY3JpcHRpb24kPy51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNhbGxTdGFydGVkU3Vic2NyaXB0aW9uJCA9IHRoaXMuY2FsbFNlcnZpY2Uuc3RhcnRlZCQuc3Vic2NyaWJlKHRoaXMub25TdGFydC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG9uU3RhcnQoaXNTdGFydGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGlzU3RhcnRlZCkge1xuICAgICAgdGhpcy5sb2NhbFN0cmVhbVN0YXR1c0NoYW5nZWRTdWJzY3JpcHRpb24kID0gdGhpcy5zdHJlYW1TZXJ2aWNlLmxvY2FsU3RyZWFtU3RhdHVzQ2hhbmdlZC5zdWJzY3JpYmUoXG4gICAgICAgIHRoaXMub25Mb2NhbFN0cmVhbVN0YXR1c0NoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgb25Mb2NhbFN0cmVhbVN0YXR1c0NoYW5nZWQoc3RyZWFtOiBNZWRpYVN0cmVhbSB8IE1lZGlhU3RyZWFtVHJhY2spOiB2b2lkIHtcbiAgICBpZiAoc3RyZWFtKXtcbiAgICAgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBNZWRpYVN0cmVhbVRyYWNrICYmIHN0cmVhbS5raW5kID09PSBTdHJlYW1UeXBlLkF1ZGlvKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdHVzV2l0aFRyYWNrKHN0cmVhbSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgTWVkaWFTdHJlYW0pIHtcbiAgICAgICAgY29uc3QgdHJhY2sgPSB0aGlzLnN0cmVhbVNlcnZpY2UuZ2V0QXVkaW9UcmFja0ZvclN0cmVhbShzdHJlYW0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1c1dpdGhUcmFjayh0cmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlTXV0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0cmVhbVNlcnZpY2UudG9nZ2xlTG9jYWxUcmFjayhTdHJlYW1UeXBlLkF1ZGlvKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICB0aGlzLnRvZ2dsZU11dGVGYWlsZWQuZW1pdChlcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN0YXR1c1dpdGhUcmFjayh0cmFjazogTWVkaWFTdHJlYW1UcmFjayB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLmlzRW5hYmxlZCA9IHRyYWNrICYmIHRyYWNrLmVuYWJsZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgdGhpcy5pc0Rpc2FibGVkID0gIXRyYWNrIHx8ICF0cmFjay5lbmFibGVkO1xuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIl19